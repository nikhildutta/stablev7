/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AccountRestaurantLookup as PrismaAccountRestaurantLookup,
  Account as PrismaAccount,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class AccountRestaurantLookupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccountRestaurantLookupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accountRestaurantLookup.count(args);
  }

  async accountRestaurantLookups<
    T extends Prisma.AccountRestaurantLookupFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.AccountRestaurantLookupFindManyArgs>
  ): Promise<PrismaAccountRestaurantLookup[]> {
    return this.prisma.accountRestaurantLookup.findMany<Prisma.AccountRestaurantLookupFindManyArgs>(
      args
    );
  }
  async accountRestaurantLookup<
    T extends Prisma.AccountRestaurantLookupFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.AccountRestaurantLookupFindUniqueArgs>
  ): Promise<PrismaAccountRestaurantLookup | null> {
    return this.prisma.accountRestaurantLookup.findUnique(args);
  }
  async createAccountRestaurantLookup<
    T extends Prisma.AccountRestaurantLookupCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.AccountRestaurantLookupCreateArgs>
  ): Promise<PrismaAccountRestaurantLookup> {
    return this.prisma.accountRestaurantLookup.create<T>(args);
  }
  async updateAccountRestaurantLookup<
    T extends Prisma.AccountRestaurantLookupUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.AccountRestaurantLookupUpdateArgs>
  ): Promise<PrismaAccountRestaurantLookup> {
    return this.prisma.accountRestaurantLookup.update<T>(args);
  }
  async deleteAccountRestaurantLookup<
    T extends Prisma.AccountRestaurantLookupDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.AccountRestaurantLookupDeleteArgs>
  ): Promise<PrismaAccountRestaurantLookup> {
    return this.prisma.accountRestaurantLookup.delete(args);
  }

  async getAccounts(parentId: string): Promise<PrismaAccount | null> {
    return this.prisma.accountRestaurantLookup
      .findUnique({
        where: { id: parentId },
      })
      .accounts();
  }

  async getRestaurants(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.accountRestaurantLookup
      .findUnique({
        where: { id: parentId },
      })
      .restaurants();
  }
}
