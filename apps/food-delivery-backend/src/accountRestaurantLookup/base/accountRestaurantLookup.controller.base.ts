/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AccountRestaurantLookupService } from "../accountRestaurantLookup.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AccountRestaurantLookupCreateInput } from "./AccountRestaurantLookupCreateInput";
import { AccountRestaurantLookup } from "./AccountRestaurantLookup";
import { AccountRestaurantLookupFindManyArgs } from "./AccountRestaurantLookupFindManyArgs";
import { AccountRestaurantLookupWhereUniqueInput } from "./AccountRestaurantLookupWhereUniqueInput";
import { AccountRestaurantLookupUpdateInput } from "./AccountRestaurantLookupUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AccountRestaurantLookupControllerBase {
  constructor(
    protected readonly service: AccountRestaurantLookupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccountRestaurantLookup })
  @nestAccessControl.UseRoles({
    resource: "AccountRestaurantLookup",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAccountRestaurantLookup(
    @common.Body() data: AccountRestaurantLookupCreateInput
  ): Promise<AccountRestaurantLookup> {
    return await this.service.createAccountRestaurantLookup({
      data: {
        ...data,

        accounts: {
          connect: data.accounts,
        },

        restaurants: {
          connect: data.restaurants,
        },
      },
      select: {
        accounts: {
          select: {
            id: true,
          },
        },

        id: true,

        restaurants: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AccountRestaurantLookup] })
  @ApiNestedQuery(AccountRestaurantLookupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AccountRestaurantLookup",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async accountRestaurantLookups(
    @common.Req() request: Request
  ): Promise<AccountRestaurantLookup[]> {
    const args = plainToClass(
      AccountRestaurantLookupFindManyArgs,
      request.query
    );
    return this.service.accountRestaurantLookups({
      ...args,
      select: {
        accounts: {
          select: {
            id: true,
          },
        },

        id: true,

        restaurants: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccountRestaurantLookup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AccountRestaurantLookup",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async accountRestaurantLookup(
    @common.Param() params: AccountRestaurantLookupWhereUniqueInput
  ): Promise<AccountRestaurantLookup | null> {
    const result = await this.service.accountRestaurantLookup({
      where: params,
      select: {
        accounts: {
          select: {
            id: true,
          },
        },

        id: true,

        restaurants: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccountRestaurantLookup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AccountRestaurantLookup",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAccountRestaurantLookup(
    @common.Param() params: AccountRestaurantLookupWhereUniqueInput,
    @common.Body() data: AccountRestaurantLookupUpdateInput
  ): Promise<AccountRestaurantLookup | null> {
    try {
      return await this.service.updateAccountRestaurantLookup({
        where: params,
        data: {
          ...data,

          accounts: {
            connect: data.accounts,
          },

          restaurants: {
            connect: data.restaurants,
          },
        },
        select: {
          accounts: {
            select: {
              id: true,
            },
          },

          id: true,

          restaurants: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccountRestaurantLookup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AccountRestaurantLookup",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAccountRestaurantLookup(
    @common.Param() params: AccountRestaurantLookupWhereUniqueInput
  ): Promise<AccountRestaurantLookup | null> {
    try {
      return await this.service.deleteAccountRestaurantLookup({
        where: params,
        select: {
          accounts: {
            select: {
              id: true,
            },
          },

          id: true,

          restaurants: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
