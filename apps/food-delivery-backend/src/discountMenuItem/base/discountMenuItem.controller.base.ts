/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DiscountMenuItemService } from "../discountMenuItem.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DiscountMenuItemCreateInput } from "./DiscountMenuItemCreateInput";
import { DiscountMenuItem } from "./DiscountMenuItem";
import { DiscountMenuItemFindManyArgs } from "./DiscountMenuItemFindManyArgs";
import { DiscountMenuItemWhereUniqueInput } from "./DiscountMenuItemWhereUniqueInput";
import { DiscountMenuItemUpdateInput } from "./DiscountMenuItemUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DiscountMenuItemControllerBase {
  constructor(
    protected readonly service: DiscountMenuItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DiscountMenuItem })
  @nestAccessControl.UseRoles({
    resource: "DiscountMenuItem",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDiscountMenuItem(
    @common.Body() data: DiscountMenuItemCreateInput
  ): Promise<DiscountMenuItem> {
    return await this.service.createDiscountMenuItem({
      data: {
        ...data,

        discount: {
          connect: data.discount,
        },

        menuItems: {
          connect: data.menuItems,
        },
      },
      select: {
        createdAt: true,

        discount: {
          select: {
            id: true,
          },
        },

        id: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [DiscountMenuItem] })
  @ApiNestedQuery(DiscountMenuItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DiscountMenuItem",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async discountMenuItems(
    @common.Req() request: Request
  ): Promise<DiscountMenuItem[]> {
    const args = plainToClass(DiscountMenuItemFindManyArgs, request.query);
    return this.service.discountMenuItems({
      ...args,
      select: {
        createdAt: true,

        discount: {
          select: {
            id: true,
          },
        },

        id: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DiscountMenuItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DiscountMenuItem",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async discountMenuItem(
    @common.Param() params: DiscountMenuItemWhereUniqueInput
  ): Promise<DiscountMenuItem | null> {
    const result = await this.service.discountMenuItem({
      where: params,
      select: {
        createdAt: true,

        discount: {
          select: {
            id: true,
          },
        },

        id: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DiscountMenuItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DiscountMenuItem",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDiscountMenuItem(
    @common.Param() params: DiscountMenuItemWhereUniqueInput,
    @common.Body() data: DiscountMenuItemUpdateInput
  ): Promise<DiscountMenuItem | null> {
    try {
      return await this.service.updateDiscountMenuItem({
        where: params,
        data: {
          ...data,

          discount: {
            connect: data.discount,
          },

          menuItems: {
            connect: data.menuItems,
          },
        },
        select: {
          createdAt: true,

          discount: {
            select: {
              id: true,
            },
          },

          id: true,

          menuItems: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DiscountMenuItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DiscountMenuItem",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDiscountMenuItem(
    @common.Param() params: DiscountMenuItemWhereUniqueInput
  ): Promise<DiscountMenuItem | null> {
    try {
      return await this.service.deleteDiscountMenuItem({
        where: params,
        select: {
          createdAt: true,

          discount: {
            select: {
              id: true,
            },
          },

          id: true,

          menuItems: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
