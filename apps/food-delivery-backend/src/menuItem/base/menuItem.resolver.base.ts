/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MenuItem } from "./MenuItem";
import { MenuItemCountArgs } from "./MenuItemCountArgs";
import { MenuItemFindManyArgs } from "./MenuItemFindManyArgs";
import { MenuItemFindUniqueArgs } from "./MenuItemFindUniqueArgs";
import { CreateMenuItemArgs } from "./CreateMenuItemArgs";
import { UpdateMenuItemArgs } from "./UpdateMenuItemArgs";
import { DeleteMenuItemArgs } from "./DeleteMenuItemArgs";
import { DailyMenuItemStockFindManyArgs } from "../../dailyMenuItemStock/base/DailyMenuItemStockFindManyArgs";
import { DailyMenuItemStock } from "../../dailyMenuItemStock/base/DailyMenuItemStock";
import { DiscountMenuItemFindManyArgs } from "../../discountMenuItem/base/DiscountMenuItemFindManyArgs";
import { DiscountMenuItem } from "../../discountMenuItem/base/DiscountMenuItem";
import { FavouriteMenuItemFindManyArgs } from "../../favouriteMenuItem/base/FavouriteMenuItemFindManyArgs";
import { FavouriteMenuItem } from "../../favouriteMenuItem/base/FavouriteMenuItem";
import { ItemPackagingFeeFindManyArgs } from "../../itemPackagingFee/base/ItemPackagingFeeFindManyArgs";
import { ItemPackagingFee } from "../../itemPackagingFee/base/ItemPackagingFee";
import { MenuItemIngredientFindManyArgs } from "../../menuItemIngredient/base/MenuItemIngredientFindManyArgs";
import { MenuItemIngredient } from "../../menuItemIngredient/base/MenuItemIngredient";
import { MenuItemsHashtagsMapFindManyArgs } from "../../menuItemsHashtagsMap/base/MenuItemsHashtagsMapFindManyArgs";
import { MenuItemsHashtagsMap } from "../../menuItemsHashtagsMap/base/MenuItemsHashtagsMap";
import { MenuItemsOptionsGroupFindManyArgs } from "../../menuItemsOptionsGroup/base/MenuItemsOptionsGroupFindManyArgs";
import { MenuItemsOptionsGroup } from "../../menuItemsOptionsGroup/base/MenuItemsOptionsGroup";
import { MenuItemsWindowMapFindManyArgs } from "../../menuItemsWindowMap/base/MenuItemsWindowMapFindManyArgs";
import { MenuItemsWindowMap } from "../../menuItemsWindowMap/base/MenuItemsWindowMap";
import { MenuSubCategory } from "../../menuSubCategory/base/MenuSubCategory";
import { MenuItemService } from "../menuItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MenuItem)
export class MenuItemResolverBase {
  constructor(
    protected readonly service: MenuItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  async _menuItemsMeta(
    @graphql.Args() args: MenuItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MenuItem])
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  async menuItems(
    @graphql.Args() args: MenuItemFindManyArgs
  ): Promise<MenuItem[]> {
    return this.service.menuItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MenuItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "own",
  })
  async menuItem(
    @graphql.Args() args: MenuItemFindUniqueArgs
  ): Promise<MenuItem | null> {
    const result = await this.service.menuItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuItem)
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "create",
    possession: "any",
  })
  async createMenuItem(
    @graphql.Args() args: CreateMenuItemArgs
  ): Promise<MenuItem> {
    return await this.service.createMenuItem({
      ...args,
      data: {
        ...args.data,

        menuSubCategories: {
          connect: args.data.menuSubCategories,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuItem)
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async updateMenuItem(
    @graphql.Args() args: UpdateMenuItemArgs
  ): Promise<MenuItem | null> {
    try {
      return await this.service.updateMenuItem({
        ...args,
        data: {
          ...args.data,

          menuSubCategories: {
            connect: args.data.menuSubCategories,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MenuItem)
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "delete",
    possession: "any",
  })
  async deleteMenuItem(
    @graphql.Args() args: DeleteMenuItemArgs
  ): Promise<MenuItem | null> {
    try {
      return await this.service.deleteMenuItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DailyMenuItemStock], {
    name: "dailyMenuItemStock",
  })
  @nestAccessControl.UseRoles({
    resource: "DailyMenuItemStock",
    action: "read",
    possession: "any",
  })
  async findDailyMenuItemStock(
    @graphql.Parent() parent: MenuItem,
    @graphql.Args() args: DailyMenuItemStockFindManyArgs
  ): Promise<DailyMenuItemStock[]> {
    const results = await this.service.findDailyMenuItemStock(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DiscountMenuItem], { name: "discountMenuItem" })
  @nestAccessControl.UseRoles({
    resource: "DiscountMenuItem",
    action: "read",
    possession: "any",
  })
  async findDiscountMenuItem(
    @graphql.Parent() parent: MenuItem,
    @graphql.Args() args: DiscountMenuItemFindManyArgs
  ): Promise<DiscountMenuItem[]> {
    const results = await this.service.findDiscountMenuItem(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FavouriteMenuItem], {
    name: "favouriteMenuItems",
  })
  @nestAccessControl.UseRoles({
    resource: "FavouriteMenuItem",
    action: "read",
    possession: "any",
  })
  async findFavouriteMenuItems(
    @graphql.Parent() parent: MenuItem,
    @graphql.Args() args: FavouriteMenuItemFindManyArgs
  ): Promise<FavouriteMenuItem[]> {
    const results = await this.service.findFavouriteMenuItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ItemPackagingFee], { name: "itemPackagingFee" })
  @nestAccessControl.UseRoles({
    resource: "ItemPackagingFee",
    action: "read",
    possession: "any",
  })
  async findItemPackagingFee(
    @graphql.Parent() parent: MenuItem,
    @graphql.Args() args: ItemPackagingFeeFindManyArgs
  ): Promise<ItemPackagingFee[]> {
    const results = await this.service.findItemPackagingFee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MenuItemIngredient], {
    name: "menuItemIngredients",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItemIngredient",
    action: "read",
    possession: "any",
  })
  async findMenuItemIngredients(
    @graphql.Parent() parent: MenuItem,
    @graphql.Args() args: MenuItemIngredientFindManyArgs
  ): Promise<MenuItemIngredient[]> {
    const results = await this.service.findMenuItemIngredients(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MenuItemsHashtagsMap], {
    name: "menuItemsHashtagsMap",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItemsHashtagsMap",
    action: "read",
    possession: "any",
  })
  async findMenuItemsHashtagsMap(
    @graphql.Parent() parent: MenuItem,
    @graphql.Args() args: MenuItemsHashtagsMapFindManyArgs
  ): Promise<MenuItemsHashtagsMap[]> {
    const results = await this.service.findMenuItemsHashtagsMap(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MenuItemsOptionsGroup], {
    name: "menuItemsOptionsGroups",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "read",
    possession: "any",
  })
  async findMenuItemsOptionsGroups(
    @graphql.Parent() parent: MenuItem,
    @graphql.Args() args: MenuItemsOptionsGroupFindManyArgs
  ): Promise<MenuItemsOptionsGroup[]> {
    const results = await this.service.findMenuItemsOptionsGroups(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MenuItemsWindowMap], {
    name: "menuItemsWindowMap",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItemsWindowMap",
    action: "read",
    possession: "any",
  })
  async findMenuItemsWindowMap(
    @graphql.Parent() parent: MenuItem,
    @graphql.Args() args: MenuItemsWindowMapFindManyArgs
  ): Promise<MenuItemsWindowMap[]> {
    const results = await this.service.findMenuItemsWindowMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MenuSubCategory, {
    nullable: true,
    name: "menuSubCategories",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuSubCategory",
    action: "read",
    possession: "any",
  })
  async getMenuSubCategories(
    @graphql.Parent() parent: MenuItem
  ): Promise<MenuSubCategory | null> {
    const result = await this.service.getMenuSubCategories(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
