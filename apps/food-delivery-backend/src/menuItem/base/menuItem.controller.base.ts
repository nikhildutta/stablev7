/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MenuItemService } from "../menuItem.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MenuItemCreateInput } from "./MenuItemCreateInput";
import { MenuItem } from "./MenuItem";
import { MenuItemFindManyArgs } from "./MenuItemFindManyArgs";
import { MenuItemWhereUniqueInput } from "./MenuItemWhereUniqueInput";
import { MenuItemUpdateInput } from "./MenuItemUpdateInput";
import { DailyMenuItemStockFindManyArgs } from "../../dailyMenuItemStock/base/DailyMenuItemStockFindManyArgs";
import { DailyMenuItemStock } from "../../dailyMenuItemStock/base/DailyMenuItemStock";
import { DailyMenuItemStockWhereUniqueInput } from "../../dailyMenuItemStock/base/DailyMenuItemStockWhereUniqueInput";
import { DiscountMenuItemFindManyArgs } from "../../discountMenuItem/base/DiscountMenuItemFindManyArgs";
import { DiscountMenuItem } from "../../discountMenuItem/base/DiscountMenuItem";
import { DiscountMenuItemWhereUniqueInput } from "../../discountMenuItem/base/DiscountMenuItemWhereUniqueInput";
import { FavouriteMenuItemFindManyArgs } from "../../favouriteMenuItem/base/FavouriteMenuItemFindManyArgs";
import { FavouriteMenuItem } from "../../favouriteMenuItem/base/FavouriteMenuItem";
import { FavouriteMenuItemWhereUniqueInput } from "../../favouriteMenuItem/base/FavouriteMenuItemWhereUniqueInput";
import { ItemPackagingFeeFindManyArgs } from "../../itemPackagingFee/base/ItemPackagingFeeFindManyArgs";
import { ItemPackagingFee } from "../../itemPackagingFee/base/ItemPackagingFee";
import { ItemPackagingFeeWhereUniqueInput } from "../../itemPackagingFee/base/ItemPackagingFeeWhereUniqueInput";
import { MenuItemIngredientFindManyArgs } from "../../menuItemIngredient/base/MenuItemIngredientFindManyArgs";
import { MenuItemIngredient } from "../../menuItemIngredient/base/MenuItemIngredient";
import { MenuItemIngredientWhereUniqueInput } from "../../menuItemIngredient/base/MenuItemIngredientWhereUniqueInput";
import { MenuItemsHashtagsMapFindManyArgs } from "../../menuItemsHashtagsMap/base/MenuItemsHashtagsMapFindManyArgs";
import { MenuItemsHashtagsMap } from "../../menuItemsHashtagsMap/base/MenuItemsHashtagsMap";
import { MenuItemsHashtagsMapWhereUniqueInput } from "../../menuItemsHashtagsMap/base/MenuItemsHashtagsMapWhereUniqueInput";
import { MenuItemsOptionsGroupFindManyArgs } from "../../menuItemsOptionsGroup/base/MenuItemsOptionsGroupFindManyArgs";
import { MenuItemsOptionsGroup } from "../../menuItemsOptionsGroup/base/MenuItemsOptionsGroup";
import { MenuItemsOptionsGroupWhereUniqueInput } from "../../menuItemsOptionsGroup/base/MenuItemsOptionsGroupWhereUniqueInput";
import { MenuItemsWindowMapFindManyArgs } from "../../menuItemsWindowMap/base/MenuItemsWindowMapFindManyArgs";
import { MenuItemsWindowMap } from "../../menuItemsWindowMap/base/MenuItemsWindowMap";
import { MenuItemsWindowMapWhereUniqueInput } from "../../menuItemsWindowMap/base/MenuItemsWindowMapWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MenuItemControllerBase {
  constructor(
    protected readonly service: MenuItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MenuItem })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMenuItem(
    @common.Body() data: MenuItemCreateInput
  ): Promise<MenuItem> {
    return await this.service.createMenuItem({
      data: {
        ...data,

        menuSubCategories: {
          connect: data.menuSubCategories,
        },
      },
      select: {
        availableQuantity: true,
        basePrice: true,
        containsEgg: true,
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        ingredients: true,
        isActive: true,
        isDeliverable: true,
        isDineinAvailable: true,
        isLimitedStock: true,
        isPickup: true,
        isVegetarian: true,

        menuSubCategories: {
          select: {
            id: true,
          },
        },

        name: true,
        preparationTime: true,
        shareSlug: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MenuItem] })
  @ApiNestedQuery(MenuItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async menuItems(@common.Req() request: Request): Promise<MenuItem[]> {
    const args = plainToClass(MenuItemFindManyArgs, request.query);
    return this.service.menuItems({
      ...args,
      select: {
        availableQuantity: true,
        basePrice: true,
        containsEgg: true,
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        ingredients: true,
        isActive: true,
        isDeliverable: true,
        isDineinAvailable: true,
        isLimitedStock: true,
        isPickup: true,
        isVegetarian: true,

        menuSubCategories: {
          select: {
            id: true,
          },
        },

        name: true,
        preparationTime: true,
        shareSlug: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MenuItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async menuItem(
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<MenuItem | null> {
    const result = await this.service.menuItem({
      where: params,
      select: {
        availableQuantity: true,
        basePrice: true,
        containsEgg: true,
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        ingredients: true,
        isActive: true,
        isDeliverable: true,
        isDineinAvailable: true,
        isLimitedStock: true,
        isPickup: true,
        isVegetarian: true,

        menuSubCategories: {
          select: {
            id: true,
          },
        },

        name: true,
        preparationTime: true,
        shareSlug: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MenuItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMenuItem(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() data: MenuItemUpdateInput
  ): Promise<MenuItem | null> {
    try {
      return await this.service.updateMenuItem({
        where: params,
        data: {
          ...data,

          menuSubCategories: {
            connect: data.menuSubCategories,
          },
        },
        select: {
          availableQuantity: true,
          basePrice: true,
          containsEgg: true,
          createdAt: true,
          description: true,
          id: true,
          imageUrl: true,
          ingredients: true,
          isActive: true,
          isDeliverable: true,
          isDineinAvailable: true,
          isLimitedStock: true,
          isPickup: true,
          isVegetarian: true,

          menuSubCategories: {
            select: {
              id: true,
            },
          },

          name: true,
          preparationTime: true,
          shareSlug: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MenuItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMenuItem(
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<MenuItem | null> {
    try {
      return await this.service.deleteMenuItem({
        where: params,
        select: {
          availableQuantity: true,
          basePrice: true,
          containsEgg: true,
          createdAt: true,
          description: true,
          id: true,
          imageUrl: true,
          ingredients: true,
          isActive: true,
          isDeliverable: true,
          isDineinAvailable: true,
          isLimitedStock: true,
          isPickup: true,
          isVegetarian: true,

          menuSubCategories: {
            select: {
              id: true,
            },
          },

          name: true,
          preparationTime: true,
          shareSlug: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/dailyMenuItemStock")
  @ApiNestedQuery(DailyMenuItemStockFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DailyMenuItemStock",
    action: "read",
    possession: "any",
  })
  async findDailyMenuItemStock(
    @common.Req() request: Request,
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<DailyMenuItemStock[]> {
    const query = plainToClass(DailyMenuItemStockFindManyArgs, request.query);
    const results = await this.service.findDailyMenuItemStock(params.id, {
      ...query,
      select: {
        availableStock: true,
        createdAt: true,
        id: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        totalStock: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dailyMenuItemStock")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async connectDailyMenuItemStock(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: DailyMenuItemStockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dailyMenuItemStock: {
        connect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dailyMenuItemStock")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async updateDailyMenuItemStock(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: DailyMenuItemStockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dailyMenuItemStock: {
        set: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dailyMenuItemStock")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async disconnectDailyMenuItemStock(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: DailyMenuItemStockWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dailyMenuItemStock: {
        disconnect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/discountMenuItem")
  @ApiNestedQuery(DiscountMenuItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DiscountMenuItem",
    action: "read",
    possession: "any",
  })
  async findDiscountMenuItem(
    @common.Req() request: Request,
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<DiscountMenuItem[]> {
    const query = plainToClass(DiscountMenuItemFindManyArgs, request.query);
    const results = await this.service.findDiscountMenuItem(params.id, {
      ...query,
      select: {
        createdAt: true,

        discount: {
          select: {
            id: true,
          },
        },

        id: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/discountMenuItem")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async connectDiscountMenuItem(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: DiscountMenuItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discountMenuItem: {
        connect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/discountMenuItem")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async updateDiscountMenuItem(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: DiscountMenuItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discountMenuItem: {
        set: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/discountMenuItem")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async disconnectDiscountMenuItem(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: DiscountMenuItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discountMenuItem: {
        disconnect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/favouriteMenuItems")
  @ApiNestedQuery(FavouriteMenuItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FavouriteMenuItem",
    action: "read",
    possession: "any",
  })
  async findFavouriteMenuItems(
    @common.Req() request: Request,
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<FavouriteMenuItem[]> {
    const query = plainToClass(FavouriteMenuItemFindManyArgs, request.query);
    const results = await this.service.findFavouriteMenuItems(params.id, {
      ...query,
      select: {
        createdAt: true,

        favourites: {
          select: {
            id: true,
          },
        },

        id: true,

        menuItems: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/favouriteMenuItems")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async connectFavouriteMenuItems(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: FavouriteMenuItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favouriteMenuItems: {
        connect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/favouriteMenuItems")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async updateFavouriteMenuItems(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: FavouriteMenuItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favouriteMenuItems: {
        set: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/favouriteMenuItems")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async disconnectFavouriteMenuItems(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: FavouriteMenuItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favouriteMenuItems: {
        disconnect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/itemPackagingFee")
  @ApiNestedQuery(ItemPackagingFeeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ItemPackagingFee",
    action: "read",
    possession: "any",
  })
  async findItemPackagingFee(
    @common.Req() request: Request,
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<ItemPackagingFee[]> {
    const query = plainToClass(ItemPackagingFeeFindManyArgs, request.query);
    const results = await this.service.findItemPackagingFee(params.id, {
      ...query,
      select: {
        id: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        packingFee: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/itemPackagingFee")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async connectItemPackagingFee(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: ItemPackagingFeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itemPackagingFee: {
        connect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/itemPackagingFee")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async updateItemPackagingFee(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: ItemPackagingFeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itemPackagingFee: {
        set: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/itemPackagingFee")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async disconnectItemPackagingFee(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: ItemPackagingFeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      itemPackagingFee: {
        disconnect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/menuItemIngredients")
  @ApiNestedQuery(MenuItemIngredientFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuItemIngredient",
    action: "read",
    possession: "any",
  })
  async findMenuItemIngredients(
    @common.Req() request: Request,
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<MenuItemIngredient[]> {
    const query = plainToClass(MenuItemIngredientFindManyArgs, request.query);
    const results = await this.service.findMenuItemIngredients(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        ingredient: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/menuItemIngredients")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async connectMenuItemIngredients(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemIngredientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemIngredients: {
        connect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/menuItemIngredients")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async updateMenuItemIngredients(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemIngredientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemIngredients: {
        set: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/menuItemIngredients")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async disconnectMenuItemIngredients(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemIngredientWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemIngredients: {
        disconnect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/menuItemsHashtagsMap")
  @ApiNestedQuery(MenuItemsHashtagsMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuItemsHashtagsMap",
    action: "read",
    possession: "any",
  })
  async findMenuItemsHashtagsMap(
    @common.Req() request: Request,
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<MenuItemsHashtagsMap[]> {
    const query = plainToClass(MenuItemsHashtagsMapFindManyArgs, request.query);
    const results = await this.service.findMenuItemsHashtagsMap(params.id, {
      ...query,
      select: {
        hashtags: {
          select: {
            id: true,
          },
        },

        id: true,

        menuItems: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/menuItemsHashtagsMap")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async connectMenuItemsHashtagsMap(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemsHashtagsMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemsHashtagsMap: {
        connect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/menuItemsHashtagsMap")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async updateMenuItemsHashtagsMap(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemsHashtagsMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemsHashtagsMap: {
        set: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/menuItemsHashtagsMap")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async disconnectMenuItemsHashtagsMap(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemsHashtagsMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemsHashtagsMap: {
        disconnect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/menuItemsOptionsGroups")
  @ApiNestedQuery(MenuItemsOptionsGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "read",
    possession: "any",
  })
  async findMenuItemsOptionsGroups(
    @common.Req() request: Request,
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<MenuItemsOptionsGroup[]> {
    const query = plainToClass(
      MenuItemsOptionsGroupFindManyArgs,
      request.query
    );
    const results = await this.service.findMenuItemsOptionsGroups(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        lowerLimit: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        optionGroupDescription: true,
        optionGroupName: true,
        updatedAt: true,
        upperLimit: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/menuItemsOptionsGroups")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async connectMenuItemsOptionsGroups(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemsOptionsGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemsOptionsGroups: {
        connect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/menuItemsOptionsGroups")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async updateMenuItemsOptionsGroups(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemsOptionsGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemsOptionsGroups: {
        set: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/menuItemsOptionsGroups")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async disconnectMenuItemsOptionsGroups(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemsOptionsGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemsOptionsGroups: {
        disconnect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/menuItemsWindowMap")
  @ApiNestedQuery(MenuItemsWindowMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuItemsWindowMap",
    action: "read",
    possession: "any",
  })
  async findMenuItemsWindowMap(
    @common.Req() request: Request,
    @common.Param() params: MenuItemWhereUniqueInput
  ): Promise<MenuItemsWindowMap[]> {
    const query = plainToClass(MenuItemsWindowMapFindManyArgs, request.query);
    const results = await this.service.findMenuItemsWindowMap(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        is247: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        timeWindow: {
          select: {
            id: true,
          },
        },

        time_window_day: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/menuItemsWindowMap")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async connectMenuItemsWindowMap(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemsWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemsWindowMap: {
        connect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/menuItemsWindowMap")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async updateMenuItemsWindowMap(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemsWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemsWindowMap: {
        set: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/menuItemsWindowMap")
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "update",
    possession: "any",
  })
  async disconnectMenuItemsWindowMap(
    @common.Param() params: MenuItemWhereUniqueInput,
    @common.Body() body: MenuItemsWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemsWindowMap: {
        disconnect: body,
      },
    };
    await this.service.updateMenuItem({
      where: params,
      data,
      select: { id: true },
    });
  }
}
