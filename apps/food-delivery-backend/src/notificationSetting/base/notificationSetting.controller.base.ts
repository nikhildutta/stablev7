/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { NotificationSettingService } from "../notificationSetting.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { NotificationSettingCreateInput } from "./NotificationSettingCreateInput";
import { NotificationSetting } from "./NotificationSetting";
import { NotificationSettingFindManyArgs } from "./NotificationSettingFindManyArgs";
import { NotificationSettingWhereUniqueInput } from "./NotificationSettingWhereUniqueInput";
import { NotificationSettingUpdateInput } from "./NotificationSettingUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class NotificationSettingControllerBase {
  constructor(
    protected readonly service: NotificationSettingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NotificationSetting })
  @nestAccessControl.UseRoles({
    resource: "NotificationSetting",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createNotificationSetting(
    @common.Body() data: NotificationSettingCreateInput
  ): Promise<NotificationSetting> {
    return await this.service.createNotificationSetting({
      data: {
        ...data,

        appUsers: {
          connect: data.appUsers,
        },
      },
      select: {
        appUsers: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        settingName: true,
        settingValue: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [NotificationSetting] })
  @ApiNestedQuery(NotificationSettingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "NotificationSetting",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async notificationSettings(
    @common.Req() request: Request
  ): Promise<NotificationSetting[]> {
    const args = plainToClass(NotificationSettingFindManyArgs, request.query);
    return this.service.notificationSettings({
      ...args,
      select: {
        appUsers: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        settingName: true,
        settingValue: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NotificationSetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NotificationSetting",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async notificationSetting(
    @common.Param() params: NotificationSettingWhereUniqueInput
  ): Promise<NotificationSetting | null> {
    const result = await this.service.notificationSetting({
      where: params,
      select: {
        appUsers: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        settingName: true,
        settingValue: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NotificationSetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NotificationSetting",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateNotificationSetting(
    @common.Param() params: NotificationSettingWhereUniqueInput,
    @common.Body() data: NotificationSettingUpdateInput
  ): Promise<NotificationSetting | null> {
    try {
      return await this.service.updateNotificationSetting({
        where: params,
        data: {
          ...data,

          appUsers: {
            connect: data.appUsers,
          },
        },
        select: {
          appUsers: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          settingName: true,
          settingValue: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NotificationSetting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NotificationSetting",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteNotificationSetting(
    @common.Param() params: NotificationSettingWhereUniqueInput
  ): Promise<NotificationSetting | null> {
    try {
      return await this.service.deleteNotificationSetting({
        where: params,
        select: {
          appUsers: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          settingName: true,
          settingValue: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
