/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SubscriptionPlanService } from "../subscriptionPlan.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SubscriptionPlanCreateInput } from "./SubscriptionPlanCreateInput";
import { SubscriptionPlan } from "./SubscriptionPlan";
import { SubscriptionPlanFindManyArgs } from "./SubscriptionPlanFindManyArgs";
import { SubscriptionPlanWhereUniqueInput } from "./SubscriptionPlanWhereUniqueInput";
import { SubscriptionPlanUpdateInput } from "./SubscriptionPlanUpdateInput";
import { CustomerSubscriptionFindManyArgs } from "../../customerSubscription/base/CustomerSubscriptionFindManyArgs";
import { CustomerSubscription } from "../../customerSubscription/base/CustomerSubscription";
import { CustomerSubscriptionWhereUniqueInput } from "../../customerSubscription/base/CustomerSubscriptionWhereUniqueInput";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { SubscriptionWhereUniqueInput } from "../../subscription/base/SubscriptionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SubscriptionPlanControllerBase {
  constructor(
    protected readonly service: SubscriptionPlanService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SubscriptionPlan })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSubscriptionPlan(
    @common.Body() data: SubscriptionPlanCreateInput
  ): Promise<SubscriptionPlan> {
    return await this.service.createSubscriptionPlan({
      data: data,
      select: {
        createdAt: true,
        description: true,
        duration: true,
        durationUnit: true,
        id: true,
        isActive: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SubscriptionPlan] })
  @ApiNestedQuery(SubscriptionPlanFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subscriptionPlans(
    @common.Req() request: Request
  ): Promise<SubscriptionPlan[]> {
    const args = plainToClass(SubscriptionPlanFindManyArgs, request.query);
    return this.service.subscriptionPlans({
      ...args,
      select: {
        createdAt: true,
        description: true,
        duration: true,
        durationUnit: true,
        id: true,
        isActive: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SubscriptionPlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subscriptionPlan(
    @common.Param() params: SubscriptionPlanWhereUniqueInput
  ): Promise<SubscriptionPlan | null> {
    const result = await this.service.subscriptionPlan({
      where: params,
      select: {
        createdAt: true,
        description: true,
        duration: true,
        durationUnit: true,
        id: true,
        isActive: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SubscriptionPlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSubscriptionPlan(
    @common.Param() params: SubscriptionPlanWhereUniqueInput,
    @common.Body() data: SubscriptionPlanUpdateInput
  ): Promise<SubscriptionPlan | null> {
    try {
      return await this.service.updateSubscriptionPlan({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          duration: true,
          durationUnit: true,
          id: true,
          isActive: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SubscriptionPlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSubscriptionPlan(
    @common.Param() params: SubscriptionPlanWhereUniqueInput
  ): Promise<SubscriptionPlan | null> {
    try {
      return await this.service.deleteSubscriptionPlan({
        where: params,
        select: {
          createdAt: true,
          description: true,
          duration: true,
          durationUnit: true,
          id: true,
          isActive: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/customerSubscriptions")
  @ApiNestedQuery(CustomerSubscriptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CustomerSubscription",
    action: "read",
    possession: "any",
  })
  async findCustomerSubscriptions(
    @common.Req() request: Request,
    @common.Param() params: SubscriptionPlanWhereUniqueInput
  ): Promise<CustomerSubscription[]> {
    const query = plainToClass(CustomerSubscriptionFindManyArgs, request.query);
    const results = await this.service.findCustomerSubscriptions(params.id, {
      ...query,
      select: {
        activationDate: true,

        appUsers: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        expirationDate: true,
        id: true,
        renewalCount: true,

        subscriptionPlans: {
          select: {
            id: true,
          },
        },

        subscriptions: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customerSubscriptions")
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "update",
    possession: "any",
  })
  async connectCustomerSubscriptions(
    @common.Param() params: SubscriptionPlanWhereUniqueInput,
    @common.Body() body: CustomerSubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerSubscriptions: {
        connect: body,
      },
    };
    await this.service.updateSubscriptionPlan({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customerSubscriptions")
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "update",
    possession: "any",
  })
  async updateCustomerSubscriptions(
    @common.Param() params: SubscriptionPlanWhereUniqueInput,
    @common.Body() body: CustomerSubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerSubscriptions: {
        set: body,
      },
    };
    await this.service.updateSubscriptionPlan({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customerSubscriptions")
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "update",
    possession: "any",
  })
  async disconnectCustomerSubscriptions(
    @common.Param() params: SubscriptionPlanWhereUniqueInput,
    @common.Body() body: CustomerSubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerSubscriptions: {
        disconnect: body,
      },
    };
    await this.service.updateSubscriptionPlan({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/subscriptions")
  @ApiNestedQuery(SubscriptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "read",
    possession: "any",
  })
  async findSubscriptions(
    @common.Req() request: Request,
    @common.Param() params: SubscriptionPlanWhereUniqueInput
  ): Promise<Subscription[]> {
    const query = plainToClass(SubscriptionFindManyArgs, request.query);
    const results = await this.service.findSubscriptions(params.id, {
      ...query,
      select: {
        appUsers: {
          select: {
            id: true,
          },
        },

        autoRenew: true,
        createdAt: true,
        endDate: true,
        id: true,
        paymentStatus: true,
        startDate: true,
        status: true,

        subscriptionPlans: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subscriptions")
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "update",
    possession: "any",
  })
  async connectSubscriptions(
    @common.Param() params: SubscriptionPlanWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        connect: body,
      },
    };
    await this.service.updateSubscriptionPlan({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subscriptions")
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "update",
    possession: "any",
  })
  async updateSubscriptions(
    @common.Param() params: SubscriptionPlanWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        set: body,
      },
    };
    await this.service.updateSubscriptionPlan({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subscriptions")
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "update",
    possession: "any",
  })
  async disconnectSubscriptions(
    @common.Param() params: SubscriptionPlanWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        disconnect: body,
      },
    };
    await this.service.updateSubscriptionPlan({
      where: params,
      data,
      select: { id: true },
    });
  }
}
