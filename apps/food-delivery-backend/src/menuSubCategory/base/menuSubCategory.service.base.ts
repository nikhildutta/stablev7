/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MenuSubCategory as PrismaMenuSubCategory,
  MenuItem as PrismaMenuItem,
  MenuCategory as PrismaMenuCategory,
} from "@prisma/client";

export class MenuSubCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MenuSubCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.menuSubCategory.count(args);
  }

  async menuSubCategories<T extends Prisma.MenuSubCategoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuSubCategoryFindManyArgs>
  ): Promise<PrismaMenuSubCategory[]> {
    return this.prisma.menuSubCategory.findMany<Prisma.MenuSubCategoryFindManyArgs>(
      args
    );
  }
  async menuSubCategory<T extends Prisma.MenuSubCategoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuSubCategoryFindUniqueArgs>
  ): Promise<PrismaMenuSubCategory | null> {
    return this.prisma.menuSubCategory.findUnique(args);
  }
  async createMenuSubCategory<T extends Prisma.MenuSubCategoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuSubCategoryCreateArgs>
  ): Promise<PrismaMenuSubCategory> {
    return this.prisma.menuSubCategory.create<T>(args);
  }
  async updateMenuSubCategory<T extends Prisma.MenuSubCategoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuSubCategoryUpdateArgs>
  ): Promise<PrismaMenuSubCategory> {
    return this.prisma.menuSubCategory.update<T>(args);
  }
  async deleteMenuSubCategory<T extends Prisma.MenuSubCategoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuSubCategoryDeleteArgs>
  ): Promise<PrismaMenuSubCategory> {
    return this.prisma.menuSubCategory.delete(args);
  }

  async findMenuItems(
    parentId: string,
    args: Prisma.MenuItemFindManyArgs
  ): Promise<PrismaMenuItem[]> {
    return this.prisma.menuSubCategory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .menuItems(args);
  }

  async getMenuCategories(
    parentId: string
  ): Promise<PrismaMenuCategory | null> {
    return this.prisma.menuSubCategory
      .findUnique({
        where: { id: parentId },
      })
      .menuCategories();
  }
}
