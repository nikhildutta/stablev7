/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MenuSubCategory } from "./MenuSubCategory";
import { MenuSubCategoryCountArgs } from "./MenuSubCategoryCountArgs";
import { MenuSubCategoryFindManyArgs } from "./MenuSubCategoryFindManyArgs";
import { MenuSubCategoryFindUniqueArgs } from "./MenuSubCategoryFindUniqueArgs";
import { CreateMenuSubCategoryArgs } from "./CreateMenuSubCategoryArgs";
import { UpdateMenuSubCategoryArgs } from "./UpdateMenuSubCategoryArgs";
import { DeleteMenuSubCategoryArgs } from "./DeleteMenuSubCategoryArgs";
import { MenuItemFindManyArgs } from "../../menuItem/base/MenuItemFindManyArgs";
import { MenuItem } from "../../menuItem/base/MenuItem";
import { MenuCategory } from "../../menuCategory/base/MenuCategory";
import { MenuSubCategoryService } from "../menuSubCategory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MenuSubCategory)
export class MenuSubCategoryResolverBase {
  constructor(
    protected readonly service: MenuSubCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MenuSubCategory",
    action: "read",
    possession: "any",
  })
  async _menuSubCategoriesMeta(
    @graphql.Args() args: MenuSubCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MenuSubCategory])
  @nestAccessControl.UseRoles({
    resource: "MenuSubCategory",
    action: "read",
    possession: "any",
  })
  async menuSubCategories(
    @graphql.Args() args: MenuSubCategoryFindManyArgs
  ): Promise<MenuSubCategory[]> {
    return this.service.menuSubCategories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MenuSubCategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MenuSubCategory",
    action: "read",
    possession: "own",
  })
  async menuSubCategory(
    @graphql.Args() args: MenuSubCategoryFindUniqueArgs
  ): Promise<MenuSubCategory | null> {
    const result = await this.service.menuSubCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuSubCategory)
  @nestAccessControl.UseRoles({
    resource: "MenuSubCategory",
    action: "create",
    possession: "any",
  })
  async createMenuSubCategory(
    @graphql.Args() args: CreateMenuSubCategoryArgs
  ): Promise<MenuSubCategory> {
    return await this.service.createMenuSubCategory({
      ...args,
      data: {
        ...args.data,

        menuCategories: {
          connect: args.data.menuCategories,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuSubCategory)
  @nestAccessControl.UseRoles({
    resource: "MenuSubCategory",
    action: "update",
    possession: "any",
  })
  async updateMenuSubCategory(
    @graphql.Args() args: UpdateMenuSubCategoryArgs
  ): Promise<MenuSubCategory | null> {
    try {
      return await this.service.updateMenuSubCategory({
        ...args,
        data: {
          ...args.data,

          menuCategories: {
            connect: args.data.menuCategories,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MenuSubCategory)
  @nestAccessControl.UseRoles({
    resource: "MenuSubCategory",
    action: "delete",
    possession: "any",
  })
  async deleteMenuSubCategory(
    @graphql.Args() args: DeleteMenuSubCategoryArgs
  ): Promise<MenuSubCategory | null> {
    try {
      return await this.service.deleteMenuSubCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MenuItem], { name: "menuItems" })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  async findMenuItems(
    @graphql.Parent() parent: MenuSubCategory,
    @graphql.Args() args: MenuItemFindManyArgs
  ): Promise<MenuItem[]> {
    const results = await this.service.findMenuItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MenuCategory, {
    nullable: true,
    name: "menuCategories",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuCategory",
    action: "read",
    possession: "any",
  })
  async getMenuCategories(
    @graphql.Parent() parent: MenuSubCategory
  ): Promise<MenuCategory | null> {
    const result = await this.service.getMenuCategories(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
