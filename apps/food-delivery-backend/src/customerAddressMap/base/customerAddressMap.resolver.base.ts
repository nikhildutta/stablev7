/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CustomerAddressMap } from "./CustomerAddressMap";
import { CustomerAddressMapCountArgs } from "./CustomerAddressMapCountArgs";
import { CustomerAddressMapFindManyArgs } from "./CustomerAddressMapFindManyArgs";
import { CustomerAddressMapFindUniqueArgs } from "./CustomerAddressMapFindUniqueArgs";
import { CreateCustomerAddressMapArgs } from "./CreateCustomerAddressMapArgs";
import { UpdateCustomerAddressMapArgs } from "./UpdateCustomerAddressMapArgs";
import { DeleteCustomerAddressMapArgs } from "./DeleteCustomerAddressMapArgs";
import { Address } from "../../address/base/Address";
import { Customer } from "../../customer/base/Customer";
import { CustomerAddressMapService } from "../customerAddressMap.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CustomerAddressMap)
export class CustomerAddressMapResolverBase {
  constructor(
    protected readonly service: CustomerAddressMapService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CustomerAddressMap",
    action: "read",
    possession: "any",
  })
  async _customerAddressMapsMeta(
    @graphql.Args() args: CustomerAddressMapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CustomerAddressMap])
  @nestAccessControl.UseRoles({
    resource: "CustomerAddressMap",
    action: "read",
    possession: "any",
  })
  async customerAddressMaps(
    @graphql.Args() args: CustomerAddressMapFindManyArgs
  ): Promise<CustomerAddressMap[]> {
    return this.service.customerAddressMaps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CustomerAddressMap, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CustomerAddressMap",
    action: "read",
    possession: "own",
  })
  async customerAddressMap(
    @graphql.Args() args: CustomerAddressMapFindUniqueArgs
  ): Promise<CustomerAddressMap | null> {
    const result = await this.service.customerAddressMap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerAddressMap)
  @nestAccessControl.UseRoles({
    resource: "CustomerAddressMap",
    action: "create",
    possession: "any",
  })
  async createCustomerAddressMap(
    @graphql.Args() args: CreateCustomerAddressMapArgs
  ): Promise<CustomerAddressMap> {
    return await this.service.createCustomerAddressMap({
      ...args,
      data: {
        ...args.data,

        addresses: {
          connect: args.data.addresses,
        },

        customers: {
          connect: args.data.customers,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerAddressMap)
  @nestAccessControl.UseRoles({
    resource: "CustomerAddressMap",
    action: "update",
    possession: "any",
  })
  async updateCustomerAddressMap(
    @graphql.Args() args: UpdateCustomerAddressMapArgs
  ): Promise<CustomerAddressMap | null> {
    try {
      return await this.service.updateCustomerAddressMap({
        ...args,
        data: {
          ...args.data,

          addresses: {
            connect: args.data.addresses,
          },

          customers: {
            connect: args.data.customers,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerAddressMap)
  @nestAccessControl.UseRoles({
    resource: "CustomerAddressMap",
    action: "delete",
    possession: "any",
  })
  async deleteCustomerAddressMap(
    @graphql.Args() args: DeleteCustomerAddressMapArgs
  ): Promise<CustomerAddressMap | null> {
    try {
      return await this.service.deleteCustomerAddressMap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Address, {
    nullable: true,
    name: "addresses",
  })
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "read",
    possession: "any",
  })
  async getAddresses(
    @graphql.Parent() parent: CustomerAddressMap
  ): Promise<Address | null> {
    const result = await this.service.getAddresses(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customers",
  })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async getCustomers(
    @graphql.Parent() parent: CustomerAddressMap
  ): Promise<Customer | null> {
    const result = await this.service.getCustomers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
