/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CustomerAddressMap as PrismaCustomerAddressMap,
  Address as PrismaAddress,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class CustomerAddressMapServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerAddressMapCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerAddressMap.count(args);
  }

  async customerAddressMaps<T extends Prisma.CustomerAddressMapFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerAddressMapFindManyArgs>
  ): Promise<PrismaCustomerAddressMap[]> {
    return this.prisma.customerAddressMap.findMany<Prisma.CustomerAddressMapFindManyArgs>(
      args
    );
  }
  async customerAddressMap<T extends Prisma.CustomerAddressMapFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerAddressMapFindUniqueArgs>
  ): Promise<PrismaCustomerAddressMap | null> {
    return this.prisma.customerAddressMap.findUnique(args);
  }
  async createCustomerAddressMap<T extends Prisma.CustomerAddressMapCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerAddressMapCreateArgs>
  ): Promise<PrismaCustomerAddressMap> {
    return this.prisma.customerAddressMap.create<T>(args);
  }
  async updateCustomerAddressMap<T extends Prisma.CustomerAddressMapUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerAddressMapUpdateArgs>
  ): Promise<PrismaCustomerAddressMap> {
    return this.prisma.customerAddressMap.update<T>(args);
  }
  async deleteCustomerAddressMap<T extends Prisma.CustomerAddressMapDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerAddressMapDeleteArgs>
  ): Promise<PrismaCustomerAddressMap> {
    return this.prisma.customerAddressMap.delete(args);
  }

  async getAddresses(parentId: string): Promise<PrismaAddress | null> {
    return this.prisma.customerAddressMap
      .findUnique({
        where: { id: parentId },
      })
      .addresses();
  }

  async getCustomers(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.customerAddressMap
      .findUnique({
        where: { id: parentId },
      })
      .customers();
  }
}
