/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ComboItemWindowMap } from "./ComboItemWindowMap";
import { ComboItemWindowMapCountArgs } from "./ComboItemWindowMapCountArgs";
import { ComboItemWindowMapFindManyArgs } from "./ComboItemWindowMapFindManyArgs";
import { ComboItemWindowMapFindUniqueArgs } from "./ComboItemWindowMapFindUniqueArgs";
import { CreateComboItemWindowMapArgs } from "./CreateComboItemWindowMapArgs";
import { UpdateComboItemWindowMapArgs } from "./UpdateComboItemWindowMapArgs";
import { DeleteComboItemWindowMapArgs } from "./DeleteComboItemWindowMapArgs";
import { ComboGroup } from "../../comboGroup/base/ComboGroup";
import { TimeWindow } from "../../timeWindow/base/TimeWindow";
import { ComboItemWindowMapService } from "../comboItemWindowMap.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ComboItemWindowMap)
export class ComboItemWindowMapResolverBase {
  constructor(
    protected readonly service: ComboItemWindowMapService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ComboItemWindowMap",
    action: "read",
    possession: "any",
  })
  async _comboItemWindowMapsMeta(
    @graphql.Args() args: ComboItemWindowMapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ComboItemWindowMap])
  @nestAccessControl.UseRoles({
    resource: "ComboItemWindowMap",
    action: "read",
    possession: "any",
  })
  async comboItemWindowMaps(
    @graphql.Args() args: ComboItemWindowMapFindManyArgs
  ): Promise<ComboItemWindowMap[]> {
    return this.service.comboItemWindowMaps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ComboItemWindowMap, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ComboItemWindowMap",
    action: "read",
    possession: "own",
  })
  async comboItemWindowMap(
    @graphql.Args() args: ComboItemWindowMapFindUniqueArgs
  ): Promise<ComboItemWindowMap | null> {
    const result = await this.service.comboItemWindowMap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ComboItemWindowMap)
  @nestAccessControl.UseRoles({
    resource: "ComboItemWindowMap",
    action: "create",
    possession: "any",
  })
  async createComboItemWindowMap(
    @graphql.Args() args: CreateComboItemWindowMapArgs
  ): Promise<ComboItemWindowMap> {
    return await this.service.createComboItemWindowMap({
      ...args,
      data: {
        ...args.data,

        comboGroups: {
          connect: args.data.comboGroups,
        },

        timeWindow: {
          connect: args.data.timeWindow,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ComboItemWindowMap)
  @nestAccessControl.UseRoles({
    resource: "ComboItemWindowMap",
    action: "update",
    possession: "any",
  })
  async updateComboItemWindowMap(
    @graphql.Args() args: UpdateComboItemWindowMapArgs
  ): Promise<ComboItemWindowMap | null> {
    try {
      return await this.service.updateComboItemWindowMap({
        ...args,
        data: {
          ...args.data,

          comboGroups: {
            connect: args.data.comboGroups,
          },

          timeWindow: {
            connect: args.data.timeWindow,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ComboItemWindowMap)
  @nestAccessControl.UseRoles({
    resource: "ComboItemWindowMap",
    action: "delete",
    possession: "any",
  })
  async deleteComboItemWindowMap(
    @graphql.Args() args: DeleteComboItemWindowMapArgs
  ): Promise<ComboItemWindowMap | null> {
    try {
      return await this.service.deleteComboItemWindowMap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ComboGroup, {
    nullable: true,
    name: "comboGroups",
  })
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "read",
    possession: "any",
  })
  async getComboGroups(
    @graphql.Parent() parent: ComboItemWindowMap
  ): Promise<ComboGroup | null> {
    const result = await this.service.getComboGroups(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TimeWindow, {
    nullable: true,
    name: "timeWindow",
  })
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "read",
    possession: "any",
  })
  async getTimeWindow(
    @graphql.Parent() parent: ComboItemWindowMap
  ): Promise<TimeWindow | null> {
    const result = await this.service.getTimeWindow(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
