/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountRestaurantLookup } from "../../accountRestaurantLookup/base/AccountRestaurantLookup";

import {
  ValidateNested,
  IsOptional,
  IsNumber,
  IsEnum,
  IsDate,
  IsString,
  IsBoolean,
  IsInt,
} from "class-validator";

import { Type } from "class-transformer";
import { Decimal } from "decimal.js";
import { EnumRestaurantClosureStatus } from "./EnumRestaurantClosureStatus";
import { ComboGroup } from "../../comboGroup/base/ComboGroup";
import { FavouriteRestaurant } from "../../favouriteRestaurant/base/FavouriteRestaurant";
import { MenuCategory } from "../../menuCategory/base/MenuCategory";
import { MerchantInvoice } from "../../merchantInvoice/base/MerchantInvoice";
import { OrderHistory } from "../../orderHistory/base/OrderHistory";
import { OrderPackagingFee } from "../../orderPackagingFee/base/OrderPackagingFee";
import { EnumRestaurantPackagingFeeType } from "./EnumRestaurantPackagingFeeType";
import { PayoutCycle } from "../../payoutCycle/base/PayoutCycle";
import { PayoutInformationTable } from "../../payoutInformationTable/base/PayoutInformationTable";
import { PortalUsersRelationsLookup } from "../../portalUsersRelationsLookup/base/PortalUsersRelationsLookup";
import { Reservation } from "../../reservation/base/Reservation";
import { RestaurantDetail } from "../../restaurantDetail/base/RestaurantDetail";
import { RestaurantPreference } from "../../restaurantPreference/base/RestaurantPreference";
import { RestaurantsHashtagsMap } from "../../restaurantsHashtagsMap/base/RestaurantsHashtagsMap";
import { RestaurantTimeWindowMap } from "../../restaurantTimeWindowMap/base/RestaurantTimeWindowMap";
import { TaxRateInformation } from "../../taxRateInformation/base/TaxRateInformation";

@ObjectType()
class Restaurant {
  @ApiProperty({
    required: false,
    type: () => [AccountRestaurantLookup],
  })
  @ValidateNested()
  @Type(() => AccountRestaurantLookup)
  @IsOptional()
  accountRestaurantLookup?: Array<AccountRestaurantLookup>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  averageCost!: Decimal | null;

  @ApiProperty({
    required: false,
    enum: EnumRestaurantClosureStatus,
  })
  @IsEnum(EnumRestaurantClosureStatus)
  @IsOptional()
  @Field(() => EnumRestaurantClosureStatus, {
    nullable: true,
  })
  closure_status?: "Temporarily_Closed" | "Permanently_Closed" | null;

  @ApiProperty({
    required: false,
    type: () => [ComboGroup],
  })
  @ValidateNested()
  @Type(() => ComboGroup)
  @IsOptional()
  comboGroups?: Array<ComboGroup>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [FavouriteRestaurant],
  })
  @ValidateNested()
  @Type(() => FavouriteRestaurant)
  @IsOptional()
  favouriteRestaurant?: Array<FavouriteRestaurant>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isDelivery!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isDineIn!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isHidden!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isTakeaway!: boolean | null;

  @ApiProperty({
    required: false,
    type: () => [MenuCategory],
  })
  @ValidateNested()
  @Type(() => MenuCategory)
  @IsOptional()
  menuCategories?: Array<MenuCategory>;

  @ApiProperty({
    required: false,
    type: () => [MerchantInvoice],
  })
  @ValidateNested()
  @Type(() => MerchantInvoice)
  @IsOptional()
  merchantInvoices?: Array<MerchantInvoice>;

  @ApiProperty({
    required: false,
    type: () => [OrderHistory],
  })
  @ValidateNested()
  @Type(() => OrderHistory)
  @IsOptional()
  orderHistory?: Array<OrderHistory>;

  @ApiProperty({
    required: false,
    type: () => [OrderPackagingFee],
  })
  @ValidateNested()
  @Type(() => OrderPackagingFee)
  @IsOptional()
  orderPackagingFee?: Array<OrderPackagingFee>;

  @ApiProperty({
    required: false,
    enum: EnumRestaurantPackagingFeeType,
  })
  @IsEnum(EnumRestaurantPackagingFeeType)
  @IsOptional()
  @Field(() => EnumRestaurantPackagingFeeType, {
    nullable: true,
  })
  packaging_fee_type?: "Item" | "Order" | "None" | null;

  @ApiProperty({
    required: false,
    type: () => [PayoutCycle],
  })
  @ValidateNested()
  @Type(() => PayoutCycle)
  @IsOptional()
  payoutCycles?: Array<PayoutCycle>;

  @ApiProperty({
    required: false,
    type: () => [PayoutInformationTable],
  })
  @ValidateNested()
  @Type(() => PayoutInformationTable)
  @IsOptional()
  payoutInformationTable?: Array<PayoutInformationTable>;

  @ApiProperty({
    required: false,
    type: () => [PortalUsersRelationsLookup],
  })
  @ValidateNested()
  @Type(() => PortalUsersRelationsLookup)
  @IsOptional()
  portalUsersRelationsLookup?: Array<PortalUsersRelationsLookup>;

  @ApiProperty({
    required: false,
    type: () => [Reservation],
  })
  @ValidateNested()
  @Type(() => Reservation)
  @IsOptional()
  reservations?: Array<Reservation>;

  @ApiProperty({
    required: false,
    type: () => [RestaurantDetail],
  })
  @ValidateNested()
  @Type(() => RestaurantDetail)
  @IsOptional()
  restaurantDetails?: Array<RestaurantDetail>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  restaurantIconUrl!: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  restaurantIdRef!: number;

  @ApiProperty({
    required: false,
    type: () => [RestaurantPreference],
  })
  @ValidateNested()
  @Type(() => RestaurantPreference)
  @IsOptional()
  restaurantPreferences?: Array<RestaurantPreference>;

  @ApiProperty({
    required: false,
    type: () => [RestaurantsHashtagsMap],
  })
  @ValidateNested()
  @Type(() => RestaurantsHashtagsMap)
  @IsOptional()
  restaurantsHashtagsMap?: Array<RestaurantsHashtagsMap>;

  @ApiProperty({
    required: false,
    type: () => [RestaurantTimeWindowMap],
  })
  @ValidateNested()
  @Type(() => RestaurantTimeWindowMap)
  @IsOptional()
  restaurantTimeWindowMap?: Array<RestaurantTimeWindowMap>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  shareSlug!: string | null;

  @ApiProperty({
    required: false,
    type: () => [TaxRateInformation],
  })
  @ValidateNested()
  @Type(() => TaxRateInformation)
  @IsOptional()
  taxRateInformation?: Array<TaxRateInformation>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt!: Date | null;
}

export { Restaurant as Restaurant };
