/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountRestaurantLookupUpdateManyWithoutRestaurantsInput } from "./AccountRestaurantLookupUpdateManyWithoutRestaurantsInput";

import {
  ValidateNested,
  IsOptional,
  IsNumber,
  IsEnum,
  IsBoolean,
  IsString,
  IsInt,
  IsDate,
} from "class-validator";

import { Type } from "class-transformer";
import { Decimal } from "decimal.js";
import { EnumRestaurantClosureStatus } from "./EnumRestaurantClosureStatus";
import { ComboGroupUpdateManyWithoutRestaurantsInput } from "./ComboGroupUpdateManyWithoutRestaurantsInput";
import { FavouriteRestaurantUpdateManyWithoutRestaurantsInput } from "./FavouriteRestaurantUpdateManyWithoutRestaurantsInput";
import { MenuCategoryUpdateManyWithoutRestaurantsInput } from "./MenuCategoryUpdateManyWithoutRestaurantsInput";
import { MerchantInvoiceUpdateManyWithoutRestaurantsInput } from "./MerchantInvoiceUpdateManyWithoutRestaurantsInput";
import { OrderHistoryUpdateManyWithoutRestaurantsInput } from "./OrderHistoryUpdateManyWithoutRestaurantsInput";
import { OrderPackagingFeeUpdateManyWithoutRestaurantsInput } from "./OrderPackagingFeeUpdateManyWithoutRestaurantsInput";
import { EnumRestaurantPackagingFeeType } from "./EnumRestaurantPackagingFeeType";
import { PayoutCycleUpdateManyWithoutRestaurantsInput } from "./PayoutCycleUpdateManyWithoutRestaurantsInput";
import { PayoutInformationTableUpdateManyWithoutRestaurantsInput } from "./PayoutInformationTableUpdateManyWithoutRestaurantsInput";
import { PortalUsersRelationsLookupUpdateManyWithoutRestaurantsInput } from "./PortalUsersRelationsLookupUpdateManyWithoutRestaurantsInput";
import { ReservationUpdateManyWithoutRestaurantsInput } from "./ReservationUpdateManyWithoutRestaurantsInput";
import { RestaurantDetailUpdateManyWithoutRestaurantsInput } from "./RestaurantDetailUpdateManyWithoutRestaurantsInput";
import { RestaurantPreferenceUpdateManyWithoutRestaurantsInput } from "./RestaurantPreferenceUpdateManyWithoutRestaurantsInput";
import { RestaurantsHashtagsMapUpdateManyWithoutRestaurantsInput } from "./RestaurantsHashtagsMapUpdateManyWithoutRestaurantsInput";
import { RestaurantTimeWindowMapUpdateManyWithoutRestaurantsInput } from "./RestaurantTimeWindowMapUpdateManyWithoutRestaurantsInput";
import { TaxRateInformationUpdateManyWithoutRestaurantsInput } from "./TaxRateInformationUpdateManyWithoutRestaurantsInput";

@InputType()
class RestaurantUpdateInput {
  @ApiProperty({
    required: false,
    type: () => AccountRestaurantLookupUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => AccountRestaurantLookupUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => AccountRestaurantLookupUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  accountRestaurantLookup?: AccountRestaurantLookupUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  averageCost?: Decimal | null;

  @ApiProperty({
    required: false,
    enum: EnumRestaurantClosureStatus,
  })
  @IsEnum(EnumRestaurantClosureStatus)
  @IsOptional()
  @Field(() => EnumRestaurantClosureStatus, {
    nullable: true,
  })
  closure_status?: "Temporarily_Closed" | "Permanently_Closed" | null;

  @ApiProperty({
    required: false,
    type: () => ComboGroupUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => ComboGroupUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => ComboGroupUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  comboGroups?: ComboGroupUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => FavouriteRestaurantUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => FavouriteRestaurantUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => FavouriteRestaurantUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  favouriteRestaurant?: FavouriteRestaurantUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isDelivery?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isDineIn?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isHidden?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isTakeaway?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => MenuCategoryUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => MenuCategoryUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => MenuCategoryUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  menuCategories?: MenuCategoryUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => MerchantInvoiceUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => MerchantInvoiceUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => MerchantInvoiceUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  merchantInvoices?: MerchantInvoiceUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => OrderHistoryUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => OrderHistoryUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => OrderHistoryUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  orderHistory?: OrderHistoryUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => OrderPackagingFeeUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => OrderPackagingFeeUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => OrderPackagingFeeUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  orderPackagingFee?: OrderPackagingFeeUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    enum: EnumRestaurantPackagingFeeType,
  })
  @IsEnum(EnumRestaurantPackagingFeeType)
  @IsOptional()
  @Field(() => EnumRestaurantPackagingFeeType, {
    nullable: true,
  })
  packaging_fee_type?: "Item" | "Order" | "None" | null;

  @ApiProperty({
    required: false,
    type: () => PayoutCycleUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => PayoutCycleUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => PayoutCycleUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  payoutCycles?: PayoutCycleUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => PayoutInformationTableUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => PayoutInformationTableUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => PayoutInformationTableUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  payoutInformationTable?: PayoutInformationTableUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => PortalUsersRelationsLookupUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => PortalUsersRelationsLookupUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => PortalUsersRelationsLookupUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  portalUsersRelationsLookup?: PortalUsersRelationsLookupUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => ReservationUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => ReservationUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => ReservationUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  reservations?: ReservationUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => RestaurantDetailUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => RestaurantDetailUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => RestaurantDetailUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  restaurantDetails?: RestaurantDetailUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  restaurantIconUrl?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  restaurantIdRef?: number;

  @ApiProperty({
    required: false,
    type: () => RestaurantPreferenceUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => RestaurantPreferenceUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => RestaurantPreferenceUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  restaurantPreferences?: RestaurantPreferenceUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => RestaurantsHashtagsMapUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => RestaurantsHashtagsMapUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => RestaurantsHashtagsMapUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  restaurantsHashtagsMap?: RestaurantsHashtagsMapUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => RestaurantTimeWindowMapUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => RestaurantTimeWindowMapUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => RestaurantTimeWindowMapUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  restaurantTimeWindowMap?: RestaurantTimeWindowMapUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  shareSlug?: string | null;

  @ApiProperty({
    required: false,
    type: () => TaxRateInformationUpdateManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => TaxRateInformationUpdateManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => TaxRateInformationUpdateManyWithoutRestaurantsInput, {
    nullable: true,
  })
  taxRateInformation?: TaxRateInformationUpdateManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt?: Date | null;
}

export { RestaurantUpdateInput as RestaurantUpdateInput };
