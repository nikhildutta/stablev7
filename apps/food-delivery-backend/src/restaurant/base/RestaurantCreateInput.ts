/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountRestaurantLookupCreateNestedManyWithoutRestaurantsInput } from "./AccountRestaurantLookupCreateNestedManyWithoutRestaurantsInput";

import {
  ValidateNested,
  IsOptional,
  IsNumber,
  IsEnum,
  IsBoolean,
  IsString,
  IsInt,
  IsDate,
} from "class-validator";

import { Type } from "class-transformer";
import { Decimal } from "decimal.js";
import { EnumRestaurantClosureStatus } from "./EnumRestaurantClosureStatus";
import { ComboGroupCreateNestedManyWithoutRestaurantsInput } from "./ComboGroupCreateNestedManyWithoutRestaurantsInput";
import { FavouriteRestaurantCreateNestedManyWithoutRestaurantsInput } from "./FavouriteRestaurantCreateNestedManyWithoutRestaurantsInput";
import { MenuCategoryCreateNestedManyWithoutRestaurantsInput } from "./MenuCategoryCreateNestedManyWithoutRestaurantsInput";
import { MerchantInvoiceCreateNestedManyWithoutRestaurantsInput } from "./MerchantInvoiceCreateNestedManyWithoutRestaurantsInput";
import { OrderHistoryCreateNestedManyWithoutRestaurantsInput } from "./OrderHistoryCreateNestedManyWithoutRestaurantsInput";
import { OrderPackagingFeeCreateNestedManyWithoutRestaurantsInput } from "./OrderPackagingFeeCreateNestedManyWithoutRestaurantsInput";
import { EnumRestaurantPackagingFeeType } from "./EnumRestaurantPackagingFeeType";
import { PayoutCycleCreateNestedManyWithoutRestaurantsInput } from "./PayoutCycleCreateNestedManyWithoutRestaurantsInput";
import { PayoutInformationTableCreateNestedManyWithoutRestaurantsInput } from "./PayoutInformationTableCreateNestedManyWithoutRestaurantsInput";
import { PortalUsersRelationsLookupCreateNestedManyWithoutRestaurantsInput } from "./PortalUsersRelationsLookupCreateNestedManyWithoutRestaurantsInput";
import { ReservationCreateNestedManyWithoutRestaurantsInput } from "./ReservationCreateNestedManyWithoutRestaurantsInput";
import { RestaurantDetailCreateNestedManyWithoutRestaurantsInput } from "./RestaurantDetailCreateNestedManyWithoutRestaurantsInput";
import { RestaurantPreferenceCreateNestedManyWithoutRestaurantsInput } from "./RestaurantPreferenceCreateNestedManyWithoutRestaurantsInput";
import { RestaurantsHashtagsMapCreateNestedManyWithoutRestaurantsInput } from "./RestaurantsHashtagsMapCreateNestedManyWithoutRestaurantsInput";
import { RestaurantTimeWindowMapCreateNestedManyWithoutRestaurantsInput } from "./RestaurantTimeWindowMapCreateNestedManyWithoutRestaurantsInput";
import { TaxRateInformationCreateNestedManyWithoutRestaurantsInput } from "./TaxRateInformationCreateNestedManyWithoutRestaurantsInput";

@InputType()
class RestaurantCreateInput {
  @ApiProperty({
    required: false,
    type: () => AccountRestaurantLookupCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => AccountRestaurantLookupCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => AccountRestaurantLookupCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  accountRestaurantLookup?: AccountRestaurantLookupCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  averageCost?: Decimal | null;

  @ApiProperty({
    required: false,
    enum: EnumRestaurantClosureStatus,
  })
  @IsEnum(EnumRestaurantClosureStatus)
  @IsOptional()
  @Field(() => EnumRestaurantClosureStatus, {
    nullable: true,
  })
  closure_status?: "Temporarily_Closed" | "Permanently_Closed" | null;

  @ApiProperty({
    required: false,
    type: () => ComboGroupCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => ComboGroupCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => ComboGroupCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  comboGroups?: ComboGroupCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => FavouriteRestaurantCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => FavouriteRestaurantCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => FavouriteRestaurantCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  favouriteRestaurant?: FavouriteRestaurantCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isDelivery?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isDineIn?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isHidden?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isTakeaway?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => MenuCategoryCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => MenuCategoryCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => MenuCategoryCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  menuCategories?: MenuCategoryCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => MerchantInvoiceCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => MerchantInvoiceCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => MerchantInvoiceCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  merchantInvoices?: MerchantInvoiceCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => OrderHistoryCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => OrderHistoryCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => OrderHistoryCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  orderHistory?: OrderHistoryCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => OrderPackagingFeeCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => OrderPackagingFeeCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => OrderPackagingFeeCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  orderPackagingFee?: OrderPackagingFeeCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    enum: EnumRestaurantPackagingFeeType,
  })
  @IsEnum(EnumRestaurantPackagingFeeType)
  @IsOptional()
  @Field(() => EnumRestaurantPackagingFeeType, {
    nullable: true,
  })
  packaging_fee_type?: "Item" | "Order" | "None" | null;

  @ApiProperty({
    required: false,
    type: () => PayoutCycleCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => PayoutCycleCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => PayoutCycleCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  payoutCycles?: PayoutCycleCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => PayoutInformationTableCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => PayoutInformationTableCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => PayoutInformationTableCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  payoutInformationTable?: PayoutInformationTableCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () =>
      PortalUsersRelationsLookupCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => PortalUsersRelationsLookupCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(
    () => PortalUsersRelationsLookupCreateNestedManyWithoutRestaurantsInput,
    {
      nullable: true,
    }
  )
  portalUsersRelationsLookup?: PortalUsersRelationsLookupCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => ReservationCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => ReservationCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => ReservationCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  reservations?: ReservationCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => RestaurantDetailCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => RestaurantDetailCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => RestaurantDetailCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  restaurantDetails?: RestaurantDetailCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  restaurantIconUrl?: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  restaurantIdRef!: number;

  @ApiProperty({
    required: false,
    type: () => RestaurantPreferenceCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => RestaurantPreferenceCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => RestaurantPreferenceCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  restaurantPreferences?: RestaurantPreferenceCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => RestaurantsHashtagsMapCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => RestaurantsHashtagsMapCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => RestaurantsHashtagsMapCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  restaurantsHashtagsMap?: RestaurantsHashtagsMapCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: () => RestaurantTimeWindowMapCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => RestaurantTimeWindowMapCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => RestaurantTimeWindowMapCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  restaurantTimeWindowMap?: RestaurantTimeWindowMapCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  shareSlug?: string | null;

  @ApiProperty({
    required: false,
    type: () => TaxRateInformationCreateNestedManyWithoutRestaurantsInput,
  })
  @ValidateNested()
  @Type(() => TaxRateInformationCreateNestedManyWithoutRestaurantsInput)
  @IsOptional()
  @Field(() => TaxRateInformationCreateNestedManyWithoutRestaurantsInput, {
    nullable: true,
  })
  taxRateInformation?: TaxRateInformationCreateNestedManyWithoutRestaurantsInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt?: Date | null;
}

export { RestaurantCreateInput as RestaurantCreateInput };
