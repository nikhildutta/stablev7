/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RestaurantService } from "../restaurant.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RestaurantCreateInput } from "./RestaurantCreateInput";
import { Restaurant } from "./Restaurant";
import { RestaurantFindManyArgs } from "./RestaurantFindManyArgs";
import { RestaurantWhereUniqueInput } from "./RestaurantWhereUniqueInput";
import { RestaurantUpdateInput } from "./RestaurantUpdateInput";
import { AccountRestaurantLookupFindManyArgs } from "../../accountRestaurantLookup/base/AccountRestaurantLookupFindManyArgs";
import { AccountRestaurantLookup } from "../../accountRestaurantLookup/base/AccountRestaurantLookup";
import { AccountRestaurantLookupWhereUniqueInput } from "../../accountRestaurantLookup/base/AccountRestaurantLookupWhereUniqueInput";
import { ComboGroupFindManyArgs } from "../../comboGroup/base/ComboGroupFindManyArgs";
import { ComboGroup } from "../../comboGroup/base/ComboGroup";
import { ComboGroupWhereUniqueInput } from "../../comboGroup/base/ComboGroupWhereUniqueInput";
import { FavouriteRestaurantFindManyArgs } from "../../favouriteRestaurant/base/FavouriteRestaurantFindManyArgs";
import { FavouriteRestaurant } from "../../favouriteRestaurant/base/FavouriteRestaurant";
import { FavouriteRestaurantWhereUniqueInput } from "../../favouriteRestaurant/base/FavouriteRestaurantWhereUniqueInput";
import { MenuCategoryFindManyArgs } from "../../menuCategory/base/MenuCategoryFindManyArgs";
import { MenuCategory } from "../../menuCategory/base/MenuCategory";
import { MenuCategoryWhereUniqueInput } from "../../menuCategory/base/MenuCategoryWhereUniqueInput";
import { MerchantInvoiceFindManyArgs } from "../../merchantInvoice/base/MerchantInvoiceFindManyArgs";
import { MerchantInvoice } from "../../merchantInvoice/base/MerchantInvoice";
import { MerchantInvoiceWhereUniqueInput } from "../../merchantInvoice/base/MerchantInvoiceWhereUniqueInput";
import { OrderHistoryFindManyArgs } from "../../orderHistory/base/OrderHistoryFindManyArgs";
import { OrderHistory } from "../../orderHistory/base/OrderHistory";
import { OrderHistoryWhereUniqueInput } from "../../orderHistory/base/OrderHistoryWhereUniqueInput";
import { OrderPackagingFeeFindManyArgs } from "../../orderPackagingFee/base/OrderPackagingFeeFindManyArgs";
import { OrderPackagingFee } from "../../orderPackagingFee/base/OrderPackagingFee";
import { OrderPackagingFeeWhereUniqueInput } from "../../orderPackagingFee/base/OrderPackagingFeeWhereUniqueInput";
import { PayoutCycleFindManyArgs } from "../../payoutCycle/base/PayoutCycleFindManyArgs";
import { PayoutCycle } from "../../payoutCycle/base/PayoutCycle";
import { PayoutCycleWhereUniqueInput } from "../../payoutCycle/base/PayoutCycleWhereUniqueInput";
import { PayoutInformationTableFindManyArgs } from "../../payoutInformationTable/base/PayoutInformationTableFindManyArgs";
import { PayoutInformationTable } from "../../payoutInformationTable/base/PayoutInformationTable";
import { PayoutInformationTableWhereUniqueInput } from "../../payoutInformationTable/base/PayoutInformationTableWhereUniqueInput";
import { PortalUsersRelationsLookupFindManyArgs } from "../../portalUsersRelationsLookup/base/PortalUsersRelationsLookupFindManyArgs";
import { PortalUsersRelationsLookup } from "../../portalUsersRelationsLookup/base/PortalUsersRelationsLookup";
import { PortalUsersRelationsLookupWhereUniqueInput } from "../../portalUsersRelationsLookup/base/PortalUsersRelationsLookupWhereUniqueInput";
import { ReservationFindManyArgs } from "../../reservation/base/ReservationFindManyArgs";
import { Reservation } from "../../reservation/base/Reservation";
import { ReservationWhereUniqueInput } from "../../reservation/base/ReservationWhereUniqueInput";
import { RestaurantDetailFindManyArgs } from "../../restaurantDetail/base/RestaurantDetailFindManyArgs";
import { RestaurantDetail } from "../../restaurantDetail/base/RestaurantDetail";
import { RestaurantDetailWhereUniqueInput } from "../../restaurantDetail/base/RestaurantDetailWhereUniqueInput";
import { RestaurantPreferenceFindManyArgs } from "../../restaurantPreference/base/RestaurantPreferenceFindManyArgs";
import { RestaurantPreference } from "../../restaurantPreference/base/RestaurantPreference";
import { RestaurantPreferenceWhereUniqueInput } from "../../restaurantPreference/base/RestaurantPreferenceWhereUniqueInput";
import { RestaurantsHashtagsMapFindManyArgs } from "../../restaurantsHashtagsMap/base/RestaurantsHashtagsMapFindManyArgs";
import { RestaurantsHashtagsMap } from "../../restaurantsHashtagsMap/base/RestaurantsHashtagsMap";
import { RestaurantsHashtagsMapWhereUniqueInput } from "../../restaurantsHashtagsMap/base/RestaurantsHashtagsMapWhereUniqueInput";
import { RestaurantTimeWindowMapFindManyArgs } from "../../restaurantTimeWindowMap/base/RestaurantTimeWindowMapFindManyArgs";
import { RestaurantTimeWindowMap } from "../../restaurantTimeWindowMap/base/RestaurantTimeWindowMap";
import { RestaurantTimeWindowMapWhereUniqueInput } from "../../restaurantTimeWindowMap/base/RestaurantTimeWindowMapWhereUniqueInput";
import { TaxRateInformationFindManyArgs } from "../../taxRateInformation/base/TaxRateInformationFindManyArgs";
import { TaxRateInformation } from "../../taxRateInformation/base/TaxRateInformation";
import { TaxRateInformationWhereUniqueInput } from "../../taxRateInformation/base/TaxRateInformationWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RestaurantControllerBase {
  constructor(
    protected readonly service: RestaurantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Restaurant })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRestaurant(
    @common.Body() data: RestaurantCreateInput
  ): Promise<Restaurant> {
    return await this.service.createRestaurant({
      data: data,
      select: {
        averageCost: true,
        closure_status: true,
        createdAt: true,
        id: true,
        isActive: true,
        isDelivery: true,
        isDineIn: true,
        isHidden: true,
        isTakeaway: true,
        packaging_fee_type: true,
        restaurantIconUrl: true,
        restaurantIdRef: true,
        shareSlug: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Restaurant] })
  @ApiNestedQuery(RestaurantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async restaurants(@common.Req() request: Request): Promise<Restaurant[]> {
    const args = plainToClass(RestaurantFindManyArgs, request.query);
    return this.service.restaurants({
      ...args,
      select: {
        averageCost: true,
        closure_status: true,
        createdAt: true,
        id: true,
        isActive: true,
        isDelivery: true,
        isDineIn: true,
        isHidden: true,
        isTakeaway: true,
        packaging_fee_type: true,
        restaurantIconUrl: true,
        restaurantIdRef: true,
        shareSlug: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Restaurant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async restaurant(
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Restaurant | null> {
    const result = await this.service.restaurant({
      where: params,
      select: {
        averageCost: true,
        closure_status: true,
        createdAt: true,
        id: true,
        isActive: true,
        isDelivery: true,
        isDineIn: true,
        isHidden: true,
        isTakeaway: true,
        packaging_fee_type: true,
        restaurantIconUrl: true,
        restaurantIdRef: true,
        shareSlug: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Restaurant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRestaurant(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() data: RestaurantUpdateInput
  ): Promise<Restaurant | null> {
    try {
      return await this.service.updateRestaurant({
        where: params,
        data: data,
        select: {
          averageCost: true,
          closure_status: true,
          createdAt: true,
          id: true,
          isActive: true,
          isDelivery: true,
          isDineIn: true,
          isHidden: true,
          isTakeaway: true,
          packaging_fee_type: true,
          restaurantIconUrl: true,
          restaurantIdRef: true,
          shareSlug: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Restaurant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRestaurant(
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Restaurant | null> {
    try {
      return await this.service.deleteRestaurant({
        where: params,
        select: {
          averageCost: true,
          closure_status: true,
          createdAt: true,
          id: true,
          isActive: true,
          isDelivery: true,
          isDineIn: true,
          isHidden: true,
          isTakeaway: true,
          packaging_fee_type: true,
          restaurantIconUrl: true,
          restaurantIdRef: true,
          shareSlug: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/accountRestaurantLookup")
  @ApiNestedQuery(AccountRestaurantLookupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AccountRestaurantLookup",
    action: "read",
    possession: "any",
  })
  async findAccountRestaurantLookup(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<AccountRestaurantLookup[]> {
    const query = plainToClass(
      AccountRestaurantLookupFindManyArgs,
      request.query
    );
    const results = await this.service.findAccountRestaurantLookup(params.id, {
      ...query,
      select: {
        accounts: {
          select: {
            id: true,
          },
        },

        id: true,

        restaurants: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accountRestaurantLookup")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectAccountRestaurantLookup(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: AccountRestaurantLookupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountRestaurantLookup: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accountRestaurantLookup")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateAccountRestaurantLookup(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: AccountRestaurantLookupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountRestaurantLookup: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accountRestaurantLookup")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectAccountRestaurantLookup(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: AccountRestaurantLookupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountRestaurantLookup: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/comboGroups")
  @ApiNestedQuery(ComboGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "read",
    possession: "any",
  })
  async findComboGroups(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<ComboGroup[]> {
    const query = plainToClass(ComboGroupFindManyArgs, request.query);
    const results = await this.service.findComboGroups(params.id, {
      ...query,
      select: {
        comboBasePrice: true,
        comboDescription: true,
        comboName: true,
        combo_type: true,
        createdAt: true,
        id: true,
        isBankCoupon: true,
        isPlatformCoupon: true,
        isRestuaruantCoupon: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/comboGroups")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectComboGroups(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ComboGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboGroups: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/comboGroups")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateComboGroups(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ComboGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboGroups: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/comboGroups")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectComboGroups(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ComboGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboGroups: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/favouriteRestaurant")
  @ApiNestedQuery(FavouriteRestaurantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FavouriteRestaurant",
    action: "read",
    possession: "any",
  })
  async findFavouriteRestaurant(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<FavouriteRestaurant[]> {
    const query = plainToClass(FavouriteRestaurantFindManyArgs, request.query);
    const results = await this.service.findFavouriteRestaurant(params.id, {
      ...query,
      select: {
        createdAt: true,

        favourites: {
          select: {
            id: true,
          },
        },

        id: true,

        restaurants: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/favouriteRestaurant")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectFavouriteRestaurant(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: FavouriteRestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favouriteRestaurant: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/favouriteRestaurant")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateFavouriteRestaurant(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: FavouriteRestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favouriteRestaurant: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/favouriteRestaurant")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectFavouriteRestaurant(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: FavouriteRestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      favouriteRestaurant: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/menuCategories")
  @ApiNestedQuery(MenuCategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuCategory",
    action: "read",
    possession: "any",
  })
  async findMenuCategories(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<MenuCategory[]> {
    const query = plainToClass(MenuCategoryFindManyArgs, request.query);
    const results = await this.service.findMenuCategories(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/menuCategories")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectMenuCategories(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: MenuCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuCategories: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/menuCategories")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateMenuCategories(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: MenuCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuCategories: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/menuCategories")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectMenuCategories(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: MenuCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuCategories: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/merchantInvoices")
  @ApiNestedQuery(MerchantInvoiceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MerchantInvoice",
    action: "read",
    possession: "any",
  })
  async findMerchantInvoices(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<MerchantInvoice[]> {
    const query = plainToClass(MerchantInvoiceFindManyArgs, request.query);
    const results = await this.service.findMerchantInvoices(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        invoiceGenerationDate: true,
        invoiceSentDate: true,
        invoice_status: true,
        invoice_type: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/merchantInvoices")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectMerchantInvoices(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: MerchantInvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      merchantInvoices: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/merchantInvoices")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateMerchantInvoices(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: MerchantInvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      merchantInvoices: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/merchantInvoices")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectMerchantInvoices(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: MerchantInvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      merchantInvoices: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orderHistory")
  @ApiNestedQuery(OrderHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "any",
  })
  async findOrderHistory(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<OrderHistory[]> {
    const query = plainToClass(OrderHistoryFindManyArgs, request.query);
    const results = await this.service.findOrderHistory(params.id, {
      ...query,
      select: {
        addresses: {
          select: {
            id: true,
          },
        },

        appUsers: {
          select: {
            id: true,
          },
        },

        coupons: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deliveryTipsAmount: true,
        discountAmount: true,
        estimatedDeliveryTime: true,
        finalAmount: true,
        id: true,
        isCancelled: true,
        isFulfilled: true,
        isPaid: true,
        isRejected: true,
        orderDateTime: true,
        orderIdRef: true,
        order_type: true,
        packagingAmount: true,

        paymentMethods: {
          select: {
            id: true,
          },
        },

        preparationInstruction: true,
        preparationTime: true,
        rejectedBy: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        totalAmount: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderHistory")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectOrderHistory(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: OrderHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderHistory: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderHistory")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateOrderHistory(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: OrderHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderHistory: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderHistory")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectOrderHistory(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: OrderHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderHistory: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orderPackagingFee")
  @ApiNestedQuery(OrderPackagingFeeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrderPackagingFee",
    action: "read",
    possession: "any",
  })
  async findOrderPackagingFee(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<OrderPackagingFee[]> {
    const query = plainToClass(OrderPackagingFeeFindManyArgs, request.query);
    const results = await this.service.findOrderPackagingFee(params.id, {
      ...query,
      select: {
        id: true,
        packingFee: true,

        restaurants: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderPackagingFee")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectOrderPackagingFee(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: OrderPackagingFeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderPackagingFee: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderPackagingFee")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateOrderPackagingFee(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: OrderPackagingFeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderPackagingFee: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderPackagingFee")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectOrderPackagingFee(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: OrderPackagingFeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderPackagingFee: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/payoutCycles")
  @ApiNestedQuery(PayoutCycleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PayoutCycle",
    action: "read",
    possession: "any",
  })
  async findPayoutCycles(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<PayoutCycle[]> {
    const query = plainToClass(PayoutCycleFindManyArgs, request.query);
    const results = await this.service.findPayoutCycles(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        netPayout: true,
        numberOfOrders: true,
        payout_status: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        timePeriodEnd: true,
        timePeriodStart: true,
        updatedAt: true,
        utrNumber: true,
        weekNumber: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payoutCycles")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectPayoutCycles(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: PayoutCycleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payoutCycles: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payoutCycles")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updatePayoutCycles(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: PayoutCycleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payoutCycles: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payoutCycles")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectPayoutCycles(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: PayoutCycleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payoutCycles: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/payoutInformationTable")
  @ApiNestedQuery(PayoutInformationTableFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PayoutInformationTable",
    action: "read",
    possession: "any",
  })
  async findPayoutInformationTable(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<PayoutInformationTable[]> {
    const query = plainToClass(
      PayoutInformationTableFindManyArgs,
      request.query
    );
    const results = await this.service.findPayoutInformationTable(params.id, {
      ...query,
      select: {
        bankAccountNumber: true,
        bankIfscCode: true,
        createdAt: true,
        firstPayoutDate: true,
        id: true,
        isBankAccountVerified: true,
        panNumber: true,
        payoutCycleLength: true,
        payoutDateOffset: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        tanNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payoutInformationTable")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectPayoutInformationTable(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: PayoutInformationTableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payoutInformationTable: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payoutInformationTable")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updatePayoutInformationTable(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: PayoutInformationTableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payoutInformationTable: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payoutInformationTable")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectPayoutInformationTable(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: PayoutInformationTableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payoutInformationTable: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/portalUsersRelationsLookup")
  @ApiNestedQuery(PortalUsersRelationsLookupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PortalUsersRelationsLookup",
    action: "read",
    possession: "any",
  })
  async findPortalUsersRelationsLookup(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<PortalUsersRelationsLookup[]> {
    const query = plainToClass(
      PortalUsersRelationsLookupFindManyArgs,
      request.query
    );
    const results = await this.service.findPortalUsersRelationsLookup(
      params.id,
      {
        ...query,
        select: {
          id: true,

          portalUsers: {
            select: {
              id: true,
            },
          },

          restaurants: {
            select: {
              id: true,
            },
          },

          user_role: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/portalUsersRelationsLookup")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectPortalUsersRelationsLookup(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: PortalUsersRelationsLookupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      portalUsersRelationsLookup: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/portalUsersRelationsLookup")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updatePortalUsersRelationsLookup(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: PortalUsersRelationsLookupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      portalUsersRelationsLookup: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/portalUsersRelationsLookup")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectPortalUsersRelationsLookup(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: PortalUsersRelationsLookupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      portalUsersRelationsLookup: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/reservations")
  @ApiNestedQuery(ReservationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Reservation",
    action: "read",
    possession: "any",
  })
  async findReservations(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Reservation[]> {
    const query = plainToClass(ReservationFindManyArgs, request.query);
    const results = await this.service.findReservations(params.id, {
      ...query,
      select: {
        appUsers: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        partySize: true,
        reservationDate: true,
        reservationTime: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reservations")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectReservations(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservations: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reservations")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateReservations(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservations: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reservations")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectReservations(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: ReservationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reservations: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/restaurantDetails")
  @ApiNestedQuery(RestaurantDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RestaurantDetail",
    action: "read",
    possession: "any",
  })
  async findRestaurantDetails(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<RestaurantDetail[]> {
    const query = plainToClass(RestaurantDetailFindManyArgs, request.query);
    const results = await this.service.findRestaurantDetails(params.id, {
      ...query,
      select: {
        createdAt: true,
        deliveryCharge: true,
        deliveryTime: true,
        description: true,
        id: true,
        imageUrl: true,
        minOrderValue: true,
        rating: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        reviewCount: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/restaurantDetails")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectRestaurantDetails(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantDetails: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/restaurantDetails")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateRestaurantDetails(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantDetails: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/restaurantDetails")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectRestaurantDetails(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantDetails: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/restaurantPreferences")
  @ApiNestedQuery(RestaurantPreferenceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RestaurantPreference",
    action: "read",
    possession: "any",
  })
  async findRestaurantPreferences(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<RestaurantPreference[]> {
    const query = plainToClass(RestaurantPreferenceFindManyArgs, request.query);
    const results = await this.service.findRestaurantPreferences(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        preferenceType: true,
        preferenceValue: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/restaurantPreferences")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectRestaurantPreferences(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantPreferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantPreferences: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/restaurantPreferences")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateRestaurantPreferences(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantPreferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantPreferences: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/restaurantPreferences")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectRestaurantPreferences(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantPreferenceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantPreferences: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/restaurantsHashtagsMap")
  @ApiNestedQuery(RestaurantsHashtagsMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RestaurantsHashtagsMap",
    action: "read",
    possession: "any",
  })
  async findRestaurantsHashtagsMap(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<RestaurantsHashtagsMap[]> {
    const query = plainToClass(
      RestaurantsHashtagsMapFindManyArgs,
      request.query
    );
    const results = await this.service.findRestaurantsHashtagsMap(params.id, {
      ...query,
      select: {
        hashtags: {
          select: {
            id: true,
          },
        },

        id: true,

        restaurants: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/restaurantsHashtagsMap")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectRestaurantsHashtagsMap(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantsHashtagsMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantsHashtagsMap: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/restaurantsHashtagsMap")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateRestaurantsHashtagsMap(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantsHashtagsMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantsHashtagsMap: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/restaurantsHashtagsMap")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectRestaurantsHashtagsMap(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantsHashtagsMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantsHashtagsMap: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/restaurantTimeWindowMap")
  @ApiNestedQuery(RestaurantTimeWindowMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RestaurantTimeWindowMap",
    action: "read",
    possession: "any",
  })
  async findRestaurantTimeWindowMap(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<RestaurantTimeWindowMap[]> {
    const query = plainToClass(
      RestaurantTimeWindowMapFindManyArgs,
      request.query
    );
    const results = await this.service.findRestaurantTimeWindowMap(params.id, {
      ...query,
      select: {
        createdAt: true,
        day_of_the_week: true,
        id: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        timeWindow: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/restaurantTimeWindowMap")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectRestaurantTimeWindowMap(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantTimeWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantTimeWindowMap: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/restaurantTimeWindowMap")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateRestaurantTimeWindowMap(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantTimeWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantTimeWindowMap: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/restaurantTimeWindowMap")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectRestaurantTimeWindowMap(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantTimeWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantTimeWindowMap: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/taxRateInformation")
  @ApiNestedQuery(TaxRateInformationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TaxRateInformation",
    action: "read",
    possession: "any",
  })
  async findTaxRateInformation(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<TaxRateInformation[]> {
    const query = plainToClass(TaxRateInformationFindManyArgs, request.query);
    const results = await this.service.findTaxRateInformation(params.id, {
      ...query,
      select: {
        cgstRate: true,
        createdAt: true,
        id: true,
        netTaxTransferrable: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        sgstRate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taxRateInformation")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectTaxRateInformation(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: TaxRateInformationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taxRateInformation: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taxRateInformation")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateTaxRateInformation(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: TaxRateInformationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taxRateInformation: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taxRateInformation")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectTaxRateInformation(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: TaxRateInformationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taxRateInformation: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }
}
