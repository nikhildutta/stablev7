/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MenuItemsWindowMap as PrismaMenuItemsWindowMap,
  MenuItem as PrismaMenuItem,
  TimeWindow as PrismaTimeWindow,
} from "@prisma/client";

export class MenuItemsWindowMapServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MenuItemsWindowMapCountArgs, "select">
  ): Promise<number> {
    return this.prisma.menuItemsWindowMap.count(args);
  }

  async menuItemsWindowMaps<T extends Prisma.MenuItemsWindowMapFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemsWindowMapFindManyArgs>
  ): Promise<PrismaMenuItemsWindowMap[]> {
    return this.prisma.menuItemsWindowMap.findMany<Prisma.MenuItemsWindowMapFindManyArgs>(
      args
    );
  }
  async menuItemsWindowMap<T extends Prisma.MenuItemsWindowMapFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemsWindowMapFindUniqueArgs>
  ): Promise<PrismaMenuItemsWindowMap | null> {
    return this.prisma.menuItemsWindowMap.findUnique(args);
  }
  async createMenuItemsWindowMap<T extends Prisma.MenuItemsWindowMapCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemsWindowMapCreateArgs>
  ): Promise<PrismaMenuItemsWindowMap> {
    return this.prisma.menuItemsWindowMap.create<T>(args);
  }
  async updateMenuItemsWindowMap<T extends Prisma.MenuItemsWindowMapUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemsWindowMapUpdateArgs>
  ): Promise<PrismaMenuItemsWindowMap> {
    return this.prisma.menuItemsWindowMap.update<T>(args);
  }
  async deleteMenuItemsWindowMap<T extends Prisma.MenuItemsWindowMapDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemsWindowMapDeleteArgs>
  ): Promise<PrismaMenuItemsWindowMap> {
    return this.prisma.menuItemsWindowMap.delete(args);
  }

  async getMenuItems(parentId: string): Promise<PrismaMenuItem | null> {
    return this.prisma.menuItemsWindowMap
      .findUnique({
        where: { id: parentId },
      })
      .menuItems();
  }

  async getTimeWindow(parentId: string): Promise<PrismaTimeWindow | null> {
    return this.prisma.menuItemsWindowMap
      .findUnique({
        where: { id: parentId },
      })
      .timeWindow();
  }
}
