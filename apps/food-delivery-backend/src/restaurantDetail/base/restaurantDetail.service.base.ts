/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RestaurantDetail as PrismaRestaurantDetail,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class RestaurantDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RestaurantDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.restaurantDetail.count(args);
  }

  async restaurantDetails<T extends Prisma.RestaurantDetailFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantDetailFindManyArgs>
  ): Promise<PrismaRestaurantDetail[]> {
    return this.prisma.restaurantDetail.findMany<Prisma.RestaurantDetailFindManyArgs>(
      args
    );
  }
  async restaurantDetail<T extends Prisma.RestaurantDetailFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantDetailFindUniqueArgs>
  ): Promise<PrismaRestaurantDetail | null> {
    return this.prisma.restaurantDetail.findUnique(args);
  }
  async createRestaurantDetail<T extends Prisma.RestaurantDetailCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantDetailCreateArgs>
  ): Promise<PrismaRestaurantDetail> {
    return this.prisma.restaurantDetail.create<T>(args);
  }
  async updateRestaurantDetail<T extends Prisma.RestaurantDetailUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantDetailUpdateArgs>
  ): Promise<PrismaRestaurantDetail> {
    return this.prisma.restaurantDetail.update<T>(args);
  }
  async deleteRestaurantDetail<T extends Prisma.RestaurantDetailDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantDetailDeleteArgs>
  ): Promise<PrismaRestaurantDetail> {
    return this.prisma.restaurantDetail.delete(args);
  }

  async getRestaurants(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.restaurantDetail
      .findUnique({
        where: { id: parentId },
      })
      .restaurants();
  }
}
