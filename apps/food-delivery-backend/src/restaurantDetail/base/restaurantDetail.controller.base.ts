/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RestaurantDetailService } from "../restaurantDetail.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RestaurantDetailCreateInput } from "./RestaurantDetailCreateInput";
import { RestaurantDetail } from "./RestaurantDetail";
import { RestaurantDetailFindManyArgs } from "./RestaurantDetailFindManyArgs";
import { RestaurantDetailWhereUniqueInput } from "./RestaurantDetailWhereUniqueInput";
import { RestaurantDetailUpdateInput } from "./RestaurantDetailUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RestaurantDetailControllerBase {
  constructor(
    protected readonly service: RestaurantDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RestaurantDetail })
  @nestAccessControl.UseRoles({
    resource: "RestaurantDetail",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRestaurantDetail(
    @common.Body() data: RestaurantDetailCreateInput
  ): Promise<RestaurantDetail> {
    return await this.service.createRestaurantDetail({
      data: {
        ...data,

        restaurants: {
          connect: data.restaurants,
        },
      },
      select: {
        createdAt: true,
        deliveryCharge: true,
        deliveryTime: true,
        description: true,
        id: true,
        imageUrl: true,
        minOrderValue: true,
        rating: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        reviewCount: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [RestaurantDetail] })
  @ApiNestedQuery(RestaurantDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RestaurantDetail",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async restaurantDetails(
    @common.Req() request: Request
  ): Promise<RestaurantDetail[]> {
    const args = plainToClass(RestaurantDetailFindManyArgs, request.query);
    return this.service.restaurantDetails({
      ...args,
      select: {
        createdAt: true,
        deliveryCharge: true,
        deliveryTime: true,
        description: true,
        id: true,
        imageUrl: true,
        minOrderValue: true,
        rating: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        reviewCount: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RestaurantDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RestaurantDetail",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async restaurantDetail(
    @common.Param() params: RestaurantDetailWhereUniqueInput
  ): Promise<RestaurantDetail | null> {
    const result = await this.service.restaurantDetail({
      where: params,
      select: {
        createdAt: true,
        deliveryCharge: true,
        deliveryTime: true,
        description: true,
        id: true,
        imageUrl: true,
        minOrderValue: true,
        rating: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        reviewCount: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RestaurantDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RestaurantDetail",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRestaurantDetail(
    @common.Param() params: RestaurantDetailWhereUniqueInput,
    @common.Body() data: RestaurantDetailUpdateInput
  ): Promise<RestaurantDetail | null> {
    try {
      return await this.service.updateRestaurantDetail({
        where: params,
        data: {
          ...data,

          restaurants: {
            connect: data.restaurants,
          },
        },
        select: {
          createdAt: true,
          deliveryCharge: true,
          deliveryTime: true,
          description: true,
          id: true,
          imageUrl: true,
          minOrderValue: true,
          rating: true,

          restaurants: {
            select: {
              id: true,
            },
          },

          reviewCount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RestaurantDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RestaurantDetail",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRestaurantDetail(
    @common.Param() params: RestaurantDetailWhereUniqueInput
  ): Promise<RestaurantDetail | null> {
    try {
      return await this.service.deleteRestaurantDetail({
        where: params,
        select: {
          createdAt: true,
          deliveryCharge: true,
          deliveryTime: true,
          description: true,
          id: true,
          imageUrl: true,
          minOrderValue: true,
          rating: true,

          restaurants: {
            select: {
              id: true,
            },
          },

          reviewCount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
