/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RestaurantDetail } from "./RestaurantDetail";
import { RestaurantDetailCountArgs } from "./RestaurantDetailCountArgs";
import { RestaurantDetailFindManyArgs } from "./RestaurantDetailFindManyArgs";
import { RestaurantDetailFindUniqueArgs } from "./RestaurantDetailFindUniqueArgs";
import { CreateRestaurantDetailArgs } from "./CreateRestaurantDetailArgs";
import { UpdateRestaurantDetailArgs } from "./UpdateRestaurantDetailArgs";
import { DeleteRestaurantDetailArgs } from "./DeleteRestaurantDetailArgs";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { RestaurantDetailService } from "../restaurantDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RestaurantDetail)
export class RestaurantDetailResolverBase {
  constructor(
    protected readonly service: RestaurantDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RestaurantDetail",
    action: "read",
    possession: "any",
  })
  async _restaurantDetailsMeta(
    @graphql.Args() args: RestaurantDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RestaurantDetail])
  @nestAccessControl.UseRoles({
    resource: "RestaurantDetail",
    action: "read",
    possession: "any",
  })
  async restaurantDetails(
    @graphql.Args() args: RestaurantDetailFindManyArgs
  ): Promise<RestaurantDetail[]> {
    return this.service.restaurantDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RestaurantDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RestaurantDetail",
    action: "read",
    possession: "own",
  })
  async restaurantDetail(
    @graphql.Args() args: RestaurantDetailFindUniqueArgs
  ): Promise<RestaurantDetail | null> {
    const result = await this.service.restaurantDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantDetail)
  @nestAccessControl.UseRoles({
    resource: "RestaurantDetail",
    action: "create",
    possession: "any",
  })
  async createRestaurantDetail(
    @graphql.Args() args: CreateRestaurantDetailArgs
  ): Promise<RestaurantDetail> {
    return await this.service.createRestaurantDetail({
      ...args,
      data: {
        ...args.data,

        restaurants: {
          connect: args.data.restaurants,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantDetail)
  @nestAccessControl.UseRoles({
    resource: "RestaurantDetail",
    action: "update",
    possession: "any",
  })
  async updateRestaurantDetail(
    @graphql.Args() args: UpdateRestaurantDetailArgs
  ): Promise<RestaurantDetail | null> {
    try {
      return await this.service.updateRestaurantDetail({
        ...args,
        data: {
          ...args.data,

          restaurants: {
            connect: args.data.restaurants,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RestaurantDetail)
  @nestAccessControl.UseRoles({
    resource: "RestaurantDetail",
    action: "delete",
    possession: "any",
  })
  async deleteRestaurantDetail(
    @graphql.Args() args: DeleteRestaurantDetailArgs
  ): Promise<RestaurantDetail | null> {
    try {
      return await this.service.deleteRestaurantDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurants",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurants(
    @graphql.Parent() parent: RestaurantDetail
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurants(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
