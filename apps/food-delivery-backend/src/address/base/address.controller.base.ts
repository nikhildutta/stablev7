/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AddressService } from "../address.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AddressCreateInput } from "./AddressCreateInput";
import { Address } from "./Address";
import { AddressFindManyArgs } from "./AddressFindManyArgs";
import { AddressWhereUniqueInput } from "./AddressWhereUniqueInput";
import { AddressUpdateInput } from "./AddressUpdateInput";
import { AccountsAddressMapFindManyArgs } from "../../accountsAddressMap/base/AccountsAddressMapFindManyArgs";
import { AccountsAddressMap } from "../../accountsAddressMap/base/AccountsAddressMap";
import { AccountsAddressMapWhereUniqueInput } from "../../accountsAddressMap/base/AccountsAddressMapWhereUniqueInput";
import { ContactDetailFindManyArgs } from "../../contactDetail/base/ContactDetailFindManyArgs";
import { ContactDetail } from "../../contactDetail/base/ContactDetail";
import { ContactDetailWhereUniqueInput } from "../../contactDetail/base/ContactDetailWhereUniqueInput";
import { CustomerAddressMapFindManyArgs } from "../../customerAddressMap/base/CustomerAddressMapFindManyArgs";
import { CustomerAddressMap } from "../../customerAddressMap/base/CustomerAddressMap";
import { CustomerAddressMapWhereUniqueInput } from "../../customerAddressMap/base/CustomerAddressMapWhereUniqueInput";
import { DeliveryInstructionAddressMapFindManyArgs } from "../../deliveryInstructionAddressMap/base/DeliveryInstructionAddressMapFindManyArgs";
import { DeliveryInstructionAddressMap } from "../../deliveryInstructionAddressMap/base/DeliveryInstructionAddressMap";
import { DeliveryInstructionAddressMapWhereUniqueInput } from "../../deliveryInstructionAddressMap/base/DeliveryInstructionAddressMapWhereUniqueInput";
import { GeoLocationFindManyArgs } from "../../geoLocation/base/GeoLocationFindManyArgs";
import { GeoLocation } from "../../geoLocation/base/GeoLocation";
import { GeoLocationWhereUniqueInput } from "../../geoLocation/base/GeoLocationWhereUniqueInput";
import { OrderHistoryFindManyArgs } from "../../orderHistory/base/OrderHistoryFindManyArgs";
import { OrderHistory } from "../../orderHistory/base/OrderHistory";
import { OrderHistoryWhereUniqueInput } from "../../orderHistory/base/OrderHistoryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AddressControllerBase {
  constructor(
    protected readonly service: AddressService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Address })
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAddress(
    @common.Body() data: AddressCreateInput
  ): Promise<Address> {
    return await this.service.createAddress({
      data: data,
      select: {
        addressLine1: true,
        addressLine2: true,
        addressLine3: true,
        city: true,
        country: true,
        createdAt: true,
        id: true,
        isPrimary: true,
        nickName: true,
        pincode: true,
        state: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Address] })
  @ApiNestedQuery(AddressFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async addresses(@common.Req() request: Request): Promise<Address[]> {
    const args = plainToClass(AddressFindManyArgs, request.query);
    return this.service.addresses({
      ...args,
      select: {
        addressLine1: true,
        addressLine2: true,
        addressLine3: true,
        city: true,
        country: true,
        createdAt: true,
        id: true,
        isPrimary: true,
        nickName: true,
        pincode: true,
        state: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Address })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async address(
    @common.Param() params: AddressWhereUniqueInput
  ): Promise<Address | null> {
    const result = await this.service.address({
      where: params,
      select: {
        addressLine1: true,
        addressLine2: true,
        addressLine3: true,
        city: true,
        country: true,
        createdAt: true,
        id: true,
        isPrimary: true,
        nickName: true,
        pincode: true,
        state: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Address })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAddress(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() data: AddressUpdateInput
  ): Promise<Address | null> {
    try {
      return await this.service.updateAddress({
        where: params,
        data: data,
        select: {
          addressLine1: true,
          addressLine2: true,
          addressLine3: true,
          city: true,
          country: true,
          createdAt: true,
          id: true,
          isPrimary: true,
          nickName: true,
          pincode: true,
          state: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Address })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAddress(
    @common.Param() params: AddressWhereUniqueInput
  ): Promise<Address | null> {
    try {
      return await this.service.deleteAddress({
        where: params,
        select: {
          addressLine1: true,
          addressLine2: true,
          addressLine3: true,
          city: true,
          country: true,
          createdAt: true,
          id: true,
          isPrimary: true,
          nickName: true,
          pincode: true,
          state: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/accountsAddressMap")
  @ApiNestedQuery(AccountsAddressMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AccountsAddressMap",
    action: "read",
    possession: "any",
  })
  async findAccountsAddressMap(
    @common.Req() request: Request,
    @common.Param() params: AddressWhereUniqueInput
  ): Promise<AccountsAddressMap[]> {
    const query = plainToClass(AccountsAddressMapFindManyArgs, request.query);
    const results = await this.service.findAccountsAddressMap(params.id, {
      ...query,
      select: {
        accounts: {
          select: {
            id: true,
          },
        },

        addresses: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accountsAddressMap")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async connectAccountsAddressMap(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: AccountsAddressMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountsAddressMap: {
        connect: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accountsAddressMap")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async updateAccountsAddressMap(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: AccountsAddressMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountsAddressMap: {
        set: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accountsAddressMap")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async disconnectAccountsAddressMap(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: AccountsAddressMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountsAddressMap: {
        disconnect: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/contactDetails")
  @ApiNestedQuery(ContactDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "read",
    possession: "any",
  })
  async findContactDetails(
    @common.Req() request: Request,
    @common.Param() params: AddressWhereUniqueInput
  ): Promise<ContactDetail[]> {
    const query = plainToClass(ContactDetailFindManyArgs, request.query);
    const results = await this.service.findContactDetails(params.id, {
      ...query,
      select: {
        addresses: {
          select: {
            id: true,
          },
        },

        contactName: true,
        contactNumber: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contactDetails")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async connectContactDetails(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: ContactDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactDetails: {
        connect: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contactDetails")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async updateContactDetails(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: ContactDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactDetails: {
        set: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contactDetails")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async disconnectContactDetails(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: ContactDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactDetails: {
        disconnect: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/customerAddressMap")
  @ApiNestedQuery(CustomerAddressMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CustomerAddressMap",
    action: "read",
    possession: "any",
  })
  async findCustomerAddressMap(
    @common.Req() request: Request,
    @common.Param() params: AddressWhereUniqueInput
  ): Promise<CustomerAddressMap[]> {
    const query = plainToClass(CustomerAddressMapFindManyArgs, request.query);
    const results = await this.service.findCustomerAddressMap(params.id, {
      ...query,
      select: {
        addresses: {
          select: {
            id: true,
          },
        },

        customers: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customerAddressMap")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async connectCustomerAddressMap(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: CustomerAddressMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerAddressMap: {
        connect: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customerAddressMap")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async updateCustomerAddressMap(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: CustomerAddressMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerAddressMap: {
        set: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customerAddressMap")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async disconnectCustomerAddressMap(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: CustomerAddressMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerAddressMap: {
        disconnect: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/deliveryInstructionAddressMap")
  @ApiNestedQuery(DeliveryInstructionAddressMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DeliveryInstructionAddressMap",
    action: "read",
    possession: "any",
  })
  async findDeliveryInstructionAddressMap(
    @common.Req() request: Request,
    @common.Param() params: AddressWhereUniqueInput
  ): Promise<DeliveryInstructionAddressMap[]> {
    const query = plainToClass(
      DeliveryInstructionAddressMapFindManyArgs,
      request.query
    );
    const results = await this.service.findDeliveryInstructionAddressMap(
      params.id,
      {
        ...query,
        select: {
          addresses: {
            select: {
              id: true,
            },
          },

          deliveryPartnerInstruction: {
            select: {
              id: true,
            },
          },

          id: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/deliveryInstructionAddressMap")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async connectDeliveryInstructionAddressMap(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: DeliveryInstructionAddressMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryInstructionAddressMap: {
        connect: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/deliveryInstructionAddressMap")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async updateDeliveryInstructionAddressMap(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: DeliveryInstructionAddressMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryInstructionAddressMap: {
        set: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/deliveryInstructionAddressMap")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async disconnectDeliveryInstructionAddressMap(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: DeliveryInstructionAddressMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryInstructionAddressMap: {
        disconnect: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/geoLocations")
  @ApiNestedQuery(GeoLocationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GeoLocation",
    action: "read",
    possession: "any",
  })
  async findGeoLocations(
    @common.Req() request: Request,
    @common.Param() params: AddressWhereUniqueInput
  ): Promise<GeoLocation[]> {
    const query = plainToClass(GeoLocationFindManyArgs, request.query);
    const results = await this.service.findGeoLocations(params.id, {
      ...query,
      select: {
        addresses: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isGeoFence: true,
        latitude: true,
        longitude: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/geoLocations")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async connectGeoLocations(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: GeoLocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      geoLocations: {
        connect: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/geoLocations")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async updateGeoLocations(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: GeoLocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      geoLocations: {
        set: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/geoLocations")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async disconnectGeoLocations(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: GeoLocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      geoLocations: {
        disconnect: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orderHistory")
  @ApiNestedQuery(OrderHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "any",
  })
  async findOrderHistory(
    @common.Req() request: Request,
    @common.Param() params: AddressWhereUniqueInput
  ): Promise<OrderHistory[]> {
    const query = plainToClass(OrderHistoryFindManyArgs, request.query);
    const results = await this.service.findOrderHistory(params.id, {
      ...query,
      select: {
        addresses: {
          select: {
            id: true,
          },
        },

        appUsers: {
          select: {
            id: true,
          },
        },

        coupons: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deliveryTipsAmount: true,
        discountAmount: true,
        estimatedDeliveryTime: true,
        finalAmount: true,
        id: true,
        isCancelled: true,
        isFulfilled: true,
        isPaid: true,
        isRejected: true,
        orderDateTime: true,
        orderIdRef: true,
        order_type: true,
        packagingAmount: true,

        paymentMethods: {
          select: {
            id: true,
          },
        },

        preparationInstruction: true,
        preparationTime: true,
        rejectedBy: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        totalAmount: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderHistory")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async connectOrderHistory(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: OrderHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderHistory: {
        connect: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderHistory")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async updateOrderHistory(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: OrderHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderHistory: {
        set: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderHistory")
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async disconnectOrderHistory(
    @common.Param() params: AddressWhereUniqueInput,
    @common.Body() body: OrderHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderHistory: {
        disconnect: body,
      },
    };
    await this.service.updateAddress({
      where: params,
      data,
      select: { id: true },
    });
  }
}
