/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountsAddressMapListRelationFilter } from "../../accountsAddressMap/base/AccountsAddressMapListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { ContactDetailListRelationFilter } from "../../contactDetail/base/ContactDetailListRelationFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { CustomerAddressMapListRelationFilter } from "../../customerAddressMap/base/CustomerAddressMapListRelationFilter";
import { DeliveryInstructionAddressMapListRelationFilter } from "../../deliveryInstructionAddressMap/base/DeliveryInstructionAddressMapListRelationFilter";
import { GeoLocationListRelationFilter } from "../../geoLocation/base/GeoLocationListRelationFilter";
import { StringFilter } from "../../util/StringFilter";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";
import { OrderHistoryListRelationFilter } from "../../orderHistory/base/OrderHistoryListRelationFilter";

@InputType()
class AddressWhereInput {
  @ApiProperty({
    required: false,
    type: () => AccountsAddressMapListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AccountsAddressMapListRelationFilter)
  @IsOptional()
  @Field(() => AccountsAddressMapListRelationFilter, {
    nullable: true,
  })
  accountsAddressMap?: AccountsAddressMapListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  addressLine1?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  addressLine2?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  addressLine3?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  city?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ContactDetailListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ContactDetailListRelationFilter)
  @IsOptional()
  @Field(() => ContactDetailListRelationFilter, {
    nullable: true,
  })
  contactDetails?: ContactDetailListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  country?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  createdAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => CustomerAddressMapListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CustomerAddressMapListRelationFilter)
  @IsOptional()
  @Field(() => CustomerAddressMapListRelationFilter, {
    nullable: true,
  })
  customerAddressMap?: CustomerAddressMapListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => DeliveryInstructionAddressMapListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DeliveryInstructionAddressMapListRelationFilter)
  @IsOptional()
  @Field(() => DeliveryInstructionAddressMapListRelationFilter, {
    nullable: true,
  })
  deliveryInstructionAddressMap?: DeliveryInstructionAddressMapListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => GeoLocationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => GeoLocationListRelationFilter)
  @IsOptional()
  @Field(() => GeoLocationListRelationFilter, {
    nullable: true,
  })
  geoLocations?: GeoLocationListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  isPrimary?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  nickName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => OrderHistoryListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrderHistoryListRelationFilter)
  @IsOptional()
  @Field(() => OrderHistoryListRelationFilter, {
    nullable: true,
  })
  orderHistory?: OrderHistoryListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  pincode?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  state?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeNullableFilter;
}

export { AddressWhereInput as AddressWhereInput };
