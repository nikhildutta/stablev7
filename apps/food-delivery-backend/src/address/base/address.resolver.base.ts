/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Address } from "./Address";
import { AddressCountArgs } from "./AddressCountArgs";
import { AddressFindManyArgs } from "./AddressFindManyArgs";
import { AddressFindUniqueArgs } from "./AddressFindUniqueArgs";
import { CreateAddressArgs } from "./CreateAddressArgs";
import { UpdateAddressArgs } from "./UpdateAddressArgs";
import { DeleteAddressArgs } from "./DeleteAddressArgs";
import { AccountsAddressMapFindManyArgs } from "../../accountsAddressMap/base/AccountsAddressMapFindManyArgs";
import { AccountsAddressMap } from "../../accountsAddressMap/base/AccountsAddressMap";
import { ContactDetailFindManyArgs } from "../../contactDetail/base/ContactDetailFindManyArgs";
import { ContactDetail } from "../../contactDetail/base/ContactDetail";
import { CustomerAddressMapFindManyArgs } from "../../customerAddressMap/base/CustomerAddressMapFindManyArgs";
import { CustomerAddressMap } from "../../customerAddressMap/base/CustomerAddressMap";
import { DeliveryInstructionAddressMapFindManyArgs } from "../../deliveryInstructionAddressMap/base/DeliveryInstructionAddressMapFindManyArgs";
import { DeliveryInstructionAddressMap } from "../../deliveryInstructionAddressMap/base/DeliveryInstructionAddressMap";
import { GeoLocationFindManyArgs } from "../../geoLocation/base/GeoLocationFindManyArgs";
import { GeoLocation } from "../../geoLocation/base/GeoLocation";
import { OrderHistoryFindManyArgs } from "../../orderHistory/base/OrderHistoryFindManyArgs";
import { OrderHistory } from "../../orderHistory/base/OrderHistory";
import { AddressService } from "../address.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Address)
export class AddressResolverBase {
  constructor(
    protected readonly service: AddressService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "read",
    possession: "any",
  })
  async _addressesMeta(
    @graphql.Args() args: AddressCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Address])
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "read",
    possession: "any",
  })
  async addresses(
    @graphql.Args() args: AddressFindManyArgs
  ): Promise<Address[]> {
    return this.service.addresses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Address, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "read",
    possession: "own",
  })
  async address(
    @graphql.Args() args: AddressFindUniqueArgs
  ): Promise<Address | null> {
    const result = await this.service.address(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Address)
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "create",
    possession: "any",
  })
  async createAddress(
    @graphql.Args() args: CreateAddressArgs
  ): Promise<Address> {
    return await this.service.createAddress({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Address)
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "update",
    possession: "any",
  })
  async updateAddress(
    @graphql.Args() args: UpdateAddressArgs
  ): Promise<Address | null> {
    try {
      return await this.service.updateAddress({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Address)
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "delete",
    possession: "any",
  })
  async deleteAddress(
    @graphql.Args() args: DeleteAddressArgs
  ): Promise<Address | null> {
    try {
      return await this.service.deleteAddress(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AccountsAddressMap], {
    name: "accountsAddressMap",
  })
  @nestAccessControl.UseRoles({
    resource: "AccountsAddressMap",
    action: "read",
    possession: "any",
  })
  async findAccountsAddressMap(
    @graphql.Parent() parent: Address,
    @graphql.Args() args: AccountsAddressMapFindManyArgs
  ): Promise<AccountsAddressMap[]> {
    const results = await this.service.findAccountsAddressMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ContactDetail], { name: "contactDetails" })
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "read",
    possession: "any",
  })
  async findContactDetails(
    @graphql.Parent() parent: Address,
    @graphql.Args() args: ContactDetailFindManyArgs
  ): Promise<ContactDetail[]> {
    const results = await this.service.findContactDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CustomerAddressMap], {
    name: "customerAddressMap",
  })
  @nestAccessControl.UseRoles({
    resource: "CustomerAddressMap",
    action: "read",
    possession: "any",
  })
  async findCustomerAddressMap(
    @graphql.Parent() parent: Address,
    @graphql.Args() args: CustomerAddressMapFindManyArgs
  ): Promise<CustomerAddressMap[]> {
    const results = await this.service.findCustomerAddressMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DeliveryInstructionAddressMap], {
    name: "deliveryInstructionAddressMap",
  })
  @nestAccessControl.UseRoles({
    resource: "DeliveryInstructionAddressMap",
    action: "read",
    possession: "any",
  })
  async findDeliveryInstructionAddressMap(
    @graphql.Parent() parent: Address,
    @graphql.Args() args: DeliveryInstructionAddressMapFindManyArgs
  ): Promise<DeliveryInstructionAddressMap[]> {
    const results = await this.service.findDeliveryInstructionAddressMap(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [GeoLocation], { name: "geoLocations" })
  @nestAccessControl.UseRoles({
    resource: "GeoLocation",
    action: "read",
    possession: "any",
  })
  async findGeoLocations(
    @graphql.Parent() parent: Address,
    @graphql.Args() args: GeoLocationFindManyArgs
  ): Promise<GeoLocation[]> {
    const results = await this.service.findGeoLocations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OrderHistory], { name: "orderHistory" })
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "any",
  })
  async findOrderHistory(
    @graphql.Parent() parent: Address,
    @graphql.Args() args: OrderHistoryFindManyArgs
  ): Promise<OrderHistory[]> {
    const results = await this.service.findOrderHistory(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
