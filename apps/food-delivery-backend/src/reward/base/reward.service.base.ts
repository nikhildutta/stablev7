/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Reward as PrismaReward,
  AppUser as PrismaAppUser,
} from "@prisma/client";

export class RewardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RewardCountArgs, "select">): Promise<number> {
    return this.prisma.reward.count(args);
  }

  async rewards<T extends Prisma.RewardFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RewardFindManyArgs>
  ): Promise<PrismaReward[]> {
    return this.prisma.reward.findMany<Prisma.RewardFindManyArgs>(args);
  }
  async reward<T extends Prisma.RewardFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RewardFindUniqueArgs>
  ): Promise<PrismaReward | null> {
    return this.prisma.reward.findUnique(args);
  }
  async createReward<T extends Prisma.RewardCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RewardCreateArgs>
  ): Promise<PrismaReward> {
    return this.prisma.reward.create<T>(args);
  }
  async updateReward<T extends Prisma.RewardUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RewardUpdateArgs>
  ): Promise<PrismaReward> {
    return this.prisma.reward.update<T>(args);
  }
  async deleteReward<T extends Prisma.RewardDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RewardDeleteArgs>
  ): Promise<PrismaReward> {
    return this.prisma.reward.delete(args);
  }

  async getAppUsers(parentId: string): Promise<PrismaAppUser | null> {
    return this.prisma.reward
      .findUnique({
        where: { id: parentId },
      })
      .appUsers();
  }
}
