/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Favourite } from "./Favourite";
import { FavouriteCountArgs } from "./FavouriteCountArgs";
import { FavouriteFindManyArgs } from "./FavouriteFindManyArgs";
import { FavouriteFindUniqueArgs } from "./FavouriteFindUniqueArgs";
import { CreateFavouriteArgs } from "./CreateFavouriteArgs";
import { UpdateFavouriteArgs } from "./UpdateFavouriteArgs";
import { DeleteFavouriteArgs } from "./DeleteFavouriteArgs";
import { FavouriteMenuItemFindManyArgs } from "../../favouriteMenuItem/base/FavouriteMenuItemFindManyArgs";
import { FavouriteMenuItem } from "../../favouriteMenuItem/base/FavouriteMenuItem";
import { FavouriteRestaurantFindManyArgs } from "../../favouriteRestaurant/base/FavouriteRestaurantFindManyArgs";
import { FavouriteRestaurant } from "../../favouriteRestaurant/base/FavouriteRestaurant";
import { AppUser } from "../../appUser/base/AppUser";
import { FavouriteService } from "../favourite.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Favourite)
export class FavouriteResolverBase {
  constructor(
    protected readonly service: FavouriteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Favourite",
    action: "read",
    possession: "any",
  })
  async _favouritesMeta(
    @graphql.Args() args: FavouriteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Favourite])
  @nestAccessControl.UseRoles({
    resource: "Favourite",
    action: "read",
    possession: "any",
  })
  async favourites(
    @graphql.Args() args: FavouriteFindManyArgs
  ): Promise<Favourite[]> {
    return this.service.favourites(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Favourite, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Favourite",
    action: "read",
    possession: "own",
  })
  async favourite(
    @graphql.Args() args: FavouriteFindUniqueArgs
  ): Promise<Favourite | null> {
    const result = await this.service.favourite(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Favourite)
  @nestAccessControl.UseRoles({
    resource: "Favourite",
    action: "create",
    possession: "any",
  })
  async createFavourite(
    @graphql.Args() args: CreateFavouriteArgs
  ): Promise<Favourite> {
    return await this.service.createFavourite({
      ...args,
      data: {
        ...args.data,

        appUsers: {
          connect: args.data.appUsers,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Favourite)
  @nestAccessControl.UseRoles({
    resource: "Favourite",
    action: "update",
    possession: "any",
  })
  async updateFavourite(
    @graphql.Args() args: UpdateFavouriteArgs
  ): Promise<Favourite | null> {
    try {
      return await this.service.updateFavourite({
        ...args,
        data: {
          ...args.data,

          appUsers: {
            connect: args.data.appUsers,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Favourite)
  @nestAccessControl.UseRoles({
    resource: "Favourite",
    action: "delete",
    possession: "any",
  })
  async deleteFavourite(
    @graphql.Args() args: DeleteFavouriteArgs
  ): Promise<Favourite | null> {
    try {
      return await this.service.deleteFavourite(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FavouriteMenuItem], {
    name: "favouriteMenuItems",
  })
  @nestAccessControl.UseRoles({
    resource: "FavouriteMenuItem",
    action: "read",
    possession: "any",
  })
  async findFavouriteMenuItems(
    @graphql.Parent() parent: Favourite,
    @graphql.Args() args: FavouriteMenuItemFindManyArgs
  ): Promise<FavouriteMenuItem[]> {
    const results = await this.service.findFavouriteMenuItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FavouriteRestaurant], {
    name: "favouriteRestaurant",
  })
  @nestAccessControl.UseRoles({
    resource: "FavouriteRestaurant",
    action: "read",
    possession: "any",
  })
  async findFavouriteRestaurant(
    @graphql.Parent() parent: Favourite,
    @graphql.Args() args: FavouriteRestaurantFindManyArgs
  ): Promise<FavouriteRestaurant[]> {
    const results = await this.service.findFavouriteRestaurant(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUsers",
  })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async getAppUsers(
    @graphql.Parent() parent: Favourite
  ): Promise<AppUser | null> {
    const result = await this.service.getAppUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
