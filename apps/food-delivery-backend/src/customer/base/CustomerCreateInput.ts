/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsDate,
  ValidateNested,
  IsEnum,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { CustomerAddressMapCreateNestedManyWithoutCustomersInput } from "./CustomerAddressMapCreateNestedManyWithoutCustomersInput";
import { EnumCustomerGender } from "./EnumCustomerGender";
import { UserCustomerLookupCreateNestedManyWithoutCustomersInput } from "./UserCustomerLookupCreateNestedManyWithoutCustomersInput";

@InputType()
class CustomerCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  additionaldetails?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  anniversary?: Date | null;

  @ApiProperty({
    required: false,
    type: () => CustomerAddressMapCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => CustomerAddressMapCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => CustomerAddressMapCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  customerAddressMap?: CustomerAddressMapCreateNestedManyWithoutCustomersInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfBirth?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumCustomerGender,
  })
  @IsEnum(EnumCustomerGender)
  @IsOptional()
  @Field(() => EnumCustomerGender, {
    nullable: true,
  })
  gender?: "Male" | "Female" | "Other" | "Prefer_not_to_disclose" | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isEmailVerified?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isMobileVerified?: boolean | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  mobile!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt?: Date | null;

  @ApiProperty({
    required: false,
    type: () => UserCustomerLookupCreateNestedManyWithoutCustomersInput,
  })
  @ValidateNested()
  @Type(() => UserCustomerLookupCreateNestedManyWithoutCustomersInput)
  @IsOptional()
  @Field(() => UserCustomerLookupCreateNestedManyWithoutCustomersInput, {
    nullable: true,
  })
  userCustomerLookup?: UserCustomerLookupCreateNestedManyWithoutCustomersInput;
}

export { CustomerCreateInput as CustomerCreateInput };
