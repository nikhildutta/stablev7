/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MenuItemIngredient as PrismaMenuItemIngredient,
  MenuItem as PrismaMenuItem,
} from "@prisma/client";

export class MenuItemIngredientServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MenuItemIngredientCountArgs, "select">
  ): Promise<number> {
    return this.prisma.menuItemIngredient.count(args);
  }

  async menuItemIngredients<T extends Prisma.MenuItemIngredientFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemIngredientFindManyArgs>
  ): Promise<PrismaMenuItemIngredient[]> {
    return this.prisma.menuItemIngredient.findMany<Prisma.MenuItemIngredientFindManyArgs>(
      args
    );
  }
  async menuItemIngredient<T extends Prisma.MenuItemIngredientFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemIngredientFindUniqueArgs>
  ): Promise<PrismaMenuItemIngredient | null> {
    return this.prisma.menuItemIngredient.findUnique(args);
  }
  async createMenuItemIngredient<T extends Prisma.MenuItemIngredientCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemIngredientCreateArgs>
  ): Promise<PrismaMenuItemIngredient> {
    return this.prisma.menuItemIngredient.create<T>(args);
  }
  async updateMenuItemIngredient<T extends Prisma.MenuItemIngredientUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemIngredientUpdateArgs>
  ): Promise<PrismaMenuItemIngredient> {
    return this.prisma.menuItemIngredient.update<T>(args);
  }
  async deleteMenuItemIngredient<T extends Prisma.MenuItemIngredientDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuItemIngredientDeleteArgs>
  ): Promise<PrismaMenuItemIngredient> {
    return this.prisma.menuItemIngredient.delete(args);
  }

  async getMenuItems(parentId: string): Promise<PrismaMenuItem | null> {
    return this.prisma.menuItemIngredient
      .findUnique({
        where: { id: parentId },
      })
      .menuItems();
  }
}
