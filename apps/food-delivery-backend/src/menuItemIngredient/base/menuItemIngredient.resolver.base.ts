/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MenuItemIngredient } from "./MenuItemIngredient";
import { MenuItemIngredientCountArgs } from "./MenuItemIngredientCountArgs";
import { MenuItemIngredientFindManyArgs } from "./MenuItemIngredientFindManyArgs";
import { MenuItemIngredientFindUniqueArgs } from "./MenuItemIngredientFindUniqueArgs";
import { CreateMenuItemIngredientArgs } from "./CreateMenuItemIngredientArgs";
import { UpdateMenuItemIngredientArgs } from "./UpdateMenuItemIngredientArgs";
import { DeleteMenuItemIngredientArgs } from "./DeleteMenuItemIngredientArgs";
import { MenuItem } from "../../menuItem/base/MenuItem";
import { MenuItemIngredientService } from "../menuItemIngredient.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MenuItemIngredient)
export class MenuItemIngredientResolverBase {
  constructor(
    protected readonly service: MenuItemIngredientService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MenuItemIngredient",
    action: "read",
    possession: "any",
  })
  async _menuItemIngredientsMeta(
    @graphql.Args() args: MenuItemIngredientCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MenuItemIngredient])
  @nestAccessControl.UseRoles({
    resource: "MenuItemIngredient",
    action: "read",
    possession: "any",
  })
  async menuItemIngredients(
    @graphql.Args() args: MenuItemIngredientFindManyArgs
  ): Promise<MenuItemIngredient[]> {
    return this.service.menuItemIngredients(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MenuItemIngredient, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MenuItemIngredient",
    action: "read",
    possession: "own",
  })
  async menuItemIngredient(
    @graphql.Args() args: MenuItemIngredientFindUniqueArgs
  ): Promise<MenuItemIngredient | null> {
    const result = await this.service.menuItemIngredient(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuItemIngredient)
  @nestAccessControl.UseRoles({
    resource: "MenuItemIngredient",
    action: "create",
    possession: "any",
  })
  async createMenuItemIngredient(
    @graphql.Args() args: CreateMenuItemIngredientArgs
  ): Promise<MenuItemIngredient> {
    return await this.service.createMenuItemIngredient({
      ...args,
      data: {
        ...args.data,

        menuItems: {
          connect: args.data.menuItems,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuItemIngredient)
  @nestAccessControl.UseRoles({
    resource: "MenuItemIngredient",
    action: "update",
    possession: "any",
  })
  async updateMenuItemIngredient(
    @graphql.Args() args: UpdateMenuItemIngredientArgs
  ): Promise<MenuItemIngredient | null> {
    try {
      return await this.service.updateMenuItemIngredient({
        ...args,
        data: {
          ...args.data,

          menuItems: {
            connect: args.data.menuItems,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MenuItemIngredient)
  @nestAccessControl.UseRoles({
    resource: "MenuItemIngredient",
    action: "delete",
    possession: "any",
  })
  async deleteMenuItemIngredient(
    @graphql.Args() args: DeleteMenuItemIngredientArgs
  ): Promise<MenuItemIngredient | null> {
    try {
      return await this.service.deleteMenuItemIngredient(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MenuItem, {
    nullable: true,
    name: "menuItems",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  async getMenuItems(
    @graphql.Parent() parent: MenuItemIngredient
  ): Promise<MenuItem | null> {
    const result = await this.service.getMenuItems(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
