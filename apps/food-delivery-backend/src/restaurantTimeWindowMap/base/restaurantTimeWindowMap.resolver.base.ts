/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RestaurantTimeWindowMap } from "./RestaurantTimeWindowMap";
import { RestaurantTimeWindowMapCountArgs } from "./RestaurantTimeWindowMapCountArgs";
import { RestaurantTimeWindowMapFindManyArgs } from "./RestaurantTimeWindowMapFindManyArgs";
import { RestaurantTimeWindowMapFindUniqueArgs } from "./RestaurantTimeWindowMapFindUniqueArgs";
import { CreateRestaurantTimeWindowMapArgs } from "./CreateRestaurantTimeWindowMapArgs";
import { UpdateRestaurantTimeWindowMapArgs } from "./UpdateRestaurantTimeWindowMapArgs";
import { DeleteRestaurantTimeWindowMapArgs } from "./DeleteRestaurantTimeWindowMapArgs";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { TimeWindow } from "../../timeWindow/base/TimeWindow";
import { RestaurantTimeWindowMapService } from "../restaurantTimeWindowMap.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RestaurantTimeWindowMap)
export class RestaurantTimeWindowMapResolverBase {
  constructor(
    protected readonly service: RestaurantTimeWindowMapService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RestaurantTimeWindowMap",
    action: "read",
    possession: "any",
  })
  async _restaurantTimeWindowMapsMeta(
    @graphql.Args() args: RestaurantTimeWindowMapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RestaurantTimeWindowMap])
  @nestAccessControl.UseRoles({
    resource: "RestaurantTimeWindowMap",
    action: "read",
    possession: "any",
  })
  async restaurantTimeWindowMaps(
    @graphql.Args() args: RestaurantTimeWindowMapFindManyArgs
  ): Promise<RestaurantTimeWindowMap[]> {
    return this.service.restaurantTimeWindowMaps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RestaurantTimeWindowMap, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RestaurantTimeWindowMap",
    action: "read",
    possession: "own",
  })
  async restaurantTimeWindowMap(
    @graphql.Args() args: RestaurantTimeWindowMapFindUniqueArgs
  ): Promise<RestaurantTimeWindowMap | null> {
    const result = await this.service.restaurantTimeWindowMap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantTimeWindowMap)
  @nestAccessControl.UseRoles({
    resource: "RestaurantTimeWindowMap",
    action: "create",
    possession: "any",
  })
  async createRestaurantTimeWindowMap(
    @graphql.Args() args: CreateRestaurantTimeWindowMapArgs
  ): Promise<RestaurantTimeWindowMap> {
    return await this.service.createRestaurantTimeWindowMap({
      ...args,
      data: {
        ...args.data,

        restaurants: {
          connect: args.data.restaurants,
        },

        timeWindow: {
          connect: args.data.timeWindow,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantTimeWindowMap)
  @nestAccessControl.UseRoles({
    resource: "RestaurantTimeWindowMap",
    action: "update",
    possession: "any",
  })
  async updateRestaurantTimeWindowMap(
    @graphql.Args() args: UpdateRestaurantTimeWindowMapArgs
  ): Promise<RestaurantTimeWindowMap | null> {
    try {
      return await this.service.updateRestaurantTimeWindowMap({
        ...args,
        data: {
          ...args.data,

          restaurants: {
            connect: args.data.restaurants,
          },

          timeWindow: {
            connect: args.data.timeWindow,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RestaurantTimeWindowMap)
  @nestAccessControl.UseRoles({
    resource: "RestaurantTimeWindowMap",
    action: "delete",
    possession: "any",
  })
  async deleteRestaurantTimeWindowMap(
    @graphql.Args() args: DeleteRestaurantTimeWindowMapArgs
  ): Promise<RestaurantTimeWindowMap | null> {
    try {
      return await this.service.deleteRestaurantTimeWindowMap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurants",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurants(
    @graphql.Parent() parent: RestaurantTimeWindowMap
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurants(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TimeWindow, {
    nullable: true,
    name: "timeWindow",
  })
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "read",
    possession: "any",
  })
  async getTimeWindow(
    @graphql.Parent() parent: RestaurantTimeWindowMap
  ): Promise<TimeWindow | null> {
    const result = await this.service.getTimeWindow(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
