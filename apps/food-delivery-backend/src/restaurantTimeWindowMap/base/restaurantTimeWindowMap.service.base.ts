/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RestaurantTimeWindowMap as PrismaRestaurantTimeWindowMap,
  Restaurant as PrismaRestaurant,
  TimeWindow as PrismaTimeWindow,
} from "@prisma/client";

export class RestaurantTimeWindowMapServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RestaurantTimeWindowMapCountArgs, "select">
  ): Promise<number> {
    return this.prisma.restaurantTimeWindowMap.count(args);
  }

  async restaurantTimeWindowMaps<
    T extends Prisma.RestaurantTimeWindowMapFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RestaurantTimeWindowMapFindManyArgs>
  ): Promise<PrismaRestaurantTimeWindowMap[]> {
    return this.prisma.restaurantTimeWindowMap.findMany<Prisma.RestaurantTimeWindowMapFindManyArgs>(
      args
    );
  }
  async restaurantTimeWindowMap<
    T extends Prisma.RestaurantTimeWindowMapFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RestaurantTimeWindowMapFindUniqueArgs>
  ): Promise<PrismaRestaurantTimeWindowMap | null> {
    return this.prisma.restaurantTimeWindowMap.findUnique(args);
  }
  async createRestaurantTimeWindowMap<
    T extends Prisma.RestaurantTimeWindowMapCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RestaurantTimeWindowMapCreateArgs>
  ): Promise<PrismaRestaurantTimeWindowMap> {
    return this.prisma.restaurantTimeWindowMap.create<T>(args);
  }
  async updateRestaurantTimeWindowMap<
    T extends Prisma.RestaurantTimeWindowMapUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RestaurantTimeWindowMapUpdateArgs>
  ): Promise<PrismaRestaurantTimeWindowMap> {
    return this.prisma.restaurantTimeWindowMap.update<T>(args);
  }
  async deleteRestaurantTimeWindowMap<
    T extends Prisma.RestaurantTimeWindowMapDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RestaurantTimeWindowMapDeleteArgs>
  ): Promise<PrismaRestaurantTimeWindowMap> {
    return this.prisma.restaurantTimeWindowMap.delete(args);
  }

  async getRestaurants(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.restaurantTimeWindowMap
      .findUnique({
        where: { id: parentId },
      })
      .restaurants();
  }

  async getTimeWindow(parentId: string): Promise<PrismaTimeWindow | null> {
    return this.prisma.restaurantTimeWindowMap
      .findUnique({
        where: { id: parentId },
      })
      .timeWindow();
  }
}
