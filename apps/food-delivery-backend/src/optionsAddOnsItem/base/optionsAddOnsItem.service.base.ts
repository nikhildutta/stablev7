/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OptionsAddOnsItem as PrismaOptionsAddOnsItem,
  OrderItemsAddon as PrismaOrderItemsAddon,
  OptionsAddonsGroup as PrismaOptionsAddonsGroup,
} from "@prisma/client";

export class OptionsAddOnsItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OptionsAddOnsItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.optionsAddOnsItem.count(args);
  }

  async optionsAddOnsItems<T extends Prisma.OptionsAddOnsItemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OptionsAddOnsItemFindManyArgs>
  ): Promise<PrismaOptionsAddOnsItem[]> {
    return this.prisma.optionsAddOnsItem.findMany<Prisma.OptionsAddOnsItemFindManyArgs>(
      args
    );
  }
  async optionsAddOnsItem<T extends Prisma.OptionsAddOnsItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OptionsAddOnsItemFindUniqueArgs>
  ): Promise<PrismaOptionsAddOnsItem | null> {
    return this.prisma.optionsAddOnsItem.findUnique(args);
  }
  async createOptionsAddOnsItem<T extends Prisma.OptionsAddOnsItemCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OptionsAddOnsItemCreateArgs>
  ): Promise<PrismaOptionsAddOnsItem> {
    return this.prisma.optionsAddOnsItem.create<T>(args);
  }
  async updateOptionsAddOnsItem<T extends Prisma.OptionsAddOnsItemUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OptionsAddOnsItemUpdateArgs>
  ): Promise<PrismaOptionsAddOnsItem> {
    return this.prisma.optionsAddOnsItem.update<T>(args);
  }
  async deleteOptionsAddOnsItem<T extends Prisma.OptionsAddOnsItemDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OptionsAddOnsItemDeleteArgs>
  ): Promise<PrismaOptionsAddOnsItem> {
    return this.prisma.optionsAddOnsItem.delete(args);
  }

  async findOrderItemsAddons(
    parentId: string,
    args: Prisma.OrderItemsAddonFindManyArgs
  ): Promise<PrismaOrderItemsAddon[]> {
    return this.prisma.optionsAddOnsItem
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orderItemsAddons(args);
  }

  async getOptionsAddonsGroup(
    parentId: string
  ): Promise<PrismaOptionsAddonsGroup | null> {
    return this.prisma.optionsAddOnsItem
      .findUnique({
        where: { id: parentId },
      })
      .optionsAddonsGroup();
  }
}
