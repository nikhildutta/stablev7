/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { OptionsAddOnsItemService } from "../optionsAddOnsItem.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { OptionsAddOnsItemCreateInput } from "./OptionsAddOnsItemCreateInput";
import { OptionsAddOnsItem } from "./OptionsAddOnsItem";
import { OptionsAddOnsItemFindManyArgs } from "./OptionsAddOnsItemFindManyArgs";
import { OptionsAddOnsItemWhereUniqueInput } from "./OptionsAddOnsItemWhereUniqueInput";
import { OptionsAddOnsItemUpdateInput } from "./OptionsAddOnsItemUpdateInput";
import { OrderItemsAddonFindManyArgs } from "../../orderItemsAddon/base/OrderItemsAddonFindManyArgs";
import { OrderItemsAddon } from "../../orderItemsAddon/base/OrderItemsAddon";
import { OrderItemsAddonWhereUniqueInput } from "../../orderItemsAddon/base/OrderItemsAddonWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class OptionsAddOnsItemControllerBase {
  constructor(
    protected readonly service: OptionsAddOnsItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OptionsAddOnsItem })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createOptionsAddOnsItem(
    @common.Body() data: OptionsAddOnsItemCreateInput
  ): Promise<OptionsAddOnsItem> {
    return await this.service.createOptionsAddOnsItem({
      data: {
        ...data,

        optionsAddonsGroup: {
          connect: data.optionsAddonsGroup,
        },
      },
      select: {
        addOnName: true,
        addOnPrice: true,
        addonsImageUrl: true,
        containsEgg: true,
        createdAt: true,
        id: true,
        isVegetarian: true,

        optionsAddonsGroup: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [OptionsAddOnsItem] })
  @ApiNestedQuery(OptionsAddOnsItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async optionsAddOnsItems(
    @common.Req() request: Request
  ): Promise<OptionsAddOnsItem[]> {
    const args = plainToClass(OptionsAddOnsItemFindManyArgs, request.query);
    return this.service.optionsAddOnsItems({
      ...args,
      select: {
        addOnName: true,
        addOnPrice: true,
        addonsImageUrl: true,
        containsEgg: true,
        createdAt: true,
        id: true,
        isVegetarian: true,

        optionsAddonsGroup: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OptionsAddOnsItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async optionsAddOnsItem(
    @common.Param() params: OptionsAddOnsItemWhereUniqueInput
  ): Promise<OptionsAddOnsItem | null> {
    const result = await this.service.optionsAddOnsItem({
      where: params,
      select: {
        addOnName: true,
        addOnPrice: true,
        addonsImageUrl: true,
        containsEgg: true,
        createdAt: true,
        id: true,
        isVegetarian: true,

        optionsAddonsGroup: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OptionsAddOnsItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateOptionsAddOnsItem(
    @common.Param() params: OptionsAddOnsItemWhereUniqueInput,
    @common.Body() data: OptionsAddOnsItemUpdateInput
  ): Promise<OptionsAddOnsItem | null> {
    try {
      return await this.service.updateOptionsAddOnsItem({
        where: params,
        data: {
          ...data,

          optionsAddonsGroup: {
            connect: data.optionsAddonsGroup,
          },
        },
        select: {
          addOnName: true,
          addOnPrice: true,
          addonsImageUrl: true,
          containsEgg: true,
          createdAt: true,
          id: true,
          isVegetarian: true,

          optionsAddonsGroup: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OptionsAddOnsItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteOptionsAddOnsItem(
    @common.Param() params: OptionsAddOnsItemWhereUniqueInput
  ): Promise<OptionsAddOnsItem | null> {
    try {
      return await this.service.deleteOptionsAddOnsItem({
        where: params,
        select: {
          addOnName: true,
          addOnPrice: true,
          addonsImageUrl: true,
          containsEgg: true,
          createdAt: true,
          id: true,
          isVegetarian: true,

          optionsAddonsGroup: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orderItemsAddons")
  @ApiNestedQuery(OrderItemsAddonFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrderItemsAddon",
    action: "read",
    possession: "any",
  })
  async findOrderItemsAddons(
    @common.Req() request: Request,
    @common.Param() params: OptionsAddOnsItemWhereUniqueInput
  ): Promise<OrderItemsAddon[]> {
    const query = plainToClass(OrderItemsAddonFindManyArgs, request.query);
    const results = await this.service.findOrderItemsAddons(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        optionsAddOnsItem: {
          select: {
            id: true,
          },
        },

        orderItems: {
          select: {
            id: true,
          },
        },

        quantity: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderItemsAddons")
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "update",
    possession: "any",
  })
  async connectOrderItemsAddons(
    @common.Param() params: OptionsAddOnsItemWhereUniqueInput,
    @common.Body() body: OrderItemsAddonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItemsAddons: {
        connect: body,
      },
    };
    await this.service.updateOptionsAddOnsItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderItemsAddons")
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "update",
    possession: "any",
  })
  async updateOrderItemsAddons(
    @common.Param() params: OptionsAddOnsItemWhereUniqueInput,
    @common.Body() body: OrderItemsAddonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItemsAddons: {
        set: body,
      },
    };
    await this.service.updateOptionsAddOnsItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderItemsAddons")
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "update",
    possession: "any",
  })
  async disconnectOrderItemsAddons(
    @common.Param() params: OptionsAddOnsItemWhereUniqueInput,
    @common.Body() body: OrderItemsAddonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItemsAddons: {
        disconnect: body,
      },
    };
    await this.service.updateOptionsAddOnsItem({
      where: params,
      data,
      select: { id: true },
    });
  }
}
