/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OptionsAddOnsItem } from "./OptionsAddOnsItem";
import { OptionsAddOnsItemCountArgs } from "./OptionsAddOnsItemCountArgs";
import { OptionsAddOnsItemFindManyArgs } from "./OptionsAddOnsItemFindManyArgs";
import { OptionsAddOnsItemFindUniqueArgs } from "./OptionsAddOnsItemFindUniqueArgs";
import { CreateOptionsAddOnsItemArgs } from "./CreateOptionsAddOnsItemArgs";
import { UpdateOptionsAddOnsItemArgs } from "./UpdateOptionsAddOnsItemArgs";
import { DeleteOptionsAddOnsItemArgs } from "./DeleteOptionsAddOnsItemArgs";
import { OrderItemsAddonFindManyArgs } from "../../orderItemsAddon/base/OrderItemsAddonFindManyArgs";
import { OrderItemsAddon } from "../../orderItemsAddon/base/OrderItemsAddon";
import { OptionsAddonsGroup } from "../../optionsAddonsGroup/base/OptionsAddonsGroup";
import { OptionsAddOnsItemService } from "../optionsAddOnsItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OptionsAddOnsItem)
export class OptionsAddOnsItemResolverBase {
  constructor(
    protected readonly service: OptionsAddOnsItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "read",
    possession: "any",
  })
  async _optionsAddOnsItemsMeta(
    @graphql.Args() args: OptionsAddOnsItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OptionsAddOnsItem])
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "read",
    possession: "any",
  })
  async optionsAddOnsItems(
    @graphql.Args() args: OptionsAddOnsItemFindManyArgs
  ): Promise<OptionsAddOnsItem[]> {
    return this.service.optionsAddOnsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OptionsAddOnsItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "read",
    possession: "own",
  })
  async optionsAddOnsItem(
    @graphql.Args() args: OptionsAddOnsItemFindUniqueArgs
  ): Promise<OptionsAddOnsItem | null> {
    const result = await this.service.optionsAddOnsItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OptionsAddOnsItem)
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "create",
    possession: "any",
  })
  async createOptionsAddOnsItem(
    @graphql.Args() args: CreateOptionsAddOnsItemArgs
  ): Promise<OptionsAddOnsItem> {
    return await this.service.createOptionsAddOnsItem({
      ...args,
      data: {
        ...args.data,

        optionsAddonsGroup: {
          connect: args.data.optionsAddonsGroup,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OptionsAddOnsItem)
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "update",
    possession: "any",
  })
  async updateOptionsAddOnsItem(
    @graphql.Args() args: UpdateOptionsAddOnsItemArgs
  ): Promise<OptionsAddOnsItem | null> {
    try {
      return await this.service.updateOptionsAddOnsItem({
        ...args,
        data: {
          ...args.data,

          optionsAddonsGroup: {
            connect: args.data.optionsAddonsGroup,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OptionsAddOnsItem)
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "delete",
    possession: "any",
  })
  async deleteOptionsAddOnsItem(
    @graphql.Args() args: DeleteOptionsAddOnsItemArgs
  ): Promise<OptionsAddOnsItem | null> {
    try {
      return await this.service.deleteOptionsAddOnsItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OrderItemsAddon], { name: "orderItemsAddons" })
  @nestAccessControl.UseRoles({
    resource: "OrderItemsAddon",
    action: "read",
    possession: "any",
  })
  async findOrderItemsAddons(
    @graphql.Parent() parent: OptionsAddOnsItem,
    @graphql.Args() args: OrderItemsAddonFindManyArgs
  ): Promise<OrderItemsAddon[]> {
    const results = await this.service.findOrderItemsAddons(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OptionsAddonsGroup, {
    nullable: true,
    name: "optionsAddonsGroup",
  })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "read",
    possession: "any",
  })
  async getOptionsAddonsGroup(
    @graphql.Parent() parent: OptionsAddOnsItem
  ): Promise<OptionsAddonsGroup | null> {
    const result = await this.service.getOptionsAddonsGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
