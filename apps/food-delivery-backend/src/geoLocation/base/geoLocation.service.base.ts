/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  GeoLocation as PrismaGeoLocation,
  Geofence as PrismaGeofence,
  Address as PrismaAddress,
} from "@prisma/client";

export class GeoLocationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GeoLocationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.geoLocation.count(args);
  }

  async geoLocations<T extends Prisma.GeoLocationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GeoLocationFindManyArgs>
  ): Promise<PrismaGeoLocation[]> {
    return this.prisma.geoLocation.findMany<Prisma.GeoLocationFindManyArgs>(
      args
    );
  }
  async geoLocation<T extends Prisma.GeoLocationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GeoLocationFindUniqueArgs>
  ): Promise<PrismaGeoLocation | null> {
    return this.prisma.geoLocation.findUnique(args);
  }
  async createGeoLocation<T extends Prisma.GeoLocationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GeoLocationCreateArgs>
  ): Promise<PrismaGeoLocation> {
    return this.prisma.geoLocation.create<T>(args);
  }
  async updateGeoLocation<T extends Prisma.GeoLocationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GeoLocationUpdateArgs>
  ): Promise<PrismaGeoLocation> {
    return this.prisma.geoLocation.update<T>(args);
  }
  async deleteGeoLocation<T extends Prisma.GeoLocationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GeoLocationDeleteArgs>
  ): Promise<PrismaGeoLocation> {
    return this.prisma.geoLocation.delete(args);
  }

  async findGeofences(
    parentId: string,
    args: Prisma.GeofenceFindManyArgs
  ): Promise<PrismaGeofence[]> {
    return this.prisma.geoLocation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .geofences(args);
  }

  async getAddresses(parentId: string): Promise<PrismaAddress | null> {
    return this.prisma.geoLocation
      .findUnique({
        where: { id: parentId },
      })
      .addresses();
  }
}
