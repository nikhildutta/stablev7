/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Geofence } from "./Geofence";
import { GeofenceCountArgs } from "./GeofenceCountArgs";
import { GeofenceFindManyArgs } from "./GeofenceFindManyArgs";
import { GeofenceFindUniqueArgs } from "./GeofenceFindUniqueArgs";
import { CreateGeofenceArgs } from "./CreateGeofenceArgs";
import { UpdateGeofenceArgs } from "./UpdateGeofenceArgs";
import { DeleteGeofenceArgs } from "./DeleteGeofenceArgs";
import { GeoLocation } from "../../geoLocation/base/GeoLocation";
import { GeofenceService } from "../geofence.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Geofence)
export class GeofenceResolverBase {
  constructor(
    protected readonly service: GeofenceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Geofence",
    action: "read",
    possession: "any",
  })
  async _geofencesMeta(
    @graphql.Args() args: GeofenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Geofence])
  @nestAccessControl.UseRoles({
    resource: "Geofence",
    action: "read",
    possession: "any",
  })
  async geofences(
    @graphql.Args() args: GeofenceFindManyArgs
  ): Promise<Geofence[]> {
    return this.service.geofences(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Geofence, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Geofence",
    action: "read",
    possession: "own",
  })
  async geofence(
    @graphql.Args() args: GeofenceFindUniqueArgs
  ): Promise<Geofence | null> {
    const result = await this.service.geofence(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Geofence)
  @nestAccessControl.UseRoles({
    resource: "Geofence",
    action: "create",
    possession: "any",
  })
  async createGeofence(
    @graphql.Args() args: CreateGeofenceArgs
  ): Promise<Geofence> {
    return await this.service.createGeofence({
      ...args,
      data: {
        ...args.data,

        geoLocations: {
          connect: args.data.geoLocations,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Geofence)
  @nestAccessControl.UseRoles({
    resource: "Geofence",
    action: "update",
    possession: "any",
  })
  async updateGeofence(
    @graphql.Args() args: UpdateGeofenceArgs
  ): Promise<Geofence | null> {
    try {
      return await this.service.updateGeofence({
        ...args,
        data: {
          ...args.data,

          geoLocations: {
            connect: args.data.geoLocations,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Geofence)
  @nestAccessControl.UseRoles({
    resource: "Geofence",
    action: "delete",
    possession: "any",
  })
  async deleteGeofence(
    @graphql.Args() args: DeleteGeofenceArgs
  ): Promise<Geofence | null> {
    try {
      return await this.service.deleteGeofence(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => GeoLocation, {
    nullable: true,
    name: "geoLocations",
  })
  @nestAccessControl.UseRoles({
    resource: "GeoLocation",
    action: "read",
    possession: "any",
  })
  async getGeoLocations(
    @graphql.Parent() parent: Geofence
  ): Promise<GeoLocation | null> {
    const result = await this.service.getGeoLocations(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
