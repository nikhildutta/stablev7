/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FavouriteMenuItem } from "./FavouriteMenuItem";
import { FavouriteMenuItemCountArgs } from "./FavouriteMenuItemCountArgs";
import { FavouriteMenuItemFindManyArgs } from "./FavouriteMenuItemFindManyArgs";
import { FavouriteMenuItemFindUniqueArgs } from "./FavouriteMenuItemFindUniqueArgs";
import { CreateFavouriteMenuItemArgs } from "./CreateFavouriteMenuItemArgs";
import { UpdateFavouriteMenuItemArgs } from "./UpdateFavouriteMenuItemArgs";
import { DeleteFavouriteMenuItemArgs } from "./DeleteFavouriteMenuItemArgs";
import { Favourite } from "../../favourite/base/Favourite";
import { MenuItem } from "../../menuItem/base/MenuItem";
import { FavouriteMenuItemService } from "../favouriteMenuItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FavouriteMenuItem)
export class FavouriteMenuItemResolverBase {
  constructor(
    protected readonly service: FavouriteMenuItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FavouriteMenuItem",
    action: "read",
    possession: "any",
  })
  async _favouriteMenuItemsMeta(
    @graphql.Args() args: FavouriteMenuItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FavouriteMenuItem])
  @nestAccessControl.UseRoles({
    resource: "FavouriteMenuItem",
    action: "read",
    possession: "any",
  })
  async favouriteMenuItems(
    @graphql.Args() args: FavouriteMenuItemFindManyArgs
  ): Promise<FavouriteMenuItem[]> {
    return this.service.favouriteMenuItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FavouriteMenuItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FavouriteMenuItem",
    action: "read",
    possession: "own",
  })
  async favouriteMenuItem(
    @graphql.Args() args: FavouriteMenuItemFindUniqueArgs
  ): Promise<FavouriteMenuItem | null> {
    const result = await this.service.favouriteMenuItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FavouriteMenuItem)
  @nestAccessControl.UseRoles({
    resource: "FavouriteMenuItem",
    action: "create",
    possession: "any",
  })
  async createFavouriteMenuItem(
    @graphql.Args() args: CreateFavouriteMenuItemArgs
  ): Promise<FavouriteMenuItem> {
    return await this.service.createFavouriteMenuItem({
      ...args,
      data: {
        ...args.data,

        favourites: {
          connect: args.data.favourites,
        },

        menuItems: {
          connect: args.data.menuItems,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FavouriteMenuItem)
  @nestAccessControl.UseRoles({
    resource: "FavouriteMenuItem",
    action: "update",
    possession: "any",
  })
  async updateFavouriteMenuItem(
    @graphql.Args() args: UpdateFavouriteMenuItemArgs
  ): Promise<FavouriteMenuItem | null> {
    try {
      return await this.service.updateFavouriteMenuItem({
        ...args,
        data: {
          ...args.data,

          favourites: {
            connect: args.data.favourites,
          },

          menuItems: {
            connect: args.data.menuItems,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FavouriteMenuItem)
  @nestAccessControl.UseRoles({
    resource: "FavouriteMenuItem",
    action: "delete",
    possession: "any",
  })
  async deleteFavouriteMenuItem(
    @graphql.Args() args: DeleteFavouriteMenuItemArgs
  ): Promise<FavouriteMenuItem | null> {
    try {
      return await this.service.deleteFavouriteMenuItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Favourite, {
    nullable: true,
    name: "favourites",
  })
  @nestAccessControl.UseRoles({
    resource: "Favourite",
    action: "read",
    possession: "any",
  })
  async getFavourites(
    @graphql.Parent() parent: FavouriteMenuItem
  ): Promise<Favourite | null> {
    const result = await this.service.getFavourites(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MenuItem, {
    nullable: true,
    name: "menuItems",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  async getMenuItems(
    @graphql.Parent() parent: FavouriteMenuItem
  ): Promise<MenuItem | null> {
    const result = await this.service.getMenuItems(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
