/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MenuItemsOptionsGroup } from "./MenuItemsOptionsGroup";
import { MenuItemsOptionsGroupCountArgs } from "./MenuItemsOptionsGroupCountArgs";
import { MenuItemsOptionsGroupFindManyArgs } from "./MenuItemsOptionsGroupFindManyArgs";
import { MenuItemsOptionsGroupFindUniqueArgs } from "./MenuItemsOptionsGroupFindUniqueArgs";
import { CreateMenuItemsOptionsGroupArgs } from "./CreateMenuItemsOptionsGroupArgs";
import { UpdateMenuItemsOptionsGroupArgs } from "./UpdateMenuItemsOptionsGroupArgs";
import { DeleteMenuItemsOptionsGroupArgs } from "./DeleteMenuItemsOptionsGroupArgs";
import { MenuItemOptionFindManyArgs } from "../../menuItemOption/base/MenuItemOptionFindManyArgs";
import { MenuItemOption } from "../../menuItemOption/base/MenuItemOption";
import { MenuItem } from "../../menuItem/base/MenuItem";
import { MenuItemsOptionsGroupService } from "../menuItemsOptionsGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MenuItemsOptionsGroup)
export class MenuItemsOptionsGroupResolverBase {
  constructor(
    protected readonly service: MenuItemsOptionsGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "read",
    possession: "any",
  })
  async _menuItemsOptionsGroupsMeta(
    @graphql.Args() args: MenuItemsOptionsGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MenuItemsOptionsGroup])
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "read",
    possession: "any",
  })
  async menuItemsOptionsGroups(
    @graphql.Args() args: MenuItemsOptionsGroupFindManyArgs
  ): Promise<MenuItemsOptionsGroup[]> {
    return this.service.menuItemsOptionsGroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MenuItemsOptionsGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "read",
    possession: "own",
  })
  async menuItemsOptionsGroup(
    @graphql.Args() args: MenuItemsOptionsGroupFindUniqueArgs
  ): Promise<MenuItemsOptionsGroup | null> {
    const result = await this.service.menuItemsOptionsGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuItemsOptionsGroup)
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "create",
    possession: "any",
  })
  async createMenuItemsOptionsGroup(
    @graphql.Args() args: CreateMenuItemsOptionsGroupArgs
  ): Promise<MenuItemsOptionsGroup> {
    return await this.service.createMenuItemsOptionsGroup({
      ...args,
      data: {
        ...args.data,

        menuItems: {
          connect: args.data.menuItems,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuItemsOptionsGroup)
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "update",
    possession: "any",
  })
  async updateMenuItemsOptionsGroup(
    @graphql.Args() args: UpdateMenuItemsOptionsGroupArgs
  ): Promise<MenuItemsOptionsGroup | null> {
    try {
      return await this.service.updateMenuItemsOptionsGroup({
        ...args,
        data: {
          ...args.data,

          menuItems: {
            connect: args.data.menuItems,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MenuItemsOptionsGroup)
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "delete",
    possession: "any",
  })
  async deleteMenuItemsOptionsGroup(
    @graphql.Args() args: DeleteMenuItemsOptionsGroupArgs
  ): Promise<MenuItemsOptionsGroup | null> {
    try {
      return await this.service.deleteMenuItemsOptionsGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MenuItemOption], { name: "menuItemOptions" })
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "read",
    possession: "any",
  })
  async findMenuItemOptions(
    @graphql.Parent() parent: MenuItemsOptionsGroup,
    @graphql.Args() args: MenuItemOptionFindManyArgs
  ): Promise<MenuItemOption[]> {
    const results = await this.service.findMenuItemOptions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MenuItem, {
    nullable: true,
    name: "menuItems",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  async getMenuItems(
    @graphql.Parent() parent: MenuItemsOptionsGroup
  ): Promise<MenuItem | null> {
    const result = await this.service.getMenuItems(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
