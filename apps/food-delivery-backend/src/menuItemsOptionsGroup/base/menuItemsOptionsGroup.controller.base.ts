/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MenuItemsOptionsGroupService } from "../menuItemsOptionsGroup.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MenuItemsOptionsGroupCreateInput } from "./MenuItemsOptionsGroupCreateInput";
import { MenuItemsOptionsGroup } from "./MenuItemsOptionsGroup";
import { MenuItemsOptionsGroupFindManyArgs } from "./MenuItemsOptionsGroupFindManyArgs";
import { MenuItemsOptionsGroupWhereUniqueInput } from "./MenuItemsOptionsGroupWhereUniqueInput";
import { MenuItemsOptionsGroupUpdateInput } from "./MenuItemsOptionsGroupUpdateInput";
import { MenuItemOptionFindManyArgs } from "../../menuItemOption/base/MenuItemOptionFindManyArgs";
import { MenuItemOption } from "../../menuItemOption/base/MenuItemOption";
import { MenuItemOptionWhereUniqueInput } from "../../menuItemOption/base/MenuItemOptionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MenuItemsOptionsGroupControllerBase {
  constructor(
    protected readonly service: MenuItemsOptionsGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MenuItemsOptionsGroup })
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMenuItemsOptionsGroup(
    @common.Body() data: MenuItemsOptionsGroupCreateInput
  ): Promise<MenuItemsOptionsGroup> {
    return await this.service.createMenuItemsOptionsGroup({
      data: {
        ...data,

        menuItems: {
          connect: data.menuItems,
        },
      },
      select: {
        createdAt: true,
        id: true,
        lowerLimit: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        optionGroupDescription: true,
        optionGroupName: true,
        updatedAt: true,
        upperLimit: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MenuItemsOptionsGroup] })
  @ApiNestedQuery(MenuItemsOptionsGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async menuItemsOptionsGroups(
    @common.Req() request: Request
  ): Promise<MenuItemsOptionsGroup[]> {
    const args = plainToClass(MenuItemsOptionsGroupFindManyArgs, request.query);
    return this.service.menuItemsOptionsGroups({
      ...args,
      select: {
        createdAt: true,
        id: true,
        lowerLimit: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        optionGroupDescription: true,
        optionGroupName: true,
        updatedAt: true,
        upperLimit: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MenuItemsOptionsGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async menuItemsOptionsGroup(
    @common.Param() params: MenuItemsOptionsGroupWhereUniqueInput
  ): Promise<MenuItemsOptionsGroup | null> {
    const result = await this.service.menuItemsOptionsGroup({
      where: params,
      select: {
        createdAt: true,
        id: true,
        lowerLimit: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        optionGroupDescription: true,
        optionGroupName: true,
        updatedAt: true,
        upperLimit: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MenuItemsOptionsGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMenuItemsOptionsGroup(
    @common.Param() params: MenuItemsOptionsGroupWhereUniqueInput,
    @common.Body() data: MenuItemsOptionsGroupUpdateInput
  ): Promise<MenuItemsOptionsGroup | null> {
    try {
      return await this.service.updateMenuItemsOptionsGroup({
        where: params,
        data: {
          ...data,

          menuItems: {
            connect: data.menuItems,
          },
        },
        select: {
          createdAt: true,
          id: true,
          lowerLimit: true,

          menuItems: {
            select: {
              id: true,
            },
          },

          optionGroupDescription: true,
          optionGroupName: true,
          updatedAt: true,
          upperLimit: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MenuItemsOptionsGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMenuItemsOptionsGroup(
    @common.Param() params: MenuItemsOptionsGroupWhereUniqueInput
  ): Promise<MenuItemsOptionsGroup | null> {
    try {
      return await this.service.deleteMenuItemsOptionsGroup({
        where: params,
        select: {
          createdAt: true,
          id: true,
          lowerLimit: true,

          menuItems: {
            select: {
              id: true,
            },
          },

          optionGroupDescription: true,
          optionGroupName: true,
          updatedAt: true,
          upperLimit: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/menuItemOptions")
  @ApiNestedQuery(MenuItemOptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "read",
    possession: "any",
  })
  async findMenuItemOptions(
    @common.Req() request: Request,
    @common.Param() params: MenuItemsOptionsGroupWhereUniqueInput
  ): Promise<MenuItemOption[]> {
    const query = plainToClass(MenuItemOptionFindManyArgs, request.query);
    const results = await this.service.findMenuItemOptions(params.id, {
      ...query,
      select: {
        additionalPrice: true,
        createdAt: true,
        description: true,
        id: true,
        isDefault: true,

        menuItemsOptionsGroups: {
          select: {
            id: true,
          },
        },

        name: true,
        optionImageUrl: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/menuItemOptions")
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "update",
    possession: "any",
  })
  async connectMenuItemOptions(
    @common.Param() params: MenuItemsOptionsGroupWhereUniqueInput,
    @common.Body() body: MenuItemOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemOptions: {
        connect: body,
      },
    };
    await this.service.updateMenuItemsOptionsGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/menuItemOptions")
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "update",
    possession: "any",
  })
  async updateMenuItemOptions(
    @common.Param() params: MenuItemsOptionsGroupWhereUniqueInput,
    @common.Body() body: MenuItemOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemOptions: {
        set: body,
      },
    };
    await this.service.updateMenuItemsOptionsGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/menuItemOptions")
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "update",
    possession: "any",
  })
  async disconnectMenuItemOptions(
    @common.Param() params: MenuItemsOptionsGroupWhereUniqueInput,
    @common.Body() body: MenuItemOptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemOptions: {
        disconnect: body,
      },
    };
    await this.service.updateMenuItemsOptionsGroup({
      where: params,
      data,
      select: { id: true },
    });
  }
}
