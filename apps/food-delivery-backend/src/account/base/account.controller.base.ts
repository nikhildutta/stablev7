/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AccountService } from "../account.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AccountCreateInput } from "./AccountCreateInput";
import { Account } from "./Account";
import { AccountFindManyArgs } from "./AccountFindManyArgs";
import { AccountWhereUniqueInput } from "./AccountWhereUniqueInput";
import { AccountUpdateInput } from "./AccountUpdateInput";
import { AccountRestaurantLookupFindManyArgs } from "../../accountRestaurantLookup/base/AccountRestaurantLookupFindManyArgs";
import { AccountRestaurantLookup } from "../../accountRestaurantLookup/base/AccountRestaurantLookup";
import { AccountRestaurantLookupWhereUniqueInput } from "../../accountRestaurantLookup/base/AccountRestaurantLookupWhereUniqueInput";
import { AccountsAddressMapFindManyArgs } from "../../accountsAddressMap/base/AccountsAddressMapFindManyArgs";
import { AccountsAddressMap } from "../../accountsAddressMap/base/AccountsAddressMap";
import { AccountsAddressMapWhereUniqueInput } from "../../accountsAddressMap/base/AccountsAddressMapWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AccountControllerBase {
  constructor(
    protected readonly service: AccountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Account })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAccount(
    @common.Body() data: AccountCreateInput
  ): Promise<Account> {
    return await this.service.createAccount({
      data: data,
      select: {
        businessname: true,
        city: true,
        createdAt: true,
        deliveryStateCode: true,
        email: true,
        fssaiLicenseNumber: true,
        fssaiLicenseUrl: true,
        fssaiValidFrom: true,
        fssaiValidTo: true,
        id: true,
        inceptiondate: true,
        isFssaiLicenseVerified: true,
        ispaid: true,
        mobilenumber: true,
        pin: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Account] })
  @ApiNestedQuery(AccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async accounts(@common.Req() request: Request): Promise<Account[]> {
    const args = plainToClass(AccountFindManyArgs, request.query);
    return this.service.accounts({
      ...args,
      select: {
        businessname: true,
        city: true,
        createdAt: true,
        deliveryStateCode: true,
        email: true,
        fssaiLicenseNumber: true,
        fssaiLicenseUrl: true,
        fssaiValidFrom: true,
        fssaiValidTo: true,
        id: true,
        inceptiondate: true,
        isFssaiLicenseVerified: true,
        ispaid: true,
        mobilenumber: true,
        pin: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Account })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async account(
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<Account | null> {
    const result = await this.service.account({
      where: params,
      select: {
        businessname: true,
        city: true,
        createdAt: true,
        deliveryStateCode: true,
        email: true,
        fssaiLicenseNumber: true,
        fssaiLicenseUrl: true,
        fssaiValidFrom: true,
        fssaiValidTo: true,
        id: true,
        inceptiondate: true,
        isFssaiLicenseVerified: true,
        ispaid: true,
        mobilenumber: true,
        pin: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Account })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAccount(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() data: AccountUpdateInput
  ): Promise<Account | null> {
    try {
      return await this.service.updateAccount({
        where: params,
        data: data,
        select: {
          businessname: true,
          city: true,
          createdAt: true,
          deliveryStateCode: true,
          email: true,
          fssaiLicenseNumber: true,
          fssaiLicenseUrl: true,
          fssaiValidFrom: true,
          fssaiValidTo: true,
          id: true,
          inceptiondate: true,
          isFssaiLicenseVerified: true,
          ispaid: true,
          mobilenumber: true,
          pin: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Account })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAccount(
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<Account | null> {
    try {
      return await this.service.deleteAccount({
        where: params,
        select: {
          businessname: true,
          city: true,
          createdAt: true,
          deliveryStateCode: true,
          email: true,
          fssaiLicenseNumber: true,
          fssaiLicenseUrl: true,
          fssaiValidFrom: true,
          fssaiValidTo: true,
          id: true,
          inceptiondate: true,
          isFssaiLicenseVerified: true,
          ispaid: true,
          mobilenumber: true,
          pin: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/accountRestaurantLookup")
  @ApiNestedQuery(AccountRestaurantLookupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AccountRestaurantLookup",
    action: "read",
    possession: "any",
  })
  async findAccountRestaurantLookup(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<AccountRestaurantLookup[]> {
    const query = plainToClass(
      AccountRestaurantLookupFindManyArgs,
      request.query
    );
    const results = await this.service.findAccountRestaurantLookup(params.id, {
      ...query,
      select: {
        accounts: {
          select: {
            id: true,
          },
        },

        id: true,

        restaurants: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accountRestaurantLookup")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectAccountRestaurantLookup(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: AccountRestaurantLookupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountRestaurantLookup: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accountRestaurantLookup")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updateAccountRestaurantLookup(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: AccountRestaurantLookupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountRestaurantLookup: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accountRestaurantLookup")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectAccountRestaurantLookup(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: AccountRestaurantLookupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountRestaurantLookup: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/accountsAddressMap")
  @ApiNestedQuery(AccountsAddressMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AccountsAddressMap",
    action: "read",
    possession: "any",
  })
  async findAccountsAddressMap(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<AccountsAddressMap[]> {
    const query = plainToClass(AccountsAddressMapFindManyArgs, request.query);
    const results = await this.service.findAccountsAddressMap(params.id, {
      ...query,
      select: {
        accounts: {
          select: {
            id: true,
          },
        },

        addresses: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accountsAddressMap")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectAccountsAddressMap(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: AccountsAddressMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountsAddressMap: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accountsAddressMap")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updateAccountsAddressMap(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: AccountsAddressMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountsAddressMap: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accountsAddressMap")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectAccountsAddressMap(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: AccountsAddressMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountsAddressMap: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }
}
