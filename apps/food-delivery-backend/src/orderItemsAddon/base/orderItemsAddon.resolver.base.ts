/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OrderItemsAddon } from "./OrderItemsAddon";
import { OrderItemsAddonCountArgs } from "./OrderItemsAddonCountArgs";
import { OrderItemsAddonFindManyArgs } from "./OrderItemsAddonFindManyArgs";
import { OrderItemsAddonFindUniqueArgs } from "./OrderItemsAddonFindUniqueArgs";
import { CreateOrderItemsAddonArgs } from "./CreateOrderItemsAddonArgs";
import { UpdateOrderItemsAddonArgs } from "./UpdateOrderItemsAddonArgs";
import { DeleteOrderItemsAddonArgs } from "./DeleteOrderItemsAddonArgs";
import { OptionsAddOnsItem } from "../../optionsAddOnsItem/base/OptionsAddOnsItem";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { OrderItemsAddonService } from "../orderItemsAddon.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OrderItemsAddon)
export class OrderItemsAddonResolverBase {
  constructor(
    protected readonly service: OrderItemsAddonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OrderItemsAddon",
    action: "read",
    possession: "any",
  })
  async _orderItemsAddonsMeta(
    @graphql.Args() args: OrderItemsAddonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OrderItemsAddon])
  @nestAccessControl.UseRoles({
    resource: "OrderItemsAddon",
    action: "read",
    possession: "any",
  })
  async orderItemsAddons(
    @graphql.Args() args: OrderItemsAddonFindManyArgs
  ): Promise<OrderItemsAddon[]> {
    return this.service.orderItemsAddons(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OrderItemsAddon, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OrderItemsAddon",
    action: "read",
    possession: "own",
  })
  async orderItemsAddon(
    @graphql.Args() args: OrderItemsAddonFindUniqueArgs
  ): Promise<OrderItemsAddon | null> {
    const result = await this.service.orderItemsAddon(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderItemsAddon)
  @nestAccessControl.UseRoles({
    resource: "OrderItemsAddon",
    action: "create",
    possession: "any",
  })
  async createOrderItemsAddon(
    @graphql.Args() args: CreateOrderItemsAddonArgs
  ): Promise<OrderItemsAddon> {
    return await this.service.createOrderItemsAddon({
      ...args,
      data: {
        ...args.data,

        optionsAddOnsItem: {
          connect: args.data.optionsAddOnsItem,
        },

        orderItems: {
          connect: args.data.orderItems,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderItemsAddon)
  @nestAccessControl.UseRoles({
    resource: "OrderItemsAddon",
    action: "update",
    possession: "any",
  })
  async updateOrderItemsAddon(
    @graphql.Args() args: UpdateOrderItemsAddonArgs
  ): Promise<OrderItemsAddon | null> {
    try {
      return await this.service.updateOrderItemsAddon({
        ...args,
        data: {
          ...args.data,

          optionsAddOnsItem: {
            connect: args.data.optionsAddOnsItem,
          },

          orderItems: {
            connect: args.data.orderItems,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrderItemsAddon)
  @nestAccessControl.UseRoles({
    resource: "OrderItemsAddon",
    action: "delete",
    possession: "any",
  })
  async deleteOrderItemsAddon(
    @graphql.Args() args: DeleteOrderItemsAddonArgs
  ): Promise<OrderItemsAddon | null> {
    try {
      return await this.service.deleteOrderItemsAddon(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OptionsAddOnsItem, {
    nullable: true,
    name: "optionsAddOnsItem",
  })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "read",
    possession: "any",
  })
  async getOptionsAddOnsItem(
    @graphql.Parent() parent: OrderItemsAddon
  ): Promise<OptionsAddOnsItem | null> {
    const result = await this.service.getOptionsAddOnsItem(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OrderItem, {
    nullable: true,
    name: "orderItems",
  })
  @nestAccessControl.UseRoles({
    resource: "OrderItem",
    action: "read",
    possession: "any",
  })
  async getOrderItems(
    @graphql.Parent() parent: OrderItemsAddon
  ): Promise<OrderItem | null> {
    const result = await this.service.getOrderItems(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
