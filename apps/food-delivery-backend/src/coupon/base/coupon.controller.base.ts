/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CouponService } from "../coupon.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CouponCreateInput } from "./CouponCreateInput";
import { Coupon } from "./Coupon";
import { CouponFindManyArgs } from "./CouponFindManyArgs";
import { CouponWhereUniqueInput } from "./CouponWhereUniqueInput";
import { CouponUpdateInput } from "./CouponUpdateInput";
import { CouponRedemptionFindManyArgs } from "../../couponRedemption/base/CouponRedemptionFindManyArgs";
import { CouponRedemption } from "../../couponRedemption/base/CouponRedemption";
import { CouponRedemptionWhereUniqueInput } from "../../couponRedemption/base/CouponRedemptionWhereUniqueInput";
import { OrderHistoryFindManyArgs } from "../../orderHistory/base/OrderHistoryFindManyArgs";
import { OrderHistory } from "../../orderHistory/base/OrderHistory";
import { OrderHistoryWhereUniqueInput } from "../../orderHistory/base/OrderHistoryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CouponControllerBase {
  constructor(
    protected readonly service: CouponService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Coupon })
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCoupon(@common.Body() data: CouponCreateInput): Promise<Coupon> {
    return await this.service.createCoupon({
      data: {
        ...data,

        discount: {
          connect: data.discount,
        },
      },
      select: {
        code: true,
        createdAt: true,

        discount: {
          select: {
            id: true,
          },
        },

        expirationDate: true,
        id: true,
        isActive: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Coupon] })
  @ApiNestedQuery(CouponFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async coupons(@common.Req() request: Request): Promise<Coupon[]> {
    const args = plainToClass(CouponFindManyArgs, request.query);
    return this.service.coupons({
      ...args,
      select: {
        code: true,
        createdAt: true,

        discount: {
          select: {
            id: true,
          },
        },

        expirationDate: true,
        id: true,
        isActive: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Coupon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async coupon(
    @common.Param() params: CouponWhereUniqueInput
  ): Promise<Coupon | null> {
    const result = await this.service.coupon({
      where: params,
      select: {
        code: true,
        createdAt: true,

        discount: {
          select: {
            id: true,
          },
        },

        expirationDate: true,
        id: true,
        isActive: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Coupon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCoupon(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() data: CouponUpdateInput
  ): Promise<Coupon | null> {
    try {
      return await this.service.updateCoupon({
        where: params,
        data: {
          ...data,

          discount: {
            connect: data.discount,
          },
        },
        select: {
          code: true,
          createdAt: true,

          discount: {
            select: {
              id: true,
            },
          },

          expirationDate: true,
          id: true,
          isActive: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Coupon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCoupon(
    @common.Param() params: CouponWhereUniqueInput
  ): Promise<Coupon | null> {
    try {
      return await this.service.deleteCoupon({
        where: params,
        select: {
          code: true,
          createdAt: true,

          discount: {
            select: {
              id: true,
            },
          },

          expirationDate: true,
          id: true,
          isActive: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/couponRedemptions")
  @ApiNestedQuery(CouponRedemptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CouponRedemption",
    action: "read",
    possession: "any",
  })
  async findCouponRedemptions(
    @common.Req() request: Request,
    @common.Param() params: CouponWhereUniqueInput
  ): Promise<CouponRedemption[]> {
    const query = plainToClass(CouponRedemptionFindManyArgs, request.query);
    const results = await this.service.findCouponRedemptions(params.id, {
      ...query,
      select: {
        appUsers: {
          select: {
            id: true,
          },
        },

        coupons: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isRedeemed: true,
        redemptionDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/couponRedemptions")
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  async connectCouponRedemptions(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() body: CouponRedemptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      couponRedemptions: {
        connect: body,
      },
    };
    await this.service.updateCoupon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/couponRedemptions")
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  async updateCouponRedemptions(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() body: CouponRedemptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      couponRedemptions: {
        set: body,
      },
    };
    await this.service.updateCoupon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/couponRedemptions")
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  async disconnectCouponRedemptions(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() body: CouponRedemptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      couponRedemptions: {
        disconnect: body,
      },
    };
    await this.service.updateCoupon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orderHistory")
  @ApiNestedQuery(OrderHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "any",
  })
  async findOrderHistory(
    @common.Req() request: Request,
    @common.Param() params: CouponWhereUniqueInput
  ): Promise<OrderHistory[]> {
    const query = plainToClass(OrderHistoryFindManyArgs, request.query);
    const results = await this.service.findOrderHistory(params.id, {
      ...query,
      select: {
        addresses: {
          select: {
            id: true,
          },
        },

        appUsers: {
          select: {
            id: true,
          },
        },

        coupons: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deliveryTipsAmount: true,
        discountAmount: true,
        estimatedDeliveryTime: true,
        finalAmount: true,
        id: true,
        isCancelled: true,
        isFulfilled: true,
        isPaid: true,
        isRejected: true,
        orderDateTime: true,
        orderIdRef: true,
        order_type: true,
        packagingAmount: true,

        paymentMethods: {
          select: {
            id: true,
          },
        },

        preparationInstruction: true,
        preparationTime: true,
        rejectedBy: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        totalAmount: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderHistory")
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  async connectOrderHistory(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() body: OrderHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderHistory: {
        connect: body,
      },
    };
    await this.service.updateCoupon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderHistory")
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  async updateOrderHistory(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() body: OrderHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderHistory: {
        set: body,
      },
    };
    await this.service.updateCoupon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderHistory")
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "update",
    possession: "any",
  })
  async disconnectOrderHistory(
    @common.Param() params: CouponWhereUniqueInput,
    @common.Body() body: OrderHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderHistory: {
        disconnect: body,
      },
    };
    await this.service.updateCoupon({
      where: params,
      data,
      select: { id: true },
    });
  }
}
