/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OrdersHashtagsMap } from "./OrdersHashtagsMap";
import { OrdersHashtagsMapCountArgs } from "./OrdersHashtagsMapCountArgs";
import { OrdersHashtagsMapFindManyArgs } from "./OrdersHashtagsMapFindManyArgs";
import { OrdersHashtagsMapFindUniqueArgs } from "./OrdersHashtagsMapFindUniqueArgs";
import { CreateOrdersHashtagsMapArgs } from "./CreateOrdersHashtagsMapArgs";
import { UpdateOrdersHashtagsMapArgs } from "./UpdateOrdersHashtagsMapArgs";
import { DeleteOrdersHashtagsMapArgs } from "./DeleteOrdersHashtagsMapArgs";
import { Hashtag } from "../../hashtag/base/Hashtag";
import { OrderHistory } from "../../orderHistory/base/OrderHistory";
import { OrdersHashtagsMapService } from "../ordersHashtagsMap.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OrdersHashtagsMap)
export class OrdersHashtagsMapResolverBase {
  constructor(
    protected readonly service: OrdersHashtagsMapService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OrdersHashtagsMap",
    action: "read",
    possession: "any",
  })
  async _ordersHashtagsMapsMeta(
    @graphql.Args() args: OrdersHashtagsMapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OrdersHashtagsMap])
  @nestAccessControl.UseRoles({
    resource: "OrdersHashtagsMap",
    action: "read",
    possession: "any",
  })
  async ordersHashtagsMaps(
    @graphql.Args() args: OrdersHashtagsMapFindManyArgs
  ): Promise<OrdersHashtagsMap[]> {
    return this.service.ordersHashtagsMaps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OrdersHashtagsMap, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OrdersHashtagsMap",
    action: "read",
    possession: "own",
  })
  async ordersHashtagsMap(
    @graphql.Args() args: OrdersHashtagsMapFindUniqueArgs
  ): Promise<OrdersHashtagsMap | null> {
    const result = await this.service.ordersHashtagsMap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrdersHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "OrdersHashtagsMap",
    action: "create",
    possession: "any",
  })
  async createOrdersHashtagsMap(
    @graphql.Args() args: CreateOrdersHashtagsMapArgs
  ): Promise<OrdersHashtagsMap> {
    return await this.service.createOrdersHashtagsMap({
      ...args,
      data: {
        ...args.data,

        hashtags: {
          connect: args.data.hashtags,
        },

        orderHistory: {
          connect: args.data.orderHistory,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrdersHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "OrdersHashtagsMap",
    action: "update",
    possession: "any",
  })
  async updateOrdersHashtagsMap(
    @graphql.Args() args: UpdateOrdersHashtagsMapArgs
  ): Promise<OrdersHashtagsMap | null> {
    try {
      return await this.service.updateOrdersHashtagsMap({
        ...args,
        data: {
          ...args.data,

          hashtags: {
            connect: args.data.hashtags,
          },

          orderHistory: {
            connect: args.data.orderHistory,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrdersHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "OrdersHashtagsMap",
    action: "delete",
    possession: "any",
  })
  async deleteOrdersHashtagsMap(
    @graphql.Args() args: DeleteOrdersHashtagsMapArgs
  ): Promise<OrdersHashtagsMap | null> {
    try {
      return await this.service.deleteOrdersHashtagsMap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Hashtag, {
    nullable: true,
    name: "hashtags",
  })
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "read",
    possession: "any",
  })
  async getHashtags(
    @graphql.Parent() parent: OrdersHashtagsMap
  ): Promise<Hashtag | null> {
    const result = await this.service.getHashtags(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OrderHistory, {
    nullable: true,
    name: "orderHistory",
  })
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "any",
  })
  async getOrderHistory(
    @graphql.Parent() parent: OrdersHashtagsMap
  ): Promise<OrderHistory | null> {
    const result = await this.service.getOrderHistory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
