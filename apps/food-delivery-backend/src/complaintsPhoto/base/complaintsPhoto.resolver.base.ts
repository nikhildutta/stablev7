/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ComplaintsPhoto } from "./ComplaintsPhoto";
import { ComplaintsPhotoCountArgs } from "./ComplaintsPhotoCountArgs";
import { ComplaintsPhotoFindManyArgs } from "./ComplaintsPhotoFindManyArgs";
import { ComplaintsPhotoFindUniqueArgs } from "./ComplaintsPhotoFindUniqueArgs";
import { CreateComplaintsPhotoArgs } from "./CreateComplaintsPhotoArgs";
import { UpdateComplaintsPhotoArgs } from "./UpdateComplaintsPhotoArgs";
import { DeleteComplaintsPhotoArgs } from "./DeleteComplaintsPhotoArgs";
import { ComplaintsBook } from "../../complaintsBook/base/ComplaintsBook";
import { ComplaintsPhotoService } from "../complaintsPhoto.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ComplaintsPhoto)
export class ComplaintsPhotoResolverBase {
  constructor(
    protected readonly service: ComplaintsPhotoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ComplaintsPhoto",
    action: "read",
    possession: "any",
  })
  async _complaintsPhotosMeta(
    @graphql.Args() args: ComplaintsPhotoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ComplaintsPhoto])
  @nestAccessControl.UseRoles({
    resource: "ComplaintsPhoto",
    action: "read",
    possession: "any",
  })
  async complaintsPhotos(
    @graphql.Args() args: ComplaintsPhotoFindManyArgs
  ): Promise<ComplaintsPhoto[]> {
    return this.service.complaintsPhotos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ComplaintsPhoto, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ComplaintsPhoto",
    action: "read",
    possession: "own",
  })
  async complaintsPhoto(
    @graphql.Args() args: ComplaintsPhotoFindUniqueArgs
  ): Promise<ComplaintsPhoto | null> {
    const result = await this.service.complaintsPhoto(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ComplaintsPhoto)
  @nestAccessControl.UseRoles({
    resource: "ComplaintsPhoto",
    action: "create",
    possession: "any",
  })
  async createComplaintsPhoto(
    @graphql.Args() args: CreateComplaintsPhotoArgs
  ): Promise<ComplaintsPhoto> {
    return await this.service.createComplaintsPhoto({
      ...args,
      data: {
        ...args.data,

        complaintsBook: {
          connect: args.data.complaintsBook,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ComplaintsPhoto)
  @nestAccessControl.UseRoles({
    resource: "ComplaintsPhoto",
    action: "update",
    possession: "any",
  })
  async updateComplaintsPhoto(
    @graphql.Args() args: UpdateComplaintsPhotoArgs
  ): Promise<ComplaintsPhoto | null> {
    try {
      return await this.service.updateComplaintsPhoto({
        ...args,
        data: {
          ...args.data,

          complaintsBook: {
            connect: args.data.complaintsBook,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ComplaintsPhoto)
  @nestAccessControl.UseRoles({
    resource: "ComplaintsPhoto",
    action: "delete",
    possession: "any",
  })
  async deleteComplaintsPhoto(
    @graphql.Args() args: DeleteComplaintsPhotoArgs
  ): Promise<ComplaintsPhoto | null> {
    try {
      return await this.service.deleteComplaintsPhoto(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ComplaintsBook, {
    nullable: true,
    name: "complaintsBook",
  })
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "read",
    possession: "any",
  })
  async getComplaintsBook(
    @graphql.Parent() parent: ComplaintsPhoto
  ): Promise<ComplaintsBook | null> {
    const result = await this.service.getComplaintsBook(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
