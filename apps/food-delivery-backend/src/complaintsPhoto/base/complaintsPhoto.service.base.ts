/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ComplaintsPhoto as PrismaComplaintsPhoto,
  ComplaintsBook as PrismaComplaintsBook,
} from "@prisma/client";

export class ComplaintsPhotoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ComplaintsPhotoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.complaintsPhoto.count(args);
  }

  async complaintsPhotos<T extends Prisma.ComplaintsPhotoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsPhotoFindManyArgs>
  ): Promise<PrismaComplaintsPhoto[]> {
    return this.prisma.complaintsPhoto.findMany<Prisma.ComplaintsPhotoFindManyArgs>(
      args
    );
  }
  async complaintsPhoto<T extends Prisma.ComplaintsPhotoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsPhotoFindUniqueArgs>
  ): Promise<PrismaComplaintsPhoto | null> {
    return this.prisma.complaintsPhoto.findUnique(args);
  }
  async createComplaintsPhoto<T extends Prisma.ComplaintsPhotoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsPhotoCreateArgs>
  ): Promise<PrismaComplaintsPhoto> {
    return this.prisma.complaintsPhoto.create<T>(args);
  }
  async updateComplaintsPhoto<T extends Prisma.ComplaintsPhotoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsPhotoUpdateArgs>
  ): Promise<PrismaComplaintsPhoto> {
    return this.prisma.complaintsPhoto.update<T>(args);
  }
  async deleteComplaintsPhoto<T extends Prisma.ComplaintsPhotoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsPhotoDeleteArgs>
  ): Promise<PrismaComplaintsPhoto> {
    return this.prisma.complaintsPhoto.delete(args);
  }

  async getComplaintsBook(
    parentId: string
  ): Promise<PrismaComplaintsBook | null> {
    return this.prisma.complaintsPhoto
      .findUnique({
        where: { id: parentId },
      })
      .complaintsBook();
  }
}
