/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserFeedback } from "./UserFeedback";
import { UserFeedbackCountArgs } from "./UserFeedbackCountArgs";
import { UserFeedbackFindManyArgs } from "./UserFeedbackFindManyArgs";
import { UserFeedbackFindUniqueArgs } from "./UserFeedbackFindUniqueArgs";
import { CreateUserFeedbackArgs } from "./CreateUserFeedbackArgs";
import { UpdateUserFeedbackArgs } from "./UpdateUserFeedbackArgs";
import { DeleteUserFeedbackArgs } from "./DeleteUserFeedbackArgs";
import { AppUser } from "../../appUser/base/AppUser";
import { UserFeedbackService } from "../userFeedback.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserFeedback)
export class UserFeedbackResolverBase {
  constructor(
    protected readonly service: UserFeedbackService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserFeedback",
    action: "read",
    possession: "any",
  })
  async _userFeedbacksMeta(
    @graphql.Args() args: UserFeedbackCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserFeedback])
  @nestAccessControl.UseRoles({
    resource: "UserFeedback",
    action: "read",
    possession: "any",
  })
  async userFeedbacks(
    @graphql.Args() args: UserFeedbackFindManyArgs
  ): Promise<UserFeedback[]> {
    return this.service.userFeedbacks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserFeedback, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserFeedback",
    action: "read",
    possession: "own",
  })
  async userFeedback(
    @graphql.Args() args: UserFeedbackFindUniqueArgs
  ): Promise<UserFeedback | null> {
    const result = await this.service.userFeedback(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserFeedback)
  @nestAccessControl.UseRoles({
    resource: "UserFeedback",
    action: "create",
    possession: "any",
  })
  async createUserFeedback(
    @graphql.Args() args: CreateUserFeedbackArgs
  ): Promise<UserFeedback> {
    return await this.service.createUserFeedback({
      ...args,
      data: {
        ...args.data,

        appUsers: {
          connect: args.data.appUsers,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserFeedback)
  @nestAccessControl.UseRoles({
    resource: "UserFeedback",
    action: "update",
    possession: "any",
  })
  async updateUserFeedback(
    @graphql.Args() args: UpdateUserFeedbackArgs
  ): Promise<UserFeedback | null> {
    try {
      return await this.service.updateUserFeedback({
        ...args,
        data: {
          ...args.data,

          appUsers: {
            connect: args.data.appUsers,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserFeedback)
  @nestAccessControl.UseRoles({
    resource: "UserFeedback",
    action: "delete",
    possession: "any",
  })
  async deleteUserFeedback(
    @graphql.Args() args: DeleteUserFeedbackArgs
  ): Promise<UserFeedback | null> {
    try {
      return await this.service.deleteUserFeedback(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUsers",
  })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async getAppUsers(
    @graphql.Parent() parent: UserFeedback
  ): Promise<AppUser | null> {
    const result = await this.service.getAppUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
