/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PaymentsBook as PrismaPaymentsBook,
  ComplaintsBook as PrismaComplaintsBook,
  OrderHistory as PrismaOrderHistory,
  PaymentMethod as PrismaPaymentMethod,
} from "@prisma/client";

export class PaymentsBookServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaymentsBookCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paymentsBook.count(args);
  }

  async paymentsBooks<T extends Prisma.PaymentsBookFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentsBookFindManyArgs>
  ): Promise<PrismaPaymentsBook[]> {
    return this.prisma.paymentsBook.findMany<Prisma.PaymentsBookFindManyArgs>(
      args
    );
  }
  async paymentsBook<T extends Prisma.PaymentsBookFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentsBookFindUniqueArgs>
  ): Promise<PrismaPaymentsBook | null> {
    return this.prisma.paymentsBook.findUnique(args);
  }
  async createPaymentsBook<T extends Prisma.PaymentsBookCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentsBookCreateArgs>
  ): Promise<PrismaPaymentsBook> {
    return this.prisma.paymentsBook.create<T>(args);
  }
  async updatePaymentsBook<T extends Prisma.PaymentsBookUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentsBookUpdateArgs>
  ): Promise<PrismaPaymentsBook> {
    return this.prisma.paymentsBook.update<T>(args);
  }
  async deletePaymentsBook<T extends Prisma.PaymentsBookDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PaymentsBookDeleteArgs>
  ): Promise<PrismaPaymentsBook> {
    return this.prisma.paymentsBook.delete(args);
  }

  async findComplaintsBook(
    parentId: string,
    args: Prisma.ComplaintsBookFindManyArgs
  ): Promise<PrismaComplaintsBook[]> {
    return this.prisma.paymentsBook
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .complaintsBook(args);
  }

  async getOrderHistory(parentId: string): Promise<PrismaOrderHistory | null> {
    return this.prisma.paymentsBook
      .findUnique({
        where: { id: parentId },
      })
      .orderHistory();
  }

  async getPaymentMethods(
    parentId: string
  ): Promise<PrismaPaymentMethod | null> {
    return this.prisma.paymentsBook
      .findUnique({
        where: { id: parentId },
      })
      .paymentMethods();
  }
}
