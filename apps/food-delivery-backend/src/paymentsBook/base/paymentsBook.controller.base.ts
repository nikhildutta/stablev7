/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PaymentsBookService } from "../paymentsBook.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PaymentsBookCreateInput } from "./PaymentsBookCreateInput";
import { PaymentsBook } from "./PaymentsBook";
import { PaymentsBookFindManyArgs } from "./PaymentsBookFindManyArgs";
import { PaymentsBookWhereUniqueInput } from "./PaymentsBookWhereUniqueInput";
import { PaymentsBookUpdateInput } from "./PaymentsBookUpdateInput";
import { ComplaintsBookFindManyArgs } from "../../complaintsBook/base/ComplaintsBookFindManyArgs";
import { ComplaintsBook } from "../../complaintsBook/base/ComplaintsBook";
import { ComplaintsBookWhereUniqueInput } from "../../complaintsBook/base/ComplaintsBookWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PaymentsBookControllerBase {
  constructor(
    protected readonly service: PaymentsBookService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentsBook })
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPaymentsBook(
    @common.Body() data: PaymentsBookCreateInput
  ): Promise<PaymentsBook> {
    return await this.service.createPaymentsBook({
      data: {
        ...data,

        orderHistory: {
          connect: data.orderHistory,
        },

        paymentMethods: {
          connect: data.paymentMethods,
        },
      },
      select: {
        createdAt: true,
        errorCode: true,
        id: true,

        orderHistory: {
          select: {
            id: true,
          },
        },

        paymentAmount: true,
        paymentCurrency: true,
        paymentDate: true,

        paymentMethods: {
          select: {
            id: true,
          },
        },

        paymentStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentsBook] })
  @ApiNestedQuery(PaymentsBookFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paymentsBooks(@common.Req() request: Request): Promise<PaymentsBook[]> {
    const args = plainToClass(PaymentsBookFindManyArgs, request.query);
    return this.service.paymentsBooks({
      ...args,
      select: {
        createdAt: true,
        errorCode: true,
        id: true,

        orderHistory: {
          select: {
            id: true,
          },
        },

        paymentAmount: true,
        paymentCurrency: true,
        paymentDate: true,

        paymentMethods: {
          select: {
            id: true,
          },
        },

        paymentStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentsBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paymentsBook(
    @common.Param() params: PaymentsBookWhereUniqueInput
  ): Promise<PaymentsBook | null> {
    const result = await this.service.paymentsBook({
      where: params,
      select: {
        createdAt: true,
        errorCode: true,
        id: true,

        orderHistory: {
          select: {
            id: true,
          },
        },

        paymentAmount: true,
        paymentCurrency: true,
        paymentDate: true,

        paymentMethods: {
          select: {
            id: true,
          },
        },

        paymentStatus: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentsBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePaymentsBook(
    @common.Param() params: PaymentsBookWhereUniqueInput,
    @common.Body() data: PaymentsBookUpdateInput
  ): Promise<PaymentsBook | null> {
    try {
      return await this.service.updatePaymentsBook({
        where: params,
        data: {
          ...data,

          orderHistory: {
            connect: data.orderHistory,
          },

          paymentMethods: {
            connect: data.paymentMethods,
          },
        },
        select: {
          createdAt: true,
          errorCode: true,
          id: true,

          orderHistory: {
            select: {
              id: true,
            },
          },

          paymentAmount: true,
          paymentCurrency: true,
          paymentDate: true,

          paymentMethods: {
            select: {
              id: true,
            },
          },

          paymentStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentsBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePaymentsBook(
    @common.Param() params: PaymentsBookWhereUniqueInput
  ): Promise<PaymentsBook | null> {
    try {
      return await this.service.deletePaymentsBook({
        where: params,
        select: {
          createdAt: true,
          errorCode: true,
          id: true,

          orderHistory: {
            select: {
              id: true,
            },
          },

          paymentAmount: true,
          paymentCurrency: true,
          paymentDate: true,

          paymentMethods: {
            select: {
              id: true,
            },
          },

          paymentStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/complaintsBook")
  @ApiNestedQuery(ComplaintsBookFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "read",
    possession: "any",
  })
  async findComplaintsBook(
    @common.Req() request: Request,
    @common.Param() params: PaymentsBookWhereUniqueInput
  ): Promise<ComplaintsBook[]> {
    const query = plainToClass(ComplaintsBookFindManyArgs, request.query);
    const results = await this.service.findComplaintsBook(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        issue_category: true,
        issueDescription: true,
        orderId: true,

        paymentsBook: {
          select: {
            id: true,
          },
        },

        refundAmount: true,
        refund_eligibility: true,
        refund_mode: true,
        refund_type: true,
        ticketCreationTime: true,
        ticketId: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/complaintsBook")
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "update",
    possession: "any",
  })
  async connectComplaintsBook(
    @common.Param() params: PaymentsBookWhereUniqueInput,
    @common.Body() body: ComplaintsBookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaintsBook: {
        connect: body,
      },
    };
    await this.service.updatePaymentsBook({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/complaintsBook")
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "update",
    possession: "any",
  })
  async updateComplaintsBook(
    @common.Param() params: PaymentsBookWhereUniqueInput,
    @common.Body() body: ComplaintsBookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaintsBook: {
        set: body,
      },
    };
    await this.service.updatePaymentsBook({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/complaintsBook")
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "update",
    possession: "any",
  })
  async disconnectComplaintsBook(
    @common.Param() params: PaymentsBookWhereUniqueInput,
    @common.Body() body: ComplaintsBookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaintsBook: {
        disconnect: body,
      },
    };
    await this.service.updatePaymentsBook({
      where: params,
      data,
      select: { id: true },
    });
  }
}
