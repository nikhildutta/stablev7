/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ComplaintsBookCreateNestedManyWithoutPaymentsBooksInput } from "./ComplaintsBookCreateNestedManyWithoutPaymentsBooksInput";
import {
  ValidateNested,
  IsOptional,
  IsInt,
  IsNumber,
  IsString,
  IsDate,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { OrderHistoryWhereUniqueInput } from "../../orderHistory/base/OrderHistoryWhereUniqueInput";
import { Decimal } from "decimal.js";
import { PaymentMethodWhereUniqueInput } from "../../paymentMethod/base/PaymentMethodWhereUniqueInput";

@InputType()
class PaymentsBookCreateInput {
  @ApiProperty({
    required: false,
    type: () => ComplaintsBookCreateNestedManyWithoutPaymentsBooksInput,
  })
  @ValidateNested()
  @Type(() => ComplaintsBookCreateNestedManyWithoutPaymentsBooksInput)
  @IsOptional()
  @Field(() => ComplaintsBookCreateNestedManyWithoutPaymentsBooksInput, {
    nullable: true,
  })
  complaintsBook?: ComplaintsBookCreateNestedManyWithoutPaymentsBooksInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  errorCode?: number | null;

  @ApiProperty({
    required: true,
    type: () => OrderHistoryWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrderHistoryWhereUniqueInput)
  @Field(() => OrderHistoryWhereUniqueInput)
  orderHistory!: OrderHistoryWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  paymentAmount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  paymentCurrency?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  paymentDate?: Date | null;

  @ApiProperty({
    required: true,
    type: () => PaymentMethodWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PaymentMethodWhereUniqueInput)
  @Field(() => PaymentMethodWhereUniqueInput)
  paymentMethods!: PaymentMethodWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  paymentStatus?: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt?: Date | null;
}

export { PaymentsBookCreateInput as PaymentsBookCreateInput };
