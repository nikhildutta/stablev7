/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PaymentsBook } from "./PaymentsBook";
import { PaymentsBookCountArgs } from "./PaymentsBookCountArgs";
import { PaymentsBookFindManyArgs } from "./PaymentsBookFindManyArgs";
import { PaymentsBookFindUniqueArgs } from "./PaymentsBookFindUniqueArgs";
import { CreatePaymentsBookArgs } from "./CreatePaymentsBookArgs";
import { UpdatePaymentsBookArgs } from "./UpdatePaymentsBookArgs";
import { DeletePaymentsBookArgs } from "./DeletePaymentsBookArgs";
import { ComplaintsBookFindManyArgs } from "../../complaintsBook/base/ComplaintsBookFindManyArgs";
import { ComplaintsBook } from "../../complaintsBook/base/ComplaintsBook";
import { OrderHistory } from "../../orderHistory/base/OrderHistory";
import { PaymentMethod } from "../../paymentMethod/base/PaymentMethod";
import { PaymentsBookService } from "../paymentsBook.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PaymentsBook)
export class PaymentsBookResolverBase {
  constructor(
    protected readonly service: PaymentsBookService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "read",
    possession: "any",
  })
  async _paymentsBooksMeta(
    @graphql.Args() args: PaymentsBookCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PaymentsBook])
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "read",
    possession: "any",
  })
  async paymentsBooks(
    @graphql.Args() args: PaymentsBookFindManyArgs
  ): Promise<PaymentsBook[]> {
    return this.service.paymentsBooks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PaymentsBook, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "read",
    possession: "own",
  })
  async paymentsBook(
    @graphql.Args() args: PaymentsBookFindUniqueArgs
  ): Promise<PaymentsBook | null> {
    const result = await this.service.paymentsBook(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentsBook)
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "create",
    possession: "any",
  })
  async createPaymentsBook(
    @graphql.Args() args: CreatePaymentsBookArgs
  ): Promise<PaymentsBook> {
    return await this.service.createPaymentsBook({
      ...args,
      data: {
        ...args.data,

        orderHistory: {
          connect: args.data.orderHistory,
        },

        paymentMethods: {
          connect: args.data.paymentMethods,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentsBook)
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "update",
    possession: "any",
  })
  async updatePaymentsBook(
    @graphql.Args() args: UpdatePaymentsBookArgs
  ): Promise<PaymentsBook | null> {
    try {
      return await this.service.updatePaymentsBook({
        ...args,
        data: {
          ...args.data,

          orderHistory: {
            connect: args.data.orderHistory,
          },

          paymentMethods: {
            connect: args.data.paymentMethods,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentsBook)
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "delete",
    possession: "any",
  })
  async deletePaymentsBook(
    @graphql.Args() args: DeletePaymentsBookArgs
  ): Promise<PaymentsBook | null> {
    try {
      return await this.service.deletePaymentsBook(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ComplaintsBook], { name: "complaintsBook" })
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "read",
    possession: "any",
  })
  async findComplaintsBook(
    @graphql.Parent() parent: PaymentsBook,
    @graphql.Args() args: ComplaintsBookFindManyArgs
  ): Promise<ComplaintsBook[]> {
    const results = await this.service.findComplaintsBook(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OrderHistory, {
    nullable: true,
    name: "orderHistory",
  })
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "any",
  })
  async getOrderHistory(
    @graphql.Parent() parent: PaymentsBook
  ): Promise<OrderHistory | null> {
    const result = await this.service.getOrderHistory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentMethod, {
    nullable: true,
    name: "paymentMethods",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentMethod",
    action: "read",
    possession: "any",
  })
  async getPaymentMethods(
    @graphql.Parent() parent: PaymentsBook
  ): Promise<PaymentMethod | null> {
    const result = await this.service.getPaymentMethods(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
