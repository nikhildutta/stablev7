/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ComplaintsBookListRelationFilter } from "../../complaintsBook/base/ComplaintsBookListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { OrderHistoryWhereUniqueInput } from "../../orderHistory/base/OrderHistoryWhereUniqueInput";
import { DecimalNullableFilter } from "../../util/DecimalNullableFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { PaymentMethodWhereUniqueInput } from "../../paymentMethod/base/PaymentMethodWhereUniqueInput";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";

@InputType()
class PaymentsBookWhereInput {
  @ApiProperty({
    required: false,
    type: () => ComplaintsBookListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ComplaintsBookListRelationFilter)
  @IsOptional()
  @Field(() => ComplaintsBookListRelationFilter, {
    nullable: true,
  })
  complaintsBook?: ComplaintsBookListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  createdAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  errorCode?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => OrderHistoryWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OrderHistoryWhereUniqueInput)
  @IsOptional()
  @Field(() => OrderHistoryWhereUniqueInput, {
    nullable: true,
  })
  orderHistory?: OrderHistoryWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: DecimalNullableFilter,
  })
  @Type(() => DecimalNullableFilter)
  @IsOptional()
  @Field(() => DecimalNullableFilter, {
    nullable: true,
  })
  paymentAmount?: DecimalNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  paymentCurrency?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  paymentDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => PaymentMethodWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PaymentMethodWhereUniqueInput)
  @IsOptional()
  @Field(() => PaymentMethodWhereUniqueInput, {
    nullable: true,
  })
  paymentMethods?: PaymentMethodWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  paymentStatus?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeNullableFilter;
}

export { PaymentsBookWhereInput as PaymentsBookWhereInput };
