/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ComplaintsBook } from "../../complaintsBook/base/ComplaintsBook";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsInt,
  IsString,
  IsNumber,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { OrderHistory } from "../../orderHistory/base/OrderHistory";
import { Decimal } from "decimal.js";
import { PaymentMethod } from "../../paymentMethod/base/PaymentMethod";

@ObjectType()
class PaymentsBook {
  @ApiProperty({
    required: false,
    type: () => [ComplaintsBook],
  })
  @ValidateNested()
  @Type(() => ComplaintsBook)
  @IsOptional()
  complaintsBook?: Array<ComplaintsBook>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt!: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  errorCode!: number | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: () => OrderHistory,
  })
  @ValidateNested()
  @Type(() => OrderHistory)
  orderHistory?: OrderHistory;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  paymentAmount!: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  paymentCurrency!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  paymentDate!: Date | null;

  @ApiProperty({
    required: true,
    type: () => PaymentMethod,
  })
  @ValidateNested()
  @Type(() => PaymentMethod)
  paymentMethods?: PaymentMethod;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  paymentStatus!: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt!: Date | null;
}

export { PaymentsBook as PaymentsBook };
