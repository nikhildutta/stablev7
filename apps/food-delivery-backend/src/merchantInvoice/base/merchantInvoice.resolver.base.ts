/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MerchantInvoice } from "./MerchantInvoice";
import { MerchantInvoiceCountArgs } from "./MerchantInvoiceCountArgs";
import { MerchantInvoiceFindManyArgs } from "./MerchantInvoiceFindManyArgs";
import { MerchantInvoiceFindUniqueArgs } from "./MerchantInvoiceFindUniqueArgs";
import { CreateMerchantInvoiceArgs } from "./CreateMerchantInvoiceArgs";
import { UpdateMerchantInvoiceArgs } from "./UpdateMerchantInvoiceArgs";
import { DeleteMerchantInvoiceArgs } from "./DeleteMerchantInvoiceArgs";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { MerchantInvoiceService } from "../merchantInvoice.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MerchantInvoice)
export class MerchantInvoiceResolverBase {
  constructor(
    protected readonly service: MerchantInvoiceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MerchantInvoice",
    action: "read",
    possession: "any",
  })
  async _merchantInvoicesMeta(
    @graphql.Args() args: MerchantInvoiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MerchantInvoice])
  @nestAccessControl.UseRoles({
    resource: "MerchantInvoice",
    action: "read",
    possession: "any",
  })
  async merchantInvoices(
    @graphql.Args() args: MerchantInvoiceFindManyArgs
  ): Promise<MerchantInvoice[]> {
    return this.service.merchantInvoices(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MerchantInvoice, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MerchantInvoice",
    action: "read",
    possession: "own",
  })
  async merchantInvoice(
    @graphql.Args() args: MerchantInvoiceFindUniqueArgs
  ): Promise<MerchantInvoice | null> {
    const result = await this.service.merchantInvoice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MerchantInvoice)
  @nestAccessControl.UseRoles({
    resource: "MerchantInvoice",
    action: "create",
    possession: "any",
  })
  async createMerchantInvoice(
    @graphql.Args() args: CreateMerchantInvoiceArgs
  ): Promise<MerchantInvoice> {
    return await this.service.createMerchantInvoice({
      ...args,
      data: {
        ...args.data,

        restaurants: {
          connect: args.data.restaurants,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MerchantInvoice)
  @nestAccessControl.UseRoles({
    resource: "MerchantInvoice",
    action: "update",
    possession: "any",
  })
  async updateMerchantInvoice(
    @graphql.Args() args: UpdateMerchantInvoiceArgs
  ): Promise<MerchantInvoice | null> {
    try {
      return await this.service.updateMerchantInvoice({
        ...args,
        data: {
          ...args.data,

          restaurants: {
            connect: args.data.restaurants,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MerchantInvoice)
  @nestAccessControl.UseRoles({
    resource: "MerchantInvoice",
    action: "delete",
    possession: "any",
  })
  async deleteMerchantInvoice(
    @graphql.Args() args: DeleteMerchantInvoiceArgs
  ): Promise<MerchantInvoice | null> {
    try {
      return await this.service.deleteMerchantInvoice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurants",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurants(
    @graphql.Parent() parent: MerchantInvoice
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurants(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
