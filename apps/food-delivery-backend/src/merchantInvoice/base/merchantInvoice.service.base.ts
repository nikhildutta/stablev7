/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MerchantInvoice as PrismaMerchantInvoice,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class MerchantInvoiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MerchantInvoiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.merchantInvoice.count(args);
  }

  async merchantInvoices<T extends Prisma.MerchantInvoiceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MerchantInvoiceFindManyArgs>
  ): Promise<PrismaMerchantInvoice[]> {
    return this.prisma.merchantInvoice.findMany<Prisma.MerchantInvoiceFindManyArgs>(
      args
    );
  }
  async merchantInvoice<T extends Prisma.MerchantInvoiceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MerchantInvoiceFindUniqueArgs>
  ): Promise<PrismaMerchantInvoice | null> {
    return this.prisma.merchantInvoice.findUnique(args);
  }
  async createMerchantInvoice<T extends Prisma.MerchantInvoiceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MerchantInvoiceCreateArgs>
  ): Promise<PrismaMerchantInvoice> {
    return this.prisma.merchantInvoice.create<T>(args);
  }
  async updateMerchantInvoice<T extends Prisma.MerchantInvoiceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MerchantInvoiceUpdateArgs>
  ): Promise<PrismaMerchantInvoice> {
    return this.prisma.merchantInvoice.update<T>(args);
  }
  async deleteMerchantInvoice<T extends Prisma.MerchantInvoiceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MerchantInvoiceDeleteArgs>
  ): Promise<PrismaMerchantInvoice> {
    return this.prisma.merchantInvoice.delete(args);
  }

  async getRestaurants(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.merchantInvoice
      .findUnique({
        where: { id: parentId },
      })
      .restaurants();
  }
}
