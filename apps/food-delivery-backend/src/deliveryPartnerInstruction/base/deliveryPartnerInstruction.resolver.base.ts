/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DeliveryPartnerInstruction } from "./DeliveryPartnerInstruction";
import { DeliveryPartnerInstructionCountArgs } from "./DeliveryPartnerInstructionCountArgs";
import { DeliveryPartnerInstructionFindManyArgs } from "./DeliveryPartnerInstructionFindManyArgs";
import { DeliveryPartnerInstructionFindUniqueArgs } from "./DeliveryPartnerInstructionFindUniqueArgs";
import { CreateDeliveryPartnerInstructionArgs } from "./CreateDeliveryPartnerInstructionArgs";
import { UpdateDeliveryPartnerInstructionArgs } from "./UpdateDeliveryPartnerInstructionArgs";
import { DeleteDeliveryPartnerInstructionArgs } from "./DeleteDeliveryPartnerInstructionArgs";
import { DeliveryInstructionAddressMapFindManyArgs } from "../../deliveryInstructionAddressMap/base/DeliveryInstructionAddressMapFindManyArgs";
import { DeliveryInstructionAddressMap } from "../../deliveryInstructionAddressMap/base/DeliveryInstructionAddressMap";
import { DeliveryPartnerInstructionService } from "../deliveryPartnerInstruction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DeliveryPartnerInstruction)
export class DeliveryPartnerInstructionResolverBase {
  constructor(
    protected readonly service: DeliveryPartnerInstructionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DeliveryPartnerInstruction",
    action: "read",
    possession: "any",
  })
  async _deliveryPartnerInstructionsMeta(
    @graphql.Args() args: DeliveryPartnerInstructionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DeliveryPartnerInstruction])
  @nestAccessControl.UseRoles({
    resource: "DeliveryPartnerInstruction",
    action: "read",
    possession: "any",
  })
  async deliveryPartnerInstructions(
    @graphql.Args() args: DeliveryPartnerInstructionFindManyArgs
  ): Promise<DeliveryPartnerInstruction[]> {
    return this.service.deliveryPartnerInstructions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DeliveryPartnerInstruction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DeliveryPartnerInstruction",
    action: "read",
    possession: "own",
  })
  async deliveryPartnerInstruction(
    @graphql.Args() args: DeliveryPartnerInstructionFindUniqueArgs
  ): Promise<DeliveryPartnerInstruction | null> {
    const result = await this.service.deliveryPartnerInstruction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeliveryPartnerInstruction)
  @nestAccessControl.UseRoles({
    resource: "DeliveryPartnerInstruction",
    action: "create",
    possession: "any",
  })
  async createDeliveryPartnerInstruction(
    @graphql.Args() args: CreateDeliveryPartnerInstructionArgs
  ): Promise<DeliveryPartnerInstruction> {
    return await this.service.createDeliveryPartnerInstruction({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeliveryPartnerInstruction)
  @nestAccessControl.UseRoles({
    resource: "DeliveryPartnerInstruction",
    action: "update",
    possession: "any",
  })
  async updateDeliveryPartnerInstruction(
    @graphql.Args() args: UpdateDeliveryPartnerInstructionArgs
  ): Promise<DeliveryPartnerInstruction | null> {
    try {
      return await this.service.updateDeliveryPartnerInstruction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryPartnerInstruction)
  @nestAccessControl.UseRoles({
    resource: "DeliveryPartnerInstruction",
    action: "delete",
    possession: "any",
  })
  async deleteDeliveryPartnerInstruction(
    @graphql.Args() args: DeleteDeliveryPartnerInstructionArgs
  ): Promise<DeliveryPartnerInstruction | null> {
    try {
      return await this.service.deleteDeliveryPartnerInstruction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DeliveryInstructionAddressMap], {
    name: "deliveryInstructionAddressMap",
  })
  @nestAccessControl.UseRoles({
    resource: "DeliveryInstructionAddressMap",
    action: "read",
    possession: "any",
  })
  async findDeliveryInstructionAddressMap(
    @graphql.Parent() parent: DeliveryPartnerInstruction,
    @graphql.Args() args: DeliveryInstructionAddressMapFindManyArgs
  ): Promise<DeliveryInstructionAddressMap[]> {
    const results = await this.service.findDeliveryInstructionAddressMap(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
