/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PayoutInformationTable } from "./PayoutInformationTable";
import { PayoutInformationTableCountArgs } from "./PayoutInformationTableCountArgs";
import { PayoutInformationTableFindManyArgs } from "./PayoutInformationTableFindManyArgs";
import { PayoutInformationTableFindUniqueArgs } from "./PayoutInformationTableFindUniqueArgs";
import { CreatePayoutInformationTableArgs } from "./CreatePayoutInformationTableArgs";
import { UpdatePayoutInformationTableArgs } from "./UpdatePayoutInformationTableArgs";
import { DeletePayoutInformationTableArgs } from "./DeletePayoutInformationTableArgs";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { PayoutInformationTableService } from "../payoutInformationTable.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PayoutInformationTable)
export class PayoutInformationTableResolverBase {
  constructor(
    protected readonly service: PayoutInformationTableService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PayoutInformationTable",
    action: "read",
    possession: "any",
  })
  async _payoutInformationTablesMeta(
    @graphql.Args() args: PayoutInformationTableCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PayoutInformationTable])
  @nestAccessControl.UseRoles({
    resource: "PayoutInformationTable",
    action: "read",
    possession: "any",
  })
  async payoutInformationTables(
    @graphql.Args() args: PayoutInformationTableFindManyArgs
  ): Promise<PayoutInformationTable[]> {
    return this.service.payoutInformationTables(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PayoutInformationTable, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PayoutInformationTable",
    action: "read",
    possession: "own",
  })
  async payoutInformationTable(
    @graphql.Args() args: PayoutInformationTableFindUniqueArgs
  ): Promise<PayoutInformationTable | null> {
    const result = await this.service.payoutInformationTable(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PayoutInformationTable)
  @nestAccessControl.UseRoles({
    resource: "PayoutInformationTable",
    action: "create",
    possession: "any",
  })
  async createPayoutInformationTable(
    @graphql.Args() args: CreatePayoutInformationTableArgs
  ): Promise<PayoutInformationTable> {
    return await this.service.createPayoutInformationTable({
      ...args,
      data: {
        ...args.data,

        restaurants: {
          connect: args.data.restaurants,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PayoutInformationTable)
  @nestAccessControl.UseRoles({
    resource: "PayoutInformationTable",
    action: "update",
    possession: "any",
  })
  async updatePayoutInformationTable(
    @graphql.Args() args: UpdatePayoutInformationTableArgs
  ): Promise<PayoutInformationTable | null> {
    try {
      return await this.service.updatePayoutInformationTable({
        ...args,
        data: {
          ...args.data,

          restaurants: {
            connect: args.data.restaurants,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PayoutInformationTable)
  @nestAccessControl.UseRoles({
    resource: "PayoutInformationTable",
    action: "delete",
    possession: "any",
  })
  async deletePayoutInformationTable(
    @graphql.Args() args: DeletePayoutInformationTableArgs
  ): Promise<PayoutInformationTable | null> {
    try {
      return await this.service.deletePayoutInformationTable(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurants",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurants(
    @graphql.Parent() parent: PayoutInformationTable
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurants(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
