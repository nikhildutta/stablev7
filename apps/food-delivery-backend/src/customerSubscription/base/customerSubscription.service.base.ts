/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CustomerSubscription as PrismaCustomerSubscription,
  AppUser as PrismaAppUser,
  SubscriptionPlan as PrismaSubscriptionPlan,
  Subscription as PrismaSubscription,
} from "@prisma/client";

export class CustomerSubscriptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerSubscriptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerSubscription.count(args);
  }

  async customerSubscriptions<
    T extends Prisma.CustomerSubscriptionFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CustomerSubscriptionFindManyArgs>
  ): Promise<PrismaCustomerSubscription[]> {
    return this.prisma.customerSubscription.findMany<Prisma.CustomerSubscriptionFindManyArgs>(
      args
    );
  }
  async customerSubscription<
    T extends Prisma.CustomerSubscriptionFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CustomerSubscriptionFindUniqueArgs>
  ): Promise<PrismaCustomerSubscription | null> {
    return this.prisma.customerSubscription.findUnique(args);
  }
  async createCustomerSubscription<
    T extends Prisma.CustomerSubscriptionCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CustomerSubscriptionCreateArgs>
  ): Promise<PrismaCustomerSubscription> {
    return this.prisma.customerSubscription.create<T>(args);
  }
  async updateCustomerSubscription<
    T extends Prisma.CustomerSubscriptionUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CustomerSubscriptionUpdateArgs>
  ): Promise<PrismaCustomerSubscription> {
    return this.prisma.customerSubscription.update<T>(args);
  }
  async deleteCustomerSubscription<
    T extends Prisma.CustomerSubscriptionDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.CustomerSubscriptionDeleteArgs>
  ): Promise<PrismaCustomerSubscription> {
    return this.prisma.customerSubscription.delete(args);
  }

  async getAppUsers(parentId: string): Promise<PrismaAppUser | null> {
    return this.prisma.customerSubscription
      .findUnique({
        where: { id: parentId },
      })
      .appUsers();
  }

  async getSubscriptionPlans(
    parentId: string
  ): Promise<PrismaSubscriptionPlan | null> {
    return this.prisma.customerSubscription
      .findUnique({
        where: { id: parentId },
      })
      .subscriptionPlans();
  }

  async getSubscriptions(parentId: string): Promise<PrismaSubscription | null> {
    return this.prisma.customerSubscription
      .findUnique({
        where: { id: parentId },
      })
      .subscriptions();
  }
}
