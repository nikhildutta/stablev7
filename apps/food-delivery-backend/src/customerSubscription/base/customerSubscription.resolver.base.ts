/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CustomerSubscription } from "./CustomerSubscription";
import { CustomerSubscriptionCountArgs } from "./CustomerSubscriptionCountArgs";
import { CustomerSubscriptionFindManyArgs } from "./CustomerSubscriptionFindManyArgs";
import { CustomerSubscriptionFindUniqueArgs } from "./CustomerSubscriptionFindUniqueArgs";
import { CreateCustomerSubscriptionArgs } from "./CreateCustomerSubscriptionArgs";
import { UpdateCustomerSubscriptionArgs } from "./UpdateCustomerSubscriptionArgs";
import { DeleteCustomerSubscriptionArgs } from "./DeleteCustomerSubscriptionArgs";
import { AppUser } from "../../appUser/base/AppUser";
import { SubscriptionPlan } from "../../subscriptionPlan/base/SubscriptionPlan";
import { Subscription } from "../../subscription/base/Subscription";
import { CustomerSubscriptionService } from "../customerSubscription.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CustomerSubscription)
export class CustomerSubscriptionResolverBase {
  constructor(
    protected readonly service: CustomerSubscriptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CustomerSubscription",
    action: "read",
    possession: "any",
  })
  async _customerSubscriptionsMeta(
    @graphql.Args() args: CustomerSubscriptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CustomerSubscription])
  @nestAccessControl.UseRoles({
    resource: "CustomerSubscription",
    action: "read",
    possession: "any",
  })
  async customerSubscriptions(
    @graphql.Args() args: CustomerSubscriptionFindManyArgs
  ): Promise<CustomerSubscription[]> {
    return this.service.customerSubscriptions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CustomerSubscription, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CustomerSubscription",
    action: "read",
    possession: "own",
  })
  async customerSubscription(
    @graphql.Args() args: CustomerSubscriptionFindUniqueArgs
  ): Promise<CustomerSubscription | null> {
    const result = await this.service.customerSubscription(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerSubscription)
  @nestAccessControl.UseRoles({
    resource: "CustomerSubscription",
    action: "create",
    possession: "any",
  })
  async createCustomerSubscription(
    @graphql.Args() args: CreateCustomerSubscriptionArgs
  ): Promise<CustomerSubscription> {
    return await this.service.createCustomerSubscription({
      ...args,
      data: {
        ...args.data,

        appUsers: {
          connect: args.data.appUsers,
        },

        subscriptionPlans: {
          connect: args.data.subscriptionPlans,
        },

        subscriptions: {
          connect: args.data.subscriptions,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerSubscription)
  @nestAccessControl.UseRoles({
    resource: "CustomerSubscription",
    action: "update",
    possession: "any",
  })
  async updateCustomerSubscription(
    @graphql.Args() args: UpdateCustomerSubscriptionArgs
  ): Promise<CustomerSubscription | null> {
    try {
      return await this.service.updateCustomerSubscription({
        ...args,
        data: {
          ...args.data,

          appUsers: {
            connect: args.data.appUsers,
          },

          subscriptionPlans: {
            connect: args.data.subscriptionPlans,
          },

          subscriptions: {
            connect: args.data.subscriptions,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerSubscription)
  @nestAccessControl.UseRoles({
    resource: "CustomerSubscription",
    action: "delete",
    possession: "any",
  })
  async deleteCustomerSubscription(
    @graphql.Args() args: DeleteCustomerSubscriptionArgs
  ): Promise<CustomerSubscription | null> {
    try {
      return await this.service.deleteCustomerSubscription(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUsers",
  })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async getAppUsers(
    @graphql.Parent() parent: CustomerSubscription
  ): Promise<AppUser | null> {
    const result = await this.service.getAppUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SubscriptionPlan, {
    nullable: true,
    name: "subscriptionPlans",
  })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "read",
    possession: "any",
  })
  async getSubscriptionPlans(
    @graphql.Parent() parent: CustomerSubscription
  ): Promise<SubscriptionPlan | null> {
    const result = await this.service.getSubscriptionPlans(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Subscription, {
    nullable: true,
    name: "subscriptions",
  })
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "read",
    possession: "any",
  })
  async getSubscriptions(
    @graphql.Parent() parent: CustomerSubscription
  ): Promise<Subscription | null> {
    const result = await this.service.getSubscriptions(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
