/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ComboItemWindowMap } from "../../comboItemWindowMap/base/ComboItemWindowMap";
import { ValidateNested, IsOptional, IsString, IsDate } from "class-validator";
import { Type } from "class-transformer";
import { DiscountWindowMap } from "../../discountWindowMap/base/DiscountWindowMap";
import { MenuItemsWindowMap } from "../../menuItemsWindowMap/base/MenuItemsWindowMap";
import { RestaurantTimeWindowMap } from "../../restaurantTimeWindowMap/base/RestaurantTimeWindowMap";

@ObjectType()
class TimeWindow {
  @ApiProperty({
    required: false,
    type: () => [ComboItemWindowMap],
  })
  @ValidateNested()
  @Type(() => ComboItemWindowMap)
  @IsOptional()
  comboItemWindowMap?: Array<ComboItemWindowMap>;

  @ApiProperty({
    required: false,
    type: () => [DiscountWindowMap],
  })
  @ValidateNested()
  @Type(() => DiscountWindowMap)
  @IsOptional()
  discountWindowMap?: Array<DiscountWindowMap>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [MenuItemsWindowMap],
  })
  @ValidateNested()
  @Type(() => MenuItemsWindowMap)
  @IsOptional()
  menuItemsWindowMap?: Array<MenuItemsWindowMap>;

  @ApiProperty({
    required: false,
    type: () => [RestaurantTimeWindowMap],
  })
  @ValidateNested()
  @Type(() => RestaurantTimeWindowMap)
  @IsOptional()
  restaurantTimeWindowMap?: Array<RestaurantTimeWindowMap>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  windowEnd!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  windowStart!: Date | null;
}

export { TimeWindow as TimeWindow };
