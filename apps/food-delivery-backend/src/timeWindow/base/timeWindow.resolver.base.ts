/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TimeWindow } from "./TimeWindow";
import { TimeWindowCountArgs } from "./TimeWindowCountArgs";
import { TimeWindowFindManyArgs } from "./TimeWindowFindManyArgs";
import { TimeWindowFindUniqueArgs } from "./TimeWindowFindUniqueArgs";
import { CreateTimeWindowArgs } from "./CreateTimeWindowArgs";
import { UpdateTimeWindowArgs } from "./UpdateTimeWindowArgs";
import { DeleteTimeWindowArgs } from "./DeleteTimeWindowArgs";
import { ComboItemWindowMapFindManyArgs } from "../../comboItemWindowMap/base/ComboItemWindowMapFindManyArgs";
import { ComboItemWindowMap } from "../../comboItemWindowMap/base/ComboItemWindowMap";
import { DiscountWindowMapFindManyArgs } from "../../discountWindowMap/base/DiscountWindowMapFindManyArgs";
import { DiscountWindowMap } from "../../discountWindowMap/base/DiscountWindowMap";
import { MenuItemsWindowMapFindManyArgs } from "../../menuItemsWindowMap/base/MenuItemsWindowMapFindManyArgs";
import { MenuItemsWindowMap } from "../../menuItemsWindowMap/base/MenuItemsWindowMap";
import { RestaurantTimeWindowMapFindManyArgs } from "../../restaurantTimeWindowMap/base/RestaurantTimeWindowMapFindManyArgs";
import { RestaurantTimeWindowMap } from "../../restaurantTimeWindowMap/base/RestaurantTimeWindowMap";
import { TimeWindowService } from "../timeWindow.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TimeWindow)
export class TimeWindowResolverBase {
  constructor(
    protected readonly service: TimeWindowService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "read",
    possession: "any",
  })
  async _timeWindowsMeta(
    @graphql.Args() args: TimeWindowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TimeWindow])
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "read",
    possession: "any",
  })
  async timeWindows(
    @graphql.Args() args: TimeWindowFindManyArgs
  ): Promise<TimeWindow[]> {
    return this.service.timeWindows(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TimeWindow, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "read",
    possession: "own",
  })
  async timeWindow(
    @graphql.Args() args: TimeWindowFindUniqueArgs
  ): Promise<TimeWindow | null> {
    const result = await this.service.timeWindow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TimeWindow)
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "create",
    possession: "any",
  })
  async createTimeWindow(
    @graphql.Args() args: CreateTimeWindowArgs
  ): Promise<TimeWindow> {
    return await this.service.createTimeWindow({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TimeWindow)
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  async updateTimeWindow(
    @graphql.Args() args: UpdateTimeWindowArgs
  ): Promise<TimeWindow | null> {
    try {
      return await this.service.updateTimeWindow({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeWindow)
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "delete",
    possession: "any",
  })
  async deleteTimeWindow(
    @graphql.Args() args: DeleteTimeWindowArgs
  ): Promise<TimeWindow | null> {
    try {
      return await this.service.deleteTimeWindow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ComboItemWindowMap], {
    name: "comboItemWindowMap",
  })
  @nestAccessControl.UseRoles({
    resource: "ComboItemWindowMap",
    action: "read",
    possession: "any",
  })
  async findComboItemWindowMap(
    @graphql.Parent() parent: TimeWindow,
    @graphql.Args() args: ComboItemWindowMapFindManyArgs
  ): Promise<ComboItemWindowMap[]> {
    const results = await this.service.findComboItemWindowMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DiscountWindowMap], {
    name: "discountWindowMap",
  })
  @nestAccessControl.UseRoles({
    resource: "DiscountWindowMap",
    action: "read",
    possession: "any",
  })
  async findDiscountWindowMap(
    @graphql.Parent() parent: TimeWindow,
    @graphql.Args() args: DiscountWindowMapFindManyArgs
  ): Promise<DiscountWindowMap[]> {
    const results = await this.service.findDiscountWindowMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MenuItemsWindowMap], {
    name: "menuItemsWindowMap",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItemsWindowMap",
    action: "read",
    possession: "any",
  })
  async findMenuItemsWindowMap(
    @graphql.Parent() parent: TimeWindow,
    @graphql.Args() args: MenuItemsWindowMapFindManyArgs
  ): Promise<MenuItemsWindowMap[]> {
    const results = await this.service.findMenuItemsWindowMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [RestaurantTimeWindowMap], {
    name: "restaurantTimeWindowMap",
  })
  @nestAccessControl.UseRoles({
    resource: "RestaurantTimeWindowMap",
    action: "read",
    possession: "any",
  })
  async findRestaurantTimeWindowMap(
    @graphql.Parent() parent: TimeWindow,
    @graphql.Args() args: RestaurantTimeWindowMapFindManyArgs
  ): Promise<RestaurantTimeWindowMap[]> {
    const results = await this.service.findRestaurantTimeWindowMap(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
