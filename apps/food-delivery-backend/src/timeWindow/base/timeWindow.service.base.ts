/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TimeWindow as PrismaTimeWindow,
  ComboItemWindowMap as PrismaComboItemWindowMap,
  DiscountWindowMap as PrismaDiscountWindowMap,
  MenuItemsWindowMap as PrismaMenuItemsWindowMap,
  RestaurantTimeWindowMap as PrismaRestaurantTimeWindowMap,
} from "@prisma/client";

export class TimeWindowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TimeWindowCountArgs, "select">
  ): Promise<number> {
    return this.prisma.timeWindow.count(args);
  }

  async timeWindows<T extends Prisma.TimeWindowFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeWindowFindManyArgs>
  ): Promise<PrismaTimeWindow[]> {
    return this.prisma.timeWindow.findMany<Prisma.TimeWindowFindManyArgs>(args);
  }
  async timeWindow<T extends Prisma.TimeWindowFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeWindowFindUniqueArgs>
  ): Promise<PrismaTimeWindow | null> {
    return this.prisma.timeWindow.findUnique(args);
  }
  async createTimeWindow<T extends Prisma.TimeWindowCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeWindowCreateArgs>
  ): Promise<PrismaTimeWindow> {
    return this.prisma.timeWindow.create<T>(args);
  }
  async updateTimeWindow<T extends Prisma.TimeWindowUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeWindowUpdateArgs>
  ): Promise<PrismaTimeWindow> {
    return this.prisma.timeWindow.update<T>(args);
  }
  async deleteTimeWindow<T extends Prisma.TimeWindowDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TimeWindowDeleteArgs>
  ): Promise<PrismaTimeWindow> {
    return this.prisma.timeWindow.delete(args);
  }

  async findComboItemWindowMap(
    parentId: string,
    args: Prisma.ComboItemWindowMapFindManyArgs
  ): Promise<PrismaComboItemWindowMap[]> {
    return this.prisma.timeWindow
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comboItemWindowMap(args);
  }

  async findDiscountWindowMap(
    parentId: string,
    args: Prisma.DiscountWindowMapFindManyArgs
  ): Promise<PrismaDiscountWindowMap[]> {
    return this.prisma.timeWindow
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .discountWindowMap(args);
  }

  async findMenuItemsWindowMap(
    parentId: string,
    args: Prisma.MenuItemsWindowMapFindManyArgs
  ): Promise<PrismaMenuItemsWindowMap[]> {
    return this.prisma.timeWindow
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .menuItemsWindowMap(args);
  }

  async findRestaurantTimeWindowMap(
    parentId: string,
    args: Prisma.RestaurantTimeWindowMapFindManyArgs
  ): Promise<PrismaRestaurantTimeWindowMap[]> {
    return this.prisma.timeWindow
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .restaurantTimeWindowMap(args);
  }
}
