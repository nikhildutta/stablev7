/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TimeWindowService } from "../timeWindow.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TimeWindowCreateInput } from "./TimeWindowCreateInput";
import { TimeWindow } from "./TimeWindow";
import { TimeWindowFindManyArgs } from "./TimeWindowFindManyArgs";
import { TimeWindowWhereUniqueInput } from "./TimeWindowWhereUniqueInput";
import { TimeWindowUpdateInput } from "./TimeWindowUpdateInput";
import { ComboItemWindowMapFindManyArgs } from "../../comboItemWindowMap/base/ComboItemWindowMapFindManyArgs";
import { ComboItemWindowMap } from "../../comboItemWindowMap/base/ComboItemWindowMap";
import { ComboItemWindowMapWhereUniqueInput } from "../../comboItemWindowMap/base/ComboItemWindowMapWhereUniqueInput";
import { DiscountWindowMapFindManyArgs } from "../../discountWindowMap/base/DiscountWindowMapFindManyArgs";
import { DiscountWindowMap } from "../../discountWindowMap/base/DiscountWindowMap";
import { DiscountWindowMapWhereUniqueInput } from "../../discountWindowMap/base/DiscountWindowMapWhereUniqueInput";
import { MenuItemsWindowMapFindManyArgs } from "../../menuItemsWindowMap/base/MenuItemsWindowMapFindManyArgs";
import { MenuItemsWindowMap } from "../../menuItemsWindowMap/base/MenuItemsWindowMap";
import { MenuItemsWindowMapWhereUniqueInput } from "../../menuItemsWindowMap/base/MenuItemsWindowMapWhereUniqueInput";
import { RestaurantTimeWindowMapFindManyArgs } from "../../restaurantTimeWindowMap/base/RestaurantTimeWindowMapFindManyArgs";
import { RestaurantTimeWindowMap } from "../../restaurantTimeWindowMap/base/RestaurantTimeWindowMap";
import { RestaurantTimeWindowMapWhereUniqueInput } from "../../restaurantTimeWindowMap/base/RestaurantTimeWindowMapWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TimeWindowControllerBase {
  constructor(
    protected readonly service: TimeWindowService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TimeWindow })
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTimeWindow(
    @common.Body() data: TimeWindowCreateInput
  ): Promise<TimeWindow> {
    return await this.service.createTimeWindow({
      data: data,
      select: {
        id: true,
        windowEnd: true,
        windowStart: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TimeWindow] })
  @ApiNestedQuery(TimeWindowFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async timeWindows(@common.Req() request: Request): Promise<TimeWindow[]> {
    const args = plainToClass(TimeWindowFindManyArgs, request.query);
    return this.service.timeWindows({
      ...args,
      select: {
        id: true,
        windowEnd: true,
        windowStart: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TimeWindow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async timeWindow(
    @common.Param() params: TimeWindowWhereUniqueInput
  ): Promise<TimeWindow | null> {
    const result = await this.service.timeWindow({
      where: params,
      select: {
        id: true,
        windowEnd: true,
        windowStart: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TimeWindow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTimeWindow(
    @common.Param() params: TimeWindowWhereUniqueInput,
    @common.Body() data: TimeWindowUpdateInput
  ): Promise<TimeWindow | null> {
    try {
      return await this.service.updateTimeWindow({
        where: params,
        data: data,
        select: {
          id: true,
          windowEnd: true,
          windowStart: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TimeWindow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTimeWindow(
    @common.Param() params: TimeWindowWhereUniqueInput
  ): Promise<TimeWindow | null> {
    try {
      return await this.service.deleteTimeWindow({
        where: params,
        select: {
          id: true,
          windowEnd: true,
          windowStart: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/comboItemWindowMap")
  @ApiNestedQuery(ComboItemWindowMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComboItemWindowMap",
    action: "read",
    possession: "any",
  })
  async findComboItemWindowMap(
    @common.Req() request: Request,
    @common.Param() params: TimeWindowWhereUniqueInput
  ): Promise<ComboItemWindowMap[]> {
    const query = plainToClass(ComboItemWindowMapFindManyArgs, request.query);
    const results = await this.service.findComboItemWindowMap(params.id, {
      ...query,
      select: {
        comboGroups: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        is247: true,

        timeWindow: {
          select: {
            id: true,
          },
        },

        time_window_day: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/comboItemWindowMap")
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  async connectComboItemWindowMap(
    @common.Param() params: TimeWindowWhereUniqueInput,
    @common.Body() body: ComboItemWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboItemWindowMap: {
        connect: body,
      },
    };
    await this.service.updateTimeWindow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/comboItemWindowMap")
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  async updateComboItemWindowMap(
    @common.Param() params: TimeWindowWhereUniqueInput,
    @common.Body() body: ComboItemWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboItemWindowMap: {
        set: body,
      },
    };
    await this.service.updateTimeWindow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/comboItemWindowMap")
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  async disconnectComboItemWindowMap(
    @common.Param() params: TimeWindowWhereUniqueInput,
    @common.Body() body: ComboItemWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboItemWindowMap: {
        disconnect: body,
      },
    };
    await this.service.updateTimeWindow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/discountWindowMap")
  @ApiNestedQuery(DiscountWindowMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DiscountWindowMap",
    action: "read",
    possession: "any",
  })
  async findDiscountWindowMap(
    @common.Req() request: Request,
    @common.Param() params: TimeWindowWhereUniqueInput
  ): Promise<DiscountWindowMap[]> {
    const query = plainToClass(DiscountWindowMapFindManyArgs, request.query);
    const results = await this.service.findDiscountWindowMap(params.id, {
      ...query,
      select: {
        createdAt: true,

        discount: {
          select: {
            id: true,
          },
        },

        id: true,
        is247: true,

        timeWindow: {
          select: {
            id: true,
          },
        },

        time_window_day: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/discountWindowMap")
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  async connectDiscountWindowMap(
    @common.Param() params: TimeWindowWhereUniqueInput,
    @common.Body() body: DiscountWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discountWindowMap: {
        connect: body,
      },
    };
    await this.service.updateTimeWindow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/discountWindowMap")
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  async updateDiscountWindowMap(
    @common.Param() params: TimeWindowWhereUniqueInput,
    @common.Body() body: DiscountWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discountWindowMap: {
        set: body,
      },
    };
    await this.service.updateTimeWindow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/discountWindowMap")
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  async disconnectDiscountWindowMap(
    @common.Param() params: TimeWindowWhereUniqueInput,
    @common.Body() body: DiscountWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discountWindowMap: {
        disconnect: body,
      },
    };
    await this.service.updateTimeWindow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/menuItemsWindowMap")
  @ApiNestedQuery(MenuItemsWindowMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuItemsWindowMap",
    action: "read",
    possession: "any",
  })
  async findMenuItemsWindowMap(
    @common.Req() request: Request,
    @common.Param() params: TimeWindowWhereUniqueInput
  ): Promise<MenuItemsWindowMap[]> {
    const query = plainToClass(MenuItemsWindowMapFindManyArgs, request.query);
    const results = await this.service.findMenuItemsWindowMap(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        is247: true,

        menuItems: {
          select: {
            id: true,
          },
        },

        timeWindow: {
          select: {
            id: true,
          },
        },

        time_window_day: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/menuItemsWindowMap")
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  async connectMenuItemsWindowMap(
    @common.Param() params: TimeWindowWhereUniqueInput,
    @common.Body() body: MenuItemsWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemsWindowMap: {
        connect: body,
      },
    };
    await this.service.updateTimeWindow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/menuItemsWindowMap")
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  async updateMenuItemsWindowMap(
    @common.Param() params: TimeWindowWhereUniqueInput,
    @common.Body() body: MenuItemsWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemsWindowMap: {
        set: body,
      },
    };
    await this.service.updateTimeWindow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/menuItemsWindowMap")
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  async disconnectMenuItemsWindowMap(
    @common.Param() params: TimeWindowWhereUniqueInput,
    @common.Body() body: MenuItemsWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuItemsWindowMap: {
        disconnect: body,
      },
    };
    await this.service.updateTimeWindow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/restaurantTimeWindowMap")
  @ApiNestedQuery(RestaurantTimeWindowMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RestaurantTimeWindowMap",
    action: "read",
    possession: "any",
  })
  async findRestaurantTimeWindowMap(
    @common.Req() request: Request,
    @common.Param() params: TimeWindowWhereUniqueInput
  ): Promise<RestaurantTimeWindowMap[]> {
    const query = plainToClass(
      RestaurantTimeWindowMapFindManyArgs,
      request.query
    );
    const results = await this.service.findRestaurantTimeWindowMap(params.id, {
      ...query,
      select: {
        createdAt: true,
        day_of_the_week: true,
        id: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        timeWindow: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/restaurantTimeWindowMap")
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  async connectRestaurantTimeWindowMap(
    @common.Param() params: TimeWindowWhereUniqueInput,
    @common.Body() body: RestaurantTimeWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantTimeWindowMap: {
        connect: body,
      },
    };
    await this.service.updateTimeWindow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/restaurantTimeWindowMap")
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  async updateRestaurantTimeWindowMap(
    @common.Param() params: TimeWindowWhereUniqueInput,
    @common.Body() body: RestaurantTimeWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantTimeWindowMap: {
        set: body,
      },
    };
    await this.service.updateTimeWindow({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/restaurantTimeWindowMap")
  @nestAccessControl.UseRoles({
    resource: "TimeWindow",
    action: "update",
    possession: "any",
  })
  async disconnectRestaurantTimeWindowMap(
    @common.Param() params: TimeWindowWhereUniqueInput,
    @common.Body() body: RestaurantTimeWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantTimeWindowMap: {
        disconnect: body,
      },
    };
    await this.service.updateTimeWindow({
      where: params,
      data,
      select: { id: true },
    });
  }
}
