/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { OptionsVarientsGroupService } from "../optionsVarientsGroup.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { OptionsVarientsGroupCreateInput } from "./OptionsVarientsGroupCreateInput";
import { OptionsVarientsGroup } from "./OptionsVarientsGroup";
import { OptionsVarientsGroupFindManyArgs } from "./OptionsVarientsGroupFindManyArgs";
import { OptionsVarientsGroupWhereUniqueInput } from "./OptionsVarientsGroupWhereUniqueInput";
import { OptionsVarientsGroupUpdateInput } from "./OptionsVarientsGroupUpdateInput";
import { OptionsVarientsItemFindManyArgs } from "../../optionsVarientsItem/base/OptionsVarientsItemFindManyArgs";
import { OptionsVarientsItem } from "../../optionsVarientsItem/base/OptionsVarientsItem";
import { OptionsVarientsItemWhereUniqueInput } from "../../optionsVarientsItem/base/OptionsVarientsItemWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class OptionsVarientsGroupControllerBase {
  constructor(
    protected readonly service: OptionsVarientsGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OptionsVarientsGroup })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createOptionsVarientsGroup(
    @common.Body() data: OptionsVarientsGroupCreateInput
  ): Promise<OptionsVarientsGroup> {
    return await this.service.createOptionsVarientsGroup({
      data: {
        ...data,

        menuItemOptions: {
          connect: data.menuItemOptions,
        },
      },
      select: {
        createdAt: true,
        id: true,

        menuItemOptions: {
          select: {
            id: true,
          },
        },

        optionVariantGroupName: true,
        updatedAt: true,
        variantGroupDescription: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [OptionsVarientsGroup] })
  @ApiNestedQuery(OptionsVarientsGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async optionsVarientsGroups(
    @common.Req() request: Request
  ): Promise<OptionsVarientsGroup[]> {
    const args = plainToClass(OptionsVarientsGroupFindManyArgs, request.query);
    return this.service.optionsVarientsGroups({
      ...args,
      select: {
        createdAt: true,
        id: true,

        menuItemOptions: {
          select: {
            id: true,
          },
        },

        optionVariantGroupName: true,
        updatedAt: true,
        variantGroupDescription: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OptionsVarientsGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async optionsVarientsGroup(
    @common.Param() params: OptionsVarientsGroupWhereUniqueInput
  ): Promise<OptionsVarientsGroup | null> {
    const result = await this.service.optionsVarientsGroup({
      where: params,
      select: {
        createdAt: true,
        id: true,

        menuItemOptions: {
          select: {
            id: true,
          },
        },

        optionVariantGroupName: true,
        updatedAt: true,
        variantGroupDescription: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OptionsVarientsGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateOptionsVarientsGroup(
    @common.Param() params: OptionsVarientsGroupWhereUniqueInput,
    @common.Body() data: OptionsVarientsGroupUpdateInput
  ): Promise<OptionsVarientsGroup | null> {
    try {
      return await this.service.updateOptionsVarientsGroup({
        where: params,
        data: {
          ...data,

          menuItemOptions: {
            connect: data.menuItemOptions,
          },
        },
        select: {
          createdAt: true,
          id: true,

          menuItemOptions: {
            select: {
              id: true,
            },
          },

          optionVariantGroupName: true,
          updatedAt: true,
          variantGroupDescription: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OptionsVarientsGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteOptionsVarientsGroup(
    @common.Param() params: OptionsVarientsGroupWhereUniqueInput
  ): Promise<OptionsVarientsGroup | null> {
    try {
      return await this.service.deleteOptionsVarientsGroup({
        where: params,
        select: {
          createdAt: true,
          id: true,

          menuItemOptions: {
            select: {
              id: true,
            },
          },

          optionVariantGroupName: true,
          updatedAt: true,
          variantGroupDescription: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/optionsVarientsItem")
  @ApiNestedQuery(OptionsVarientsItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "read",
    possession: "any",
  })
  async findOptionsVarientsItem(
    @common.Req() request: Request,
    @common.Param() params: OptionsVarientsGroupWhereUniqueInput
  ): Promise<OptionsVarientsItem[]> {
    const query = plainToClass(OptionsVarientsItemFindManyArgs, request.query);
    const results = await this.service.findOptionsVarientsItem(params.id, {
      ...query,
      select: {
        additionalPrice: true,
        createdAt: true,
        id: true,
        isDefault: true,

        optionsVarientsGroup: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        variantDescription: true,
        variantImageUrl: true,
        variantName: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/optionsVarientsItem")
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "update",
    possession: "any",
  })
  async connectOptionsVarientsItem(
    @common.Param() params: OptionsVarientsGroupWhereUniqueInput,
    @common.Body() body: OptionsVarientsItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      optionsVarientsItem: {
        connect: body,
      },
    };
    await this.service.updateOptionsVarientsGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/optionsVarientsItem")
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "update",
    possession: "any",
  })
  async updateOptionsVarientsItem(
    @common.Param() params: OptionsVarientsGroupWhereUniqueInput,
    @common.Body() body: OptionsVarientsItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      optionsVarientsItem: {
        set: body,
      },
    };
    await this.service.updateOptionsVarientsGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/optionsVarientsItem")
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "update",
    possession: "any",
  })
  async disconnectOptionsVarientsItem(
    @common.Param() params: OptionsVarientsGroupWhereUniqueInput,
    @common.Body() body: OptionsVarientsItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      optionsVarientsItem: {
        disconnect: body,
      },
    };
    await this.service.updateOptionsVarientsGroup({
      where: params,
      data,
      select: { id: true },
    });
  }
}
