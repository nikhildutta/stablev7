/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OptionsVarientsGroup } from "./OptionsVarientsGroup";
import { OptionsVarientsGroupCountArgs } from "./OptionsVarientsGroupCountArgs";
import { OptionsVarientsGroupFindManyArgs } from "./OptionsVarientsGroupFindManyArgs";
import { OptionsVarientsGroupFindUniqueArgs } from "./OptionsVarientsGroupFindUniqueArgs";
import { CreateOptionsVarientsGroupArgs } from "./CreateOptionsVarientsGroupArgs";
import { UpdateOptionsVarientsGroupArgs } from "./UpdateOptionsVarientsGroupArgs";
import { DeleteOptionsVarientsGroupArgs } from "./DeleteOptionsVarientsGroupArgs";
import { OptionsVarientsItemFindManyArgs } from "../../optionsVarientsItem/base/OptionsVarientsItemFindManyArgs";
import { OptionsVarientsItem } from "../../optionsVarientsItem/base/OptionsVarientsItem";
import { MenuItemOption } from "../../menuItemOption/base/MenuItemOption";
import { OptionsVarientsGroupService } from "../optionsVarientsGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OptionsVarientsGroup)
export class OptionsVarientsGroupResolverBase {
  constructor(
    protected readonly service: OptionsVarientsGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "read",
    possession: "any",
  })
  async _optionsVarientsGroupsMeta(
    @graphql.Args() args: OptionsVarientsGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OptionsVarientsGroup])
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "read",
    possession: "any",
  })
  async optionsVarientsGroups(
    @graphql.Args() args: OptionsVarientsGroupFindManyArgs
  ): Promise<OptionsVarientsGroup[]> {
    return this.service.optionsVarientsGroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OptionsVarientsGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "read",
    possession: "own",
  })
  async optionsVarientsGroup(
    @graphql.Args() args: OptionsVarientsGroupFindUniqueArgs
  ): Promise<OptionsVarientsGroup | null> {
    const result = await this.service.optionsVarientsGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OptionsVarientsGroup)
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "create",
    possession: "any",
  })
  async createOptionsVarientsGroup(
    @graphql.Args() args: CreateOptionsVarientsGroupArgs
  ): Promise<OptionsVarientsGroup> {
    return await this.service.createOptionsVarientsGroup({
      ...args,
      data: {
        ...args.data,

        menuItemOptions: {
          connect: args.data.menuItemOptions,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OptionsVarientsGroup)
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "update",
    possession: "any",
  })
  async updateOptionsVarientsGroup(
    @graphql.Args() args: UpdateOptionsVarientsGroupArgs
  ): Promise<OptionsVarientsGroup | null> {
    try {
      return await this.service.updateOptionsVarientsGroup({
        ...args,
        data: {
          ...args.data,

          menuItemOptions: {
            connect: args.data.menuItemOptions,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OptionsVarientsGroup)
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "delete",
    possession: "any",
  })
  async deleteOptionsVarientsGroup(
    @graphql.Args() args: DeleteOptionsVarientsGroupArgs
  ): Promise<OptionsVarientsGroup | null> {
    try {
      return await this.service.deleteOptionsVarientsGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OptionsVarientsItem], {
    name: "optionsVarientsItem",
  })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "read",
    possession: "any",
  })
  async findOptionsVarientsItem(
    @graphql.Parent() parent: OptionsVarientsGroup,
    @graphql.Args() args: OptionsVarientsItemFindManyArgs
  ): Promise<OptionsVarientsItem[]> {
    const results = await this.service.findOptionsVarientsItem(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MenuItemOption, {
    nullable: true,
    name: "menuItemOptions",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "read",
    possession: "any",
  })
  async getMenuItemOptions(
    @graphql.Parent() parent: OptionsVarientsGroup
  ): Promise<MenuItemOption | null> {
    const result = await this.service.getMenuItemOptions(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
