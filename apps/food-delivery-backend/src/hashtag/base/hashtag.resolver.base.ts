/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Hashtag } from "./Hashtag";
import { HashtagCountArgs } from "./HashtagCountArgs";
import { HashtagFindManyArgs } from "./HashtagFindManyArgs";
import { HashtagFindUniqueArgs } from "./HashtagFindUniqueArgs";
import { CreateHashtagArgs } from "./CreateHashtagArgs";
import { UpdateHashtagArgs } from "./UpdateHashtagArgs";
import { DeleteHashtagArgs } from "./DeleteHashtagArgs";
import { ContactHashtagsMapFindManyArgs } from "../../contactHashtagsMap/base/ContactHashtagsMapFindManyArgs";
import { ContactHashtagsMap } from "../../contactHashtagsMap/base/ContactHashtagsMap";
import { MenuItemsHashtagsMapFindManyArgs } from "../../menuItemsHashtagsMap/base/MenuItemsHashtagsMapFindManyArgs";
import { MenuItemsHashtagsMap } from "../../menuItemsHashtagsMap/base/MenuItemsHashtagsMap";
import { OrdersHashtagsMapFindManyArgs } from "../../ordersHashtagsMap/base/OrdersHashtagsMapFindManyArgs";
import { OrdersHashtagsMap } from "../../ordersHashtagsMap/base/OrdersHashtagsMap";
import { RestaurantsHashtagsMapFindManyArgs } from "../../restaurantsHashtagsMap/base/RestaurantsHashtagsMapFindManyArgs";
import { RestaurantsHashtagsMap } from "../../restaurantsHashtagsMap/base/RestaurantsHashtagsMap";
import { UsersHashtagsMapFindManyArgs } from "../../usersHashtagsMap/base/UsersHashtagsMapFindManyArgs";
import { UsersHashtagsMap } from "../../usersHashtagsMap/base/UsersHashtagsMap";
import { HashtagService } from "../hashtag.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Hashtag)
export class HashtagResolverBase {
  constructor(
    protected readonly service: HashtagService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "read",
    possession: "any",
  })
  async _hashtagsMeta(
    @graphql.Args() args: HashtagCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Hashtag])
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "read",
    possession: "any",
  })
  async hashtags(
    @graphql.Args() args: HashtagFindManyArgs
  ): Promise<Hashtag[]> {
    return this.service.hashtags(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Hashtag, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "read",
    possession: "own",
  })
  async hashtag(
    @graphql.Args() args: HashtagFindUniqueArgs
  ): Promise<Hashtag | null> {
    const result = await this.service.hashtag(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Hashtag)
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "create",
    possession: "any",
  })
  async createHashtag(
    @graphql.Args() args: CreateHashtagArgs
  ): Promise<Hashtag> {
    return await this.service.createHashtag({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Hashtag)
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "update",
    possession: "any",
  })
  async updateHashtag(
    @graphql.Args() args: UpdateHashtagArgs
  ): Promise<Hashtag | null> {
    try {
      return await this.service.updateHashtag({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Hashtag)
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "delete",
    possession: "any",
  })
  async deleteHashtag(
    @graphql.Args() args: DeleteHashtagArgs
  ): Promise<Hashtag | null> {
    try {
      return await this.service.deleteHashtag(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ContactHashtagsMap], {
    name: "contactHashtagsMap",
  })
  @nestAccessControl.UseRoles({
    resource: "ContactHashtagsMap",
    action: "read",
    possession: "any",
  })
  async findContactHashtagsMap(
    @graphql.Parent() parent: Hashtag,
    @graphql.Args() args: ContactHashtagsMapFindManyArgs
  ): Promise<ContactHashtagsMap[]> {
    const results = await this.service.findContactHashtagsMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MenuItemsHashtagsMap], {
    name: "menuItemsHashtagsMap",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItemsHashtagsMap",
    action: "read",
    possession: "any",
  })
  async findMenuItemsHashtagsMap(
    @graphql.Parent() parent: Hashtag,
    @graphql.Args() args: MenuItemsHashtagsMapFindManyArgs
  ): Promise<MenuItemsHashtagsMap[]> {
    const results = await this.service.findMenuItemsHashtagsMap(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OrdersHashtagsMap], {
    name: "ordersHashtagsMap",
  })
  @nestAccessControl.UseRoles({
    resource: "OrdersHashtagsMap",
    action: "read",
    possession: "any",
  })
  async findOrdersHashtagsMap(
    @graphql.Parent() parent: Hashtag,
    @graphql.Args() args: OrdersHashtagsMapFindManyArgs
  ): Promise<OrdersHashtagsMap[]> {
    const results = await this.service.findOrdersHashtagsMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [RestaurantsHashtagsMap], {
    name: "restaurantsHashtagsMap",
  })
  @nestAccessControl.UseRoles({
    resource: "RestaurantsHashtagsMap",
    action: "read",
    possession: "any",
  })
  async findRestaurantsHashtagsMap(
    @graphql.Parent() parent: Hashtag,
    @graphql.Args() args: RestaurantsHashtagsMapFindManyArgs
  ): Promise<RestaurantsHashtagsMap[]> {
    const results = await this.service.findRestaurantsHashtagsMap(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UsersHashtagsMap], { name: "usersHashtagsMap" })
  @nestAccessControl.UseRoles({
    resource: "UsersHashtagsMap",
    action: "read",
    possession: "any",
  })
  async findUsersHashtagsMap(
    @graphql.Parent() parent: Hashtag,
    @graphql.Args() args: UsersHashtagsMapFindManyArgs
  ): Promise<UsersHashtagsMap[]> {
    const results = await this.service.findUsersHashtagsMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
