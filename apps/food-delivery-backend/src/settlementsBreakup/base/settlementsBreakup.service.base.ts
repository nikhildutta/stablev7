/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SettlementsBreakup as PrismaSettlementsBreakup,
  AppUser as PrismaAppUser,
  OrderHistory as PrismaOrderHistory,
  PayoutCycle as PrismaPayoutCycle,
} from "@prisma/client";

export class SettlementsBreakupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SettlementsBreakupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.settlementsBreakup.count(args);
  }

  async settlementsBreakups<T extends Prisma.SettlementsBreakupFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SettlementsBreakupFindManyArgs>
  ): Promise<PrismaSettlementsBreakup[]> {
    return this.prisma.settlementsBreakup.findMany<Prisma.SettlementsBreakupFindManyArgs>(
      args
    );
  }
  async settlementsBreakup<T extends Prisma.SettlementsBreakupFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SettlementsBreakupFindUniqueArgs>
  ): Promise<PrismaSettlementsBreakup | null> {
    return this.prisma.settlementsBreakup.findUnique(args);
  }
  async createSettlementsBreakup<T extends Prisma.SettlementsBreakupCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SettlementsBreakupCreateArgs>
  ): Promise<PrismaSettlementsBreakup> {
    return this.prisma.settlementsBreakup.create<T>(args);
  }
  async updateSettlementsBreakup<T extends Prisma.SettlementsBreakupUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SettlementsBreakupUpdateArgs>
  ): Promise<PrismaSettlementsBreakup> {
    return this.prisma.settlementsBreakup.update<T>(args);
  }
  async deleteSettlementsBreakup<T extends Prisma.SettlementsBreakupDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SettlementsBreakupDeleteArgs>
  ): Promise<PrismaSettlementsBreakup> {
    return this.prisma.settlementsBreakup.delete(args);
  }

  async getAppUsers(parentId: string): Promise<PrismaAppUser | null> {
    return this.prisma.settlementsBreakup
      .findUnique({
        where: { id: parentId },
      })
      .appUsers();
  }

  async getOrderHistory(parentId: string): Promise<PrismaOrderHistory | null> {
    return this.prisma.settlementsBreakup
      .findUnique({
        where: { id: parentId },
      })
      .orderHistory();
  }

  async getPayoutCycles(parentId: string): Promise<PrismaPayoutCycle | null> {
    return this.prisma.settlementsBreakup
      .findUnique({
        where: { id: parentId },
      })
      .payoutCycles();
  }
}
