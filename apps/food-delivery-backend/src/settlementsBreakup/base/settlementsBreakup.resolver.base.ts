/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SettlementsBreakup } from "./SettlementsBreakup";
import { SettlementsBreakupCountArgs } from "./SettlementsBreakupCountArgs";
import { SettlementsBreakupFindManyArgs } from "./SettlementsBreakupFindManyArgs";
import { SettlementsBreakupFindUniqueArgs } from "./SettlementsBreakupFindUniqueArgs";
import { CreateSettlementsBreakupArgs } from "./CreateSettlementsBreakupArgs";
import { UpdateSettlementsBreakupArgs } from "./UpdateSettlementsBreakupArgs";
import { DeleteSettlementsBreakupArgs } from "./DeleteSettlementsBreakupArgs";
import { AppUser } from "../../appUser/base/AppUser";
import { OrderHistory } from "../../orderHistory/base/OrderHistory";
import { PayoutCycle } from "../../payoutCycle/base/PayoutCycle";
import { SettlementsBreakupService } from "../settlementsBreakup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SettlementsBreakup)
export class SettlementsBreakupResolverBase {
  constructor(
    protected readonly service: SettlementsBreakupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SettlementsBreakup",
    action: "read",
    possession: "any",
  })
  async _settlementsBreakupsMeta(
    @graphql.Args() args: SettlementsBreakupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SettlementsBreakup])
  @nestAccessControl.UseRoles({
    resource: "SettlementsBreakup",
    action: "read",
    possession: "any",
  })
  async settlementsBreakups(
    @graphql.Args() args: SettlementsBreakupFindManyArgs
  ): Promise<SettlementsBreakup[]> {
    return this.service.settlementsBreakups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SettlementsBreakup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SettlementsBreakup",
    action: "read",
    possession: "own",
  })
  async settlementsBreakup(
    @graphql.Args() args: SettlementsBreakupFindUniqueArgs
  ): Promise<SettlementsBreakup | null> {
    const result = await this.service.settlementsBreakup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SettlementsBreakup)
  @nestAccessControl.UseRoles({
    resource: "SettlementsBreakup",
    action: "create",
    possession: "any",
  })
  async createSettlementsBreakup(
    @graphql.Args() args: CreateSettlementsBreakupArgs
  ): Promise<SettlementsBreakup> {
    return await this.service.createSettlementsBreakup({
      ...args,
      data: {
        ...args.data,

        appUsers: {
          connect: args.data.appUsers,
        },

        orderHistory: {
          connect: args.data.orderHistory,
        },

        payoutCycles: {
          connect: args.data.payoutCycles,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SettlementsBreakup)
  @nestAccessControl.UseRoles({
    resource: "SettlementsBreakup",
    action: "update",
    possession: "any",
  })
  async updateSettlementsBreakup(
    @graphql.Args() args: UpdateSettlementsBreakupArgs
  ): Promise<SettlementsBreakup | null> {
    try {
      return await this.service.updateSettlementsBreakup({
        ...args,
        data: {
          ...args.data,

          appUsers: {
            connect: args.data.appUsers,
          },

          orderHistory: {
            connect: args.data.orderHistory,
          },

          payoutCycles: {
            connect: args.data.payoutCycles,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SettlementsBreakup)
  @nestAccessControl.UseRoles({
    resource: "SettlementsBreakup",
    action: "delete",
    possession: "any",
  })
  async deleteSettlementsBreakup(
    @graphql.Args() args: DeleteSettlementsBreakupArgs
  ): Promise<SettlementsBreakup | null> {
    try {
      return await this.service.deleteSettlementsBreakup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUsers",
  })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async getAppUsers(
    @graphql.Parent() parent: SettlementsBreakup
  ): Promise<AppUser | null> {
    const result = await this.service.getAppUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OrderHistory, {
    nullable: true,
    name: "orderHistory",
  })
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "any",
  })
  async getOrderHistory(
    @graphql.Parent() parent: SettlementsBreakup
  ): Promise<OrderHistory | null> {
    const result = await this.service.getOrderHistory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PayoutCycle, {
    nullable: true,
    name: "payoutCycles",
  })
  @nestAccessControl.UseRoles({
    resource: "PayoutCycle",
    action: "read",
    possession: "any",
  })
  async getPayoutCycles(
    @graphql.Parent() parent: SettlementsBreakup
  ): Promise<PayoutCycle | null> {
    const result = await this.service.getPayoutCycles(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
