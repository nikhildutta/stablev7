/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ComplaintItem as PrismaComplaintItem,
  ComplaintsBook as PrismaComplaintsBook,
  OrderItem as PrismaOrderItem,
} from "@prisma/client";

export class ComplaintItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ComplaintItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.complaintItem.count(args);
  }

  async complaintItems<T extends Prisma.ComplaintItemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintItemFindManyArgs>
  ): Promise<PrismaComplaintItem[]> {
    return this.prisma.complaintItem.findMany<Prisma.ComplaintItemFindManyArgs>(
      args
    );
  }
  async complaintItem<T extends Prisma.ComplaintItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintItemFindUniqueArgs>
  ): Promise<PrismaComplaintItem | null> {
    return this.prisma.complaintItem.findUnique(args);
  }
  async createComplaintItem<T extends Prisma.ComplaintItemCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintItemCreateArgs>
  ): Promise<PrismaComplaintItem> {
    return this.prisma.complaintItem.create<T>(args);
  }
  async updateComplaintItem<T extends Prisma.ComplaintItemUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintItemUpdateArgs>
  ): Promise<PrismaComplaintItem> {
    return this.prisma.complaintItem.update<T>(args);
  }
  async deleteComplaintItem<T extends Prisma.ComplaintItemDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintItemDeleteArgs>
  ): Promise<PrismaComplaintItem> {
    return this.prisma.complaintItem.delete(args);
  }

  async getComplaintsBook(
    parentId: string
  ): Promise<PrismaComplaintsBook | null> {
    return this.prisma.complaintItem
      .findUnique({
        where: { id: parentId },
      })
      .complaintsBook();
  }

  async getOrderItems(parentId: string): Promise<PrismaOrderItem | null> {
    return this.prisma.complaintItem
      .findUnique({
        where: { id: parentId },
      })
      .orderItems();
  }
}
