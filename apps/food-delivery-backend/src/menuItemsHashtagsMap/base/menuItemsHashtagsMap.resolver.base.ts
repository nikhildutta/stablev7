/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MenuItemsHashtagsMap } from "./MenuItemsHashtagsMap";
import { MenuItemsHashtagsMapCountArgs } from "./MenuItemsHashtagsMapCountArgs";
import { MenuItemsHashtagsMapFindManyArgs } from "./MenuItemsHashtagsMapFindManyArgs";
import { MenuItemsHashtagsMapFindUniqueArgs } from "./MenuItemsHashtagsMapFindUniqueArgs";
import { CreateMenuItemsHashtagsMapArgs } from "./CreateMenuItemsHashtagsMapArgs";
import { UpdateMenuItemsHashtagsMapArgs } from "./UpdateMenuItemsHashtagsMapArgs";
import { DeleteMenuItemsHashtagsMapArgs } from "./DeleteMenuItemsHashtagsMapArgs";
import { Hashtag } from "../../hashtag/base/Hashtag";
import { MenuItem } from "../../menuItem/base/MenuItem";
import { MenuItemsHashtagsMapService } from "../menuItemsHashtagsMap.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MenuItemsHashtagsMap)
export class MenuItemsHashtagsMapResolverBase {
  constructor(
    protected readonly service: MenuItemsHashtagsMapService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MenuItemsHashtagsMap",
    action: "read",
    possession: "any",
  })
  async _menuItemsHashtagsMapsMeta(
    @graphql.Args() args: MenuItemsHashtagsMapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MenuItemsHashtagsMap])
  @nestAccessControl.UseRoles({
    resource: "MenuItemsHashtagsMap",
    action: "read",
    possession: "any",
  })
  async menuItemsHashtagsMaps(
    @graphql.Args() args: MenuItemsHashtagsMapFindManyArgs
  ): Promise<MenuItemsHashtagsMap[]> {
    return this.service.menuItemsHashtagsMaps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MenuItemsHashtagsMap, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MenuItemsHashtagsMap",
    action: "read",
    possession: "own",
  })
  async menuItemsHashtagsMap(
    @graphql.Args() args: MenuItemsHashtagsMapFindUniqueArgs
  ): Promise<MenuItemsHashtagsMap | null> {
    const result = await this.service.menuItemsHashtagsMap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuItemsHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "MenuItemsHashtagsMap",
    action: "create",
    possession: "any",
  })
  async createMenuItemsHashtagsMap(
    @graphql.Args() args: CreateMenuItemsHashtagsMapArgs
  ): Promise<MenuItemsHashtagsMap> {
    return await this.service.createMenuItemsHashtagsMap({
      ...args,
      data: {
        ...args.data,

        hashtags: {
          connect: args.data.hashtags,
        },

        menuItems: {
          connect: args.data.menuItems,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuItemsHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "MenuItemsHashtagsMap",
    action: "update",
    possession: "any",
  })
  async updateMenuItemsHashtagsMap(
    @graphql.Args() args: UpdateMenuItemsHashtagsMapArgs
  ): Promise<MenuItemsHashtagsMap | null> {
    try {
      return await this.service.updateMenuItemsHashtagsMap({
        ...args,
        data: {
          ...args.data,

          hashtags: {
            connect: args.data.hashtags,
          },

          menuItems: {
            connect: args.data.menuItems,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MenuItemsHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "MenuItemsHashtagsMap",
    action: "delete",
    possession: "any",
  })
  async deleteMenuItemsHashtagsMap(
    @graphql.Args() args: DeleteMenuItemsHashtagsMapArgs
  ): Promise<MenuItemsHashtagsMap | null> {
    try {
      return await this.service.deleteMenuItemsHashtagsMap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Hashtag, {
    nullable: true,
    name: "hashtags",
  })
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "read",
    possession: "any",
  })
  async getHashtags(
    @graphql.Parent() parent: MenuItemsHashtagsMap
  ): Promise<Hashtag | null> {
    const result = await this.service.getHashtags(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MenuItem, {
    nullable: true,
    name: "menuItems",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  async getMenuItems(
    @graphql.Parent() parent: MenuItemsHashtagsMap
  ): Promise<MenuItem | null> {
    const result = await this.service.getMenuItems(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
