/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UsersHashtagsMap } from "./UsersHashtagsMap";
import { UsersHashtagsMapCountArgs } from "./UsersHashtagsMapCountArgs";
import { UsersHashtagsMapFindManyArgs } from "./UsersHashtagsMapFindManyArgs";
import { UsersHashtagsMapFindUniqueArgs } from "./UsersHashtagsMapFindUniqueArgs";
import { CreateUsersHashtagsMapArgs } from "./CreateUsersHashtagsMapArgs";
import { UpdateUsersHashtagsMapArgs } from "./UpdateUsersHashtagsMapArgs";
import { DeleteUsersHashtagsMapArgs } from "./DeleteUsersHashtagsMapArgs";
import { AppUser } from "../../appUser/base/AppUser";
import { Hashtag } from "../../hashtag/base/Hashtag";
import { UsersHashtagsMapService } from "../usersHashtagsMap.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UsersHashtagsMap)
export class UsersHashtagsMapResolverBase {
  constructor(
    protected readonly service: UsersHashtagsMapService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UsersHashtagsMap",
    action: "read",
    possession: "any",
  })
  async _usersHashtagsMapsMeta(
    @graphql.Args() args: UsersHashtagsMapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UsersHashtagsMap])
  @nestAccessControl.UseRoles({
    resource: "UsersHashtagsMap",
    action: "read",
    possession: "any",
  })
  async usersHashtagsMaps(
    @graphql.Args() args: UsersHashtagsMapFindManyArgs
  ): Promise<UsersHashtagsMap[]> {
    return this.service.usersHashtagsMaps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UsersHashtagsMap, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UsersHashtagsMap",
    action: "read",
    possession: "own",
  })
  async usersHashtagsMap(
    @graphql.Args() args: UsersHashtagsMapFindUniqueArgs
  ): Promise<UsersHashtagsMap | null> {
    const result = await this.service.usersHashtagsMap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UsersHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "UsersHashtagsMap",
    action: "create",
    possession: "any",
  })
  async createUsersHashtagsMap(
    @graphql.Args() args: CreateUsersHashtagsMapArgs
  ): Promise<UsersHashtagsMap> {
    return await this.service.createUsersHashtagsMap({
      ...args,
      data: {
        ...args.data,

        appUsers: {
          connect: args.data.appUsers,
        },

        hashtags: {
          connect: args.data.hashtags,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UsersHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "UsersHashtagsMap",
    action: "update",
    possession: "any",
  })
  async updateUsersHashtagsMap(
    @graphql.Args() args: UpdateUsersHashtagsMapArgs
  ): Promise<UsersHashtagsMap | null> {
    try {
      return await this.service.updateUsersHashtagsMap({
        ...args,
        data: {
          ...args.data,

          appUsers: {
            connect: args.data.appUsers,
          },

          hashtags: {
            connect: args.data.hashtags,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UsersHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "UsersHashtagsMap",
    action: "delete",
    possession: "any",
  })
  async deleteUsersHashtagsMap(
    @graphql.Args() args: DeleteUsersHashtagsMapArgs
  ): Promise<UsersHashtagsMap | null> {
    try {
      return await this.service.deleteUsersHashtagsMap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUsers",
  })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async getAppUsers(
    @graphql.Parent() parent: UsersHashtagsMap
  ): Promise<AppUser | null> {
    const result = await this.service.getAppUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Hashtag, {
    nullable: true,
    name: "hashtags",
  })
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "read",
    possession: "any",
  })
  async getHashtags(
    @graphql.Parent() parent: UsersHashtagsMap
  ): Promise<Hashtag | null> {
    const result = await this.service.getHashtags(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
