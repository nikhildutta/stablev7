/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ContactDetail } from "./ContactDetail";
import { ContactDetailCountArgs } from "./ContactDetailCountArgs";
import { ContactDetailFindManyArgs } from "./ContactDetailFindManyArgs";
import { ContactDetailFindUniqueArgs } from "./ContactDetailFindUniqueArgs";
import { CreateContactDetailArgs } from "./CreateContactDetailArgs";
import { UpdateContactDetailArgs } from "./UpdateContactDetailArgs";
import { DeleteContactDetailArgs } from "./DeleteContactDetailArgs";
import { ContactHashtagsMapFindManyArgs } from "../../contactHashtagsMap/base/ContactHashtagsMapFindManyArgs";
import { ContactHashtagsMap } from "../../contactHashtagsMap/base/ContactHashtagsMap";
import { Address } from "../../address/base/Address";
import { ContactDetailService } from "../contactDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ContactDetail)
export class ContactDetailResolverBase {
  constructor(
    protected readonly service: ContactDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "read",
    possession: "any",
  })
  async _contactDetailsMeta(
    @graphql.Args() args: ContactDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ContactDetail])
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "read",
    possession: "any",
  })
  async contactDetails(
    @graphql.Args() args: ContactDetailFindManyArgs
  ): Promise<ContactDetail[]> {
    return this.service.contactDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ContactDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "read",
    possession: "own",
  })
  async contactDetail(
    @graphql.Args() args: ContactDetailFindUniqueArgs
  ): Promise<ContactDetail | null> {
    const result = await this.service.contactDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactDetail)
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "create",
    possession: "any",
  })
  async createContactDetail(
    @graphql.Args() args: CreateContactDetailArgs
  ): Promise<ContactDetail> {
    return await this.service.createContactDetail({
      ...args,
      data: {
        ...args.data,

        addresses: {
          connect: args.data.addresses,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactDetail)
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "update",
    possession: "any",
  })
  async updateContactDetail(
    @graphql.Args() args: UpdateContactDetailArgs
  ): Promise<ContactDetail | null> {
    try {
      return await this.service.updateContactDetail({
        ...args,
        data: {
          ...args.data,

          addresses: {
            connect: args.data.addresses,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactDetail)
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "delete",
    possession: "any",
  })
  async deleteContactDetail(
    @graphql.Args() args: DeleteContactDetailArgs
  ): Promise<ContactDetail | null> {
    try {
      return await this.service.deleteContactDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ContactHashtagsMap], {
    name: "contactHashtagsMap",
  })
  @nestAccessControl.UseRoles({
    resource: "ContactHashtagsMap",
    action: "read",
    possession: "any",
  })
  async findContactHashtagsMap(
    @graphql.Parent() parent: ContactDetail,
    @graphql.Args() args: ContactHashtagsMapFindManyArgs
  ): Promise<ContactHashtagsMap[]> {
    const results = await this.service.findContactHashtagsMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Address, {
    nullable: true,
    name: "addresses",
  })
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "read",
    possession: "any",
  })
  async getAddresses(
    @graphql.Parent() parent: ContactDetail
  ): Promise<Address | null> {
    const result = await this.service.getAddresses(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
