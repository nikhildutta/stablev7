/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ContactDetailService } from "../contactDetail.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ContactDetailCreateInput } from "./ContactDetailCreateInput";
import { ContactDetail } from "./ContactDetail";
import { ContactDetailFindManyArgs } from "./ContactDetailFindManyArgs";
import { ContactDetailWhereUniqueInput } from "./ContactDetailWhereUniqueInput";
import { ContactDetailUpdateInput } from "./ContactDetailUpdateInput";
import { ContactHashtagsMapFindManyArgs } from "../../contactHashtagsMap/base/ContactHashtagsMapFindManyArgs";
import { ContactHashtagsMap } from "../../contactHashtagsMap/base/ContactHashtagsMap";
import { ContactHashtagsMapWhereUniqueInput } from "../../contactHashtagsMap/base/ContactHashtagsMapWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ContactDetailControllerBase {
  constructor(
    protected readonly service: ContactDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContactDetail })
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createContactDetail(
    @common.Body() data: ContactDetailCreateInput
  ): Promise<ContactDetail> {
    return await this.service.createContactDetail({
      data: {
        ...data,

        addresses: {
          connect: data.addresses,
        },
      },
      select: {
        addresses: {
          select: {
            id: true,
          },
        },

        contactName: true,
        contactNumber: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ContactDetail] })
  @ApiNestedQuery(ContactDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async contactDetails(
    @common.Req() request: Request
  ): Promise<ContactDetail[]> {
    const args = plainToClass(ContactDetailFindManyArgs, request.query);
    return this.service.contactDetails({
      ...args,
      select: {
        addresses: {
          select: {
            id: true,
          },
        },

        contactName: true,
        contactNumber: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContactDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async contactDetail(
    @common.Param() params: ContactDetailWhereUniqueInput
  ): Promise<ContactDetail | null> {
    const result = await this.service.contactDetail({
      where: params,
      select: {
        addresses: {
          select: {
            id: true,
          },
        },

        contactName: true,
        contactNumber: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContactDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateContactDetail(
    @common.Param() params: ContactDetailWhereUniqueInput,
    @common.Body() data: ContactDetailUpdateInput
  ): Promise<ContactDetail | null> {
    try {
      return await this.service.updateContactDetail({
        where: params,
        data: {
          ...data,

          addresses: {
            connect: data.addresses,
          },
        },
        select: {
          addresses: {
            select: {
              id: true,
            },
          },

          contactName: true,
          contactNumber: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContactDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteContactDetail(
    @common.Param() params: ContactDetailWhereUniqueInput
  ): Promise<ContactDetail | null> {
    try {
      return await this.service.deleteContactDetail({
        where: params,
        select: {
          addresses: {
            select: {
              id: true,
            },
          },

          contactName: true,
          contactNumber: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/contactHashtagsMap")
  @ApiNestedQuery(ContactHashtagsMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ContactHashtagsMap",
    action: "read",
    possession: "any",
  })
  async findContactHashtagsMap(
    @common.Req() request: Request,
    @common.Param() params: ContactDetailWhereUniqueInput
  ): Promise<ContactHashtagsMap[]> {
    const query = plainToClass(ContactHashtagsMapFindManyArgs, request.query);
    const results = await this.service.findContactHashtagsMap(params.id, {
      ...query,
      select: {
        contactDetails: {
          select: {
            id: true,
          },
        },

        hashtags: {
          select: {
            id: true,
          },
        },

        id: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/contactHashtagsMap")
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "update",
    possession: "any",
  })
  async connectContactHashtagsMap(
    @common.Param() params: ContactDetailWhereUniqueInput,
    @common.Body() body: ContactHashtagsMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactHashtagsMap: {
        connect: body,
      },
    };
    await this.service.updateContactDetail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/contactHashtagsMap")
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "update",
    possession: "any",
  })
  async updateContactHashtagsMap(
    @common.Param() params: ContactDetailWhereUniqueInput,
    @common.Body() body: ContactHashtagsMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactHashtagsMap: {
        set: body,
      },
    };
    await this.service.updateContactDetail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/contactHashtagsMap")
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "update",
    possession: "any",
  })
  async disconnectContactHashtagsMap(
    @common.Param() params: ContactDetailWhereUniqueInput,
    @common.Body() body: ContactHashtagsMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      contactHashtagsMap: {
        disconnect: body,
      },
    };
    await this.service.updateContactDetail({
      where: params,
      data,
      select: { id: true },
    });
  }
}
