/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ContactDetail as PrismaContactDetail,
  ContactHashtagsMap as PrismaContactHashtagsMap,
  Address as PrismaAddress,
} from "@prisma/client";

export class ContactDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContactDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contactDetail.count(args);
  }

  async contactDetails<T extends Prisma.ContactDetailFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContactDetailFindManyArgs>
  ): Promise<PrismaContactDetail[]> {
    return this.prisma.contactDetail.findMany<Prisma.ContactDetailFindManyArgs>(
      args
    );
  }
  async contactDetail<T extends Prisma.ContactDetailFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContactDetailFindUniqueArgs>
  ): Promise<PrismaContactDetail | null> {
    return this.prisma.contactDetail.findUnique(args);
  }
  async createContactDetail<T extends Prisma.ContactDetailCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContactDetailCreateArgs>
  ): Promise<PrismaContactDetail> {
    return this.prisma.contactDetail.create<T>(args);
  }
  async updateContactDetail<T extends Prisma.ContactDetailUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContactDetailUpdateArgs>
  ): Promise<PrismaContactDetail> {
    return this.prisma.contactDetail.update<T>(args);
  }
  async deleteContactDetail<T extends Prisma.ContactDetailDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContactDetailDeleteArgs>
  ): Promise<PrismaContactDetail> {
    return this.prisma.contactDetail.delete(args);
  }

  async findContactHashtagsMap(
    parentId: string,
    args: Prisma.ContactHashtagsMapFindManyArgs
  ): Promise<PrismaContactHashtagsMap[]> {
    return this.prisma.contactDetail
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .contactHashtagsMap(args);
  }

  async getAddresses(parentId: string): Promise<PrismaAddress | null> {
    return this.prisma.contactDetail
      .findUnique({
        where: { id: parentId },
      })
      .addresses();
  }
}
