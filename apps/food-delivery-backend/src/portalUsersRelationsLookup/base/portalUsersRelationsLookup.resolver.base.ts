/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PortalUsersRelationsLookup } from "./PortalUsersRelationsLookup";
import { PortalUsersRelationsLookupCountArgs } from "./PortalUsersRelationsLookupCountArgs";
import { PortalUsersRelationsLookupFindManyArgs } from "./PortalUsersRelationsLookupFindManyArgs";
import { PortalUsersRelationsLookupFindUniqueArgs } from "./PortalUsersRelationsLookupFindUniqueArgs";
import { CreatePortalUsersRelationsLookupArgs } from "./CreatePortalUsersRelationsLookupArgs";
import { UpdatePortalUsersRelationsLookupArgs } from "./UpdatePortalUsersRelationsLookupArgs";
import { DeletePortalUsersRelationsLookupArgs } from "./DeletePortalUsersRelationsLookupArgs";
import { PortalUser } from "../../portalUser/base/PortalUser";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { PortalUsersRelationsLookupService } from "../portalUsersRelationsLookup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PortalUsersRelationsLookup)
export class PortalUsersRelationsLookupResolverBase {
  constructor(
    protected readonly service: PortalUsersRelationsLookupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PortalUsersRelationsLookup",
    action: "read",
    possession: "any",
  })
  async _portalUsersRelationsLookupsMeta(
    @graphql.Args() args: PortalUsersRelationsLookupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PortalUsersRelationsLookup])
  @nestAccessControl.UseRoles({
    resource: "PortalUsersRelationsLookup",
    action: "read",
    possession: "any",
  })
  async portalUsersRelationsLookups(
    @graphql.Args() args: PortalUsersRelationsLookupFindManyArgs
  ): Promise<PortalUsersRelationsLookup[]> {
    return this.service.portalUsersRelationsLookups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PortalUsersRelationsLookup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PortalUsersRelationsLookup",
    action: "read",
    possession: "own",
  })
  async portalUsersRelationsLookup(
    @graphql.Args() args: PortalUsersRelationsLookupFindUniqueArgs
  ): Promise<PortalUsersRelationsLookup | null> {
    const result = await this.service.portalUsersRelationsLookup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PortalUsersRelationsLookup)
  @nestAccessControl.UseRoles({
    resource: "PortalUsersRelationsLookup",
    action: "create",
    possession: "any",
  })
  async createPortalUsersRelationsLookup(
    @graphql.Args() args: CreatePortalUsersRelationsLookupArgs
  ): Promise<PortalUsersRelationsLookup> {
    return await this.service.createPortalUsersRelationsLookup({
      ...args,
      data: {
        ...args.data,

        portalUsers: {
          connect: args.data.portalUsers,
        },

        restaurants: {
          connect: args.data.restaurants,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PortalUsersRelationsLookup)
  @nestAccessControl.UseRoles({
    resource: "PortalUsersRelationsLookup",
    action: "update",
    possession: "any",
  })
  async updatePortalUsersRelationsLookup(
    @graphql.Args() args: UpdatePortalUsersRelationsLookupArgs
  ): Promise<PortalUsersRelationsLookup | null> {
    try {
      return await this.service.updatePortalUsersRelationsLookup({
        ...args,
        data: {
          ...args.data,

          portalUsers: {
            connect: args.data.portalUsers,
          },

          restaurants: {
            connect: args.data.restaurants,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PortalUsersRelationsLookup)
  @nestAccessControl.UseRoles({
    resource: "PortalUsersRelationsLookup",
    action: "delete",
    possession: "any",
  })
  async deletePortalUsersRelationsLookup(
    @graphql.Args() args: DeletePortalUsersRelationsLookupArgs
  ): Promise<PortalUsersRelationsLookup | null> {
    try {
      return await this.service.deletePortalUsersRelationsLookup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PortalUser, {
    nullable: true,
    name: "portalUsers",
  })
  @nestAccessControl.UseRoles({
    resource: "PortalUser",
    action: "read",
    possession: "any",
  })
  async getPortalUsers(
    @graphql.Parent() parent: PortalUsersRelationsLookup
  ): Promise<PortalUser | null> {
    const result = await this.service.getPortalUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurants",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurants(
    @graphql.Parent() parent: PortalUsersRelationsLookup
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurants(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
