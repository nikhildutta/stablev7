/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PortalUsersRelationsLookup as PrismaPortalUsersRelationsLookup,
  PortalUser as PrismaPortalUser,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class PortalUsersRelationsLookupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PortalUsersRelationsLookupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.portalUsersRelationsLookup.count(args);
  }

  async portalUsersRelationsLookups<
    T extends Prisma.PortalUsersRelationsLookupFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PortalUsersRelationsLookupFindManyArgs>
  ): Promise<PrismaPortalUsersRelationsLookup[]> {
    return this.prisma.portalUsersRelationsLookup.findMany<Prisma.PortalUsersRelationsLookupFindManyArgs>(
      args
    );
  }
  async portalUsersRelationsLookup<
    T extends Prisma.PortalUsersRelationsLookupFindUniqueArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.PortalUsersRelationsLookupFindUniqueArgs
    >
  ): Promise<PrismaPortalUsersRelationsLookup | null> {
    return this.prisma.portalUsersRelationsLookup.findUnique(args);
  }
  async createPortalUsersRelationsLookup<
    T extends Prisma.PortalUsersRelationsLookupCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PortalUsersRelationsLookupCreateArgs>
  ): Promise<PrismaPortalUsersRelationsLookup> {
    return this.prisma.portalUsersRelationsLookup.create<T>(args);
  }
  async updatePortalUsersRelationsLookup<
    T extends Prisma.PortalUsersRelationsLookupUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PortalUsersRelationsLookupUpdateArgs>
  ): Promise<PrismaPortalUsersRelationsLookup> {
    return this.prisma.portalUsersRelationsLookup.update<T>(args);
  }
  async deletePortalUsersRelationsLookup<
    T extends Prisma.PortalUsersRelationsLookupDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.PortalUsersRelationsLookupDeleteArgs>
  ): Promise<PrismaPortalUsersRelationsLookup> {
    return this.prisma.portalUsersRelationsLookup.delete(args);
  }

  async getPortalUsers(parentId: string): Promise<PrismaPortalUser | null> {
    return this.prisma.portalUsersRelationsLookup
      .findUnique({
        where: { id: parentId },
      })
      .portalUsers();
  }

  async getRestaurants(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.portalUsersRelationsLookup
      .findUnique({
        where: { id: parentId },
      })
      .restaurants();
  }
}
