/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RestaurantPreference } from "./RestaurantPreference";
import { RestaurantPreferenceCountArgs } from "./RestaurantPreferenceCountArgs";
import { RestaurantPreferenceFindManyArgs } from "./RestaurantPreferenceFindManyArgs";
import { RestaurantPreferenceFindUniqueArgs } from "./RestaurantPreferenceFindUniqueArgs";
import { CreateRestaurantPreferenceArgs } from "./CreateRestaurantPreferenceArgs";
import { UpdateRestaurantPreferenceArgs } from "./UpdateRestaurantPreferenceArgs";
import { DeleteRestaurantPreferenceArgs } from "./DeleteRestaurantPreferenceArgs";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { RestaurantPreferenceService } from "../restaurantPreference.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RestaurantPreference)
export class RestaurantPreferenceResolverBase {
  constructor(
    protected readonly service: RestaurantPreferenceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RestaurantPreference",
    action: "read",
    possession: "any",
  })
  async _restaurantPreferencesMeta(
    @graphql.Args() args: RestaurantPreferenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RestaurantPreference])
  @nestAccessControl.UseRoles({
    resource: "RestaurantPreference",
    action: "read",
    possession: "any",
  })
  async restaurantPreferences(
    @graphql.Args() args: RestaurantPreferenceFindManyArgs
  ): Promise<RestaurantPreference[]> {
    return this.service.restaurantPreferences(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RestaurantPreference, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RestaurantPreference",
    action: "read",
    possession: "own",
  })
  async restaurantPreference(
    @graphql.Args() args: RestaurantPreferenceFindUniqueArgs
  ): Promise<RestaurantPreference | null> {
    const result = await this.service.restaurantPreference(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantPreference)
  @nestAccessControl.UseRoles({
    resource: "RestaurantPreference",
    action: "create",
    possession: "any",
  })
  async createRestaurantPreference(
    @graphql.Args() args: CreateRestaurantPreferenceArgs
  ): Promise<RestaurantPreference> {
    return await this.service.createRestaurantPreference({
      ...args,
      data: {
        ...args.data,

        restaurants: {
          connect: args.data.restaurants,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantPreference)
  @nestAccessControl.UseRoles({
    resource: "RestaurantPreference",
    action: "update",
    possession: "any",
  })
  async updateRestaurantPreference(
    @graphql.Args() args: UpdateRestaurantPreferenceArgs
  ): Promise<RestaurantPreference | null> {
    try {
      return await this.service.updateRestaurantPreference({
        ...args,
        data: {
          ...args.data,

          restaurants: {
            connect: args.data.restaurants,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RestaurantPreference)
  @nestAccessControl.UseRoles({
    resource: "RestaurantPreference",
    action: "delete",
    possession: "any",
  })
  async deleteRestaurantPreference(
    @graphql.Args() args: DeleteRestaurantPreferenceArgs
  ): Promise<RestaurantPreference | null> {
    try {
      return await this.service.deleteRestaurantPreference(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurants",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurants(
    @graphql.Parent() parent: RestaurantPreference
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurants(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
