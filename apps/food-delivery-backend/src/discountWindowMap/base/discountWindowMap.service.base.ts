/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DiscountWindowMap as PrismaDiscountWindowMap,
  Discount as PrismaDiscount,
  TimeWindow as PrismaTimeWindow,
} from "@prisma/client";

export class DiscountWindowMapServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DiscountWindowMapCountArgs, "select">
  ): Promise<number> {
    return this.prisma.discountWindowMap.count(args);
  }

  async discountWindowMaps<T extends Prisma.DiscountWindowMapFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiscountWindowMapFindManyArgs>
  ): Promise<PrismaDiscountWindowMap[]> {
    return this.prisma.discountWindowMap.findMany<Prisma.DiscountWindowMapFindManyArgs>(
      args
    );
  }
  async discountWindowMap<T extends Prisma.DiscountWindowMapFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiscountWindowMapFindUniqueArgs>
  ): Promise<PrismaDiscountWindowMap | null> {
    return this.prisma.discountWindowMap.findUnique(args);
  }
  async createDiscountWindowMap<T extends Prisma.DiscountWindowMapCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiscountWindowMapCreateArgs>
  ): Promise<PrismaDiscountWindowMap> {
    return this.prisma.discountWindowMap.create<T>(args);
  }
  async updateDiscountWindowMap<T extends Prisma.DiscountWindowMapUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiscountWindowMapUpdateArgs>
  ): Promise<PrismaDiscountWindowMap> {
    return this.prisma.discountWindowMap.update<T>(args);
  }
  async deleteDiscountWindowMap<T extends Prisma.DiscountWindowMapDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiscountWindowMapDeleteArgs>
  ): Promise<PrismaDiscountWindowMap> {
    return this.prisma.discountWindowMap.delete(args);
  }

  async getDiscount(parentId: string): Promise<PrismaDiscount | null> {
    return this.prisma.discountWindowMap
      .findUnique({
        where: { id: parentId },
      })
      .discount();
  }

  async getTimeWindow(parentId: string): Promise<PrismaTimeWindow | null> {
    return this.prisma.discountWindowMap
      .findUnique({
        where: { id: parentId },
      })
      .timeWindow();
  }
}
