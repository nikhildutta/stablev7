/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ComboGroupService } from "../comboGroup.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ComboGroupCreateInput } from "./ComboGroupCreateInput";
import { ComboGroup } from "./ComboGroup";
import { ComboGroupFindManyArgs } from "./ComboGroupFindManyArgs";
import { ComboGroupWhereUniqueInput } from "./ComboGroupWhereUniqueInput";
import { ComboGroupUpdateInput } from "./ComboGroupUpdateInput";
import { ComboItemTableFindManyArgs } from "../../comboItemTable/base/ComboItemTableFindManyArgs";
import { ComboItemTable } from "../../comboItemTable/base/ComboItemTable";
import { ComboItemTableWhereUniqueInput } from "../../comboItemTable/base/ComboItemTableWhereUniqueInput";
import { ComboItemWindowMapFindManyArgs } from "../../comboItemWindowMap/base/ComboItemWindowMapFindManyArgs";
import { ComboItemWindowMap } from "../../comboItemWindowMap/base/ComboItemWindowMap";
import { ComboItemWindowMapWhereUniqueInput } from "../../comboItemWindowMap/base/ComboItemWindowMapWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ComboGroupControllerBase {
  constructor(
    protected readonly service: ComboGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ComboGroup })
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createComboGroup(
    @common.Body() data: ComboGroupCreateInput
  ): Promise<ComboGroup> {
    return await this.service.createComboGroup({
      data: {
        ...data,

        restaurants: {
          connect: data.restaurants,
        },
      },
      select: {
        comboBasePrice: true,
        comboDescription: true,
        comboName: true,
        combo_type: true,
        createdAt: true,
        id: true,
        isBankCoupon: true,
        isPlatformCoupon: true,
        isRestuaruantCoupon: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ComboGroup] })
  @ApiNestedQuery(ComboGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async comboGroups(@common.Req() request: Request): Promise<ComboGroup[]> {
    const args = plainToClass(ComboGroupFindManyArgs, request.query);
    return this.service.comboGroups({
      ...args,
      select: {
        comboBasePrice: true,
        comboDescription: true,
        comboName: true,
        combo_type: true,
        createdAt: true,
        id: true,
        isBankCoupon: true,
        isPlatformCoupon: true,
        isRestuaruantCoupon: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ComboGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async comboGroup(
    @common.Param() params: ComboGroupWhereUniqueInput
  ): Promise<ComboGroup | null> {
    const result = await this.service.comboGroup({
      where: params,
      select: {
        comboBasePrice: true,
        comboDescription: true,
        comboName: true,
        combo_type: true,
        createdAt: true,
        id: true,
        isBankCoupon: true,
        isPlatformCoupon: true,
        isRestuaruantCoupon: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ComboGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateComboGroup(
    @common.Param() params: ComboGroupWhereUniqueInput,
    @common.Body() data: ComboGroupUpdateInput
  ): Promise<ComboGroup | null> {
    try {
      return await this.service.updateComboGroup({
        where: params,
        data: {
          ...data,

          restaurants: {
            connect: data.restaurants,
          },
        },
        select: {
          comboBasePrice: true,
          comboDescription: true,
          comboName: true,
          combo_type: true,
          createdAt: true,
          id: true,
          isBankCoupon: true,
          isPlatformCoupon: true,
          isRestuaruantCoupon: true,

          restaurants: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ComboGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteComboGroup(
    @common.Param() params: ComboGroupWhereUniqueInput
  ): Promise<ComboGroup | null> {
    try {
      return await this.service.deleteComboGroup({
        where: params,
        select: {
          comboBasePrice: true,
          comboDescription: true,
          comboName: true,
          combo_type: true,
          createdAt: true,
          id: true,
          isBankCoupon: true,
          isPlatformCoupon: true,
          isRestuaruantCoupon: true,

          restaurants: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/comboItemTable")
  @ApiNestedQuery(ComboItemTableFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComboItemTable",
    action: "read",
    possession: "any",
  })
  async findComboItemTable(
    @common.Req() request: Request,
    @common.Param() params: ComboGroupWhereUniqueInput
  ): Promise<ComboItemTable[]> {
    const query = plainToClass(ComboItemTableFindManyArgs, request.query);
    const results = await this.service.findComboItemTable(params.id, {
      ...query,
      select: {
        comboGroups: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isAddonAllowed: true,

        optionsVarientsItem: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/comboItemTable")
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "update",
    possession: "any",
  })
  async connectComboItemTable(
    @common.Param() params: ComboGroupWhereUniqueInput,
    @common.Body() body: ComboItemTableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboItemTable: {
        connect: body,
      },
    };
    await this.service.updateComboGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/comboItemTable")
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "update",
    possession: "any",
  })
  async updateComboItemTable(
    @common.Param() params: ComboGroupWhereUniqueInput,
    @common.Body() body: ComboItemTableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboItemTable: {
        set: body,
      },
    };
    await this.service.updateComboGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/comboItemTable")
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "update",
    possession: "any",
  })
  async disconnectComboItemTable(
    @common.Param() params: ComboGroupWhereUniqueInput,
    @common.Body() body: ComboItemTableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboItemTable: {
        disconnect: body,
      },
    };
    await this.service.updateComboGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/comboItemWindowMap")
  @ApiNestedQuery(ComboItemWindowMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComboItemWindowMap",
    action: "read",
    possession: "any",
  })
  async findComboItemWindowMap(
    @common.Req() request: Request,
    @common.Param() params: ComboGroupWhereUniqueInput
  ): Promise<ComboItemWindowMap[]> {
    const query = plainToClass(ComboItemWindowMapFindManyArgs, request.query);
    const results = await this.service.findComboItemWindowMap(params.id, {
      ...query,
      select: {
        comboGroups: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        is247: true,

        timeWindow: {
          select: {
            id: true,
          },
        },

        time_window_day: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/comboItemWindowMap")
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "update",
    possession: "any",
  })
  async connectComboItemWindowMap(
    @common.Param() params: ComboGroupWhereUniqueInput,
    @common.Body() body: ComboItemWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboItemWindowMap: {
        connect: body,
      },
    };
    await this.service.updateComboGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/comboItemWindowMap")
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "update",
    possession: "any",
  })
  async updateComboItemWindowMap(
    @common.Param() params: ComboGroupWhereUniqueInput,
    @common.Body() body: ComboItemWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboItemWindowMap: {
        set: body,
      },
    };
    await this.service.updateComboGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/comboItemWindowMap")
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "update",
    possession: "any",
  })
  async disconnectComboItemWindowMap(
    @common.Param() params: ComboGroupWhereUniqueInput,
    @common.Body() body: ComboItemWindowMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboItemWindowMap: {
        disconnect: body,
      },
    };
    await this.service.updateComboGroup({
      where: params,
      data,
      select: { id: true },
    });
  }
}
