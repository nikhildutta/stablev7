/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ComboGroup } from "./ComboGroup";
import { ComboGroupCountArgs } from "./ComboGroupCountArgs";
import { ComboGroupFindManyArgs } from "./ComboGroupFindManyArgs";
import { ComboGroupFindUniqueArgs } from "./ComboGroupFindUniqueArgs";
import { CreateComboGroupArgs } from "./CreateComboGroupArgs";
import { UpdateComboGroupArgs } from "./UpdateComboGroupArgs";
import { DeleteComboGroupArgs } from "./DeleteComboGroupArgs";
import { ComboItemTableFindManyArgs } from "../../comboItemTable/base/ComboItemTableFindManyArgs";
import { ComboItemTable } from "../../comboItemTable/base/ComboItemTable";
import { ComboItemWindowMapFindManyArgs } from "../../comboItemWindowMap/base/ComboItemWindowMapFindManyArgs";
import { ComboItemWindowMap } from "../../comboItemWindowMap/base/ComboItemWindowMap";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { ComboGroupService } from "../comboGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ComboGroup)
export class ComboGroupResolverBase {
  constructor(
    protected readonly service: ComboGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "read",
    possession: "any",
  })
  async _comboGroupsMeta(
    @graphql.Args() args: ComboGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ComboGroup])
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "read",
    possession: "any",
  })
  async comboGroups(
    @graphql.Args() args: ComboGroupFindManyArgs
  ): Promise<ComboGroup[]> {
    return this.service.comboGroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ComboGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "read",
    possession: "own",
  })
  async comboGroup(
    @graphql.Args() args: ComboGroupFindUniqueArgs
  ): Promise<ComboGroup | null> {
    const result = await this.service.comboGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ComboGroup)
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "create",
    possession: "any",
  })
  async createComboGroup(
    @graphql.Args() args: CreateComboGroupArgs
  ): Promise<ComboGroup> {
    return await this.service.createComboGroup({
      ...args,
      data: {
        ...args.data,

        restaurants: {
          connect: args.data.restaurants,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ComboGroup)
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "update",
    possession: "any",
  })
  async updateComboGroup(
    @graphql.Args() args: UpdateComboGroupArgs
  ): Promise<ComboGroup | null> {
    try {
      return await this.service.updateComboGroup({
        ...args,
        data: {
          ...args.data,

          restaurants: {
            connect: args.data.restaurants,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ComboGroup)
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "delete",
    possession: "any",
  })
  async deleteComboGroup(
    @graphql.Args() args: DeleteComboGroupArgs
  ): Promise<ComboGroup | null> {
    try {
      return await this.service.deleteComboGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ComboItemTable], { name: "comboItemTable" })
  @nestAccessControl.UseRoles({
    resource: "ComboItemTable",
    action: "read",
    possession: "any",
  })
  async findComboItemTable(
    @graphql.Parent() parent: ComboGroup,
    @graphql.Args() args: ComboItemTableFindManyArgs
  ): Promise<ComboItemTable[]> {
    const results = await this.service.findComboItemTable(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ComboItemWindowMap], {
    name: "comboItemWindowMap",
  })
  @nestAccessControl.UseRoles({
    resource: "ComboItemWindowMap",
    action: "read",
    possession: "any",
  })
  async findComboItemWindowMap(
    @graphql.Parent() parent: ComboGroup,
    @graphql.Args() args: ComboItemWindowMapFindManyArgs
  ): Promise<ComboItemWindowMap[]> {
    const results = await this.service.findComboItemWindowMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurants",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurants(
    @graphql.Parent() parent: ComboGroup
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurants(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
