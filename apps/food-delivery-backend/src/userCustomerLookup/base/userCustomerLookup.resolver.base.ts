/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserCustomerLookup } from "./UserCustomerLookup";
import { UserCustomerLookupCountArgs } from "./UserCustomerLookupCountArgs";
import { UserCustomerLookupFindManyArgs } from "./UserCustomerLookupFindManyArgs";
import { UserCustomerLookupFindUniqueArgs } from "./UserCustomerLookupFindUniqueArgs";
import { CreateUserCustomerLookupArgs } from "./CreateUserCustomerLookupArgs";
import { UpdateUserCustomerLookupArgs } from "./UpdateUserCustomerLookupArgs";
import { DeleteUserCustomerLookupArgs } from "./DeleteUserCustomerLookupArgs";
import { AppUser } from "../../appUser/base/AppUser";
import { Customer } from "../../customer/base/Customer";
import { UserCustomerLookupService } from "../userCustomerLookup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserCustomerLookup)
export class UserCustomerLookupResolverBase {
  constructor(
    protected readonly service: UserCustomerLookupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserCustomerLookup",
    action: "read",
    possession: "any",
  })
  async _userCustomerLookupsMeta(
    @graphql.Args() args: UserCustomerLookupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserCustomerLookup])
  @nestAccessControl.UseRoles({
    resource: "UserCustomerLookup",
    action: "read",
    possession: "any",
  })
  async userCustomerLookups(
    @graphql.Args() args: UserCustomerLookupFindManyArgs
  ): Promise<UserCustomerLookup[]> {
    return this.service.userCustomerLookups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserCustomerLookup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserCustomerLookup",
    action: "read",
    possession: "own",
  })
  async userCustomerLookup(
    @graphql.Args() args: UserCustomerLookupFindUniqueArgs
  ): Promise<UserCustomerLookup | null> {
    const result = await this.service.userCustomerLookup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserCustomerLookup)
  @nestAccessControl.UseRoles({
    resource: "UserCustomerLookup",
    action: "create",
    possession: "any",
  })
  async createUserCustomerLookup(
    @graphql.Args() args: CreateUserCustomerLookupArgs
  ): Promise<UserCustomerLookup> {
    return await this.service.createUserCustomerLookup({
      ...args,
      data: {
        ...args.data,

        appUsers: {
          connect: args.data.appUsers,
        },

        customers: {
          connect: args.data.customers,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserCustomerLookup)
  @nestAccessControl.UseRoles({
    resource: "UserCustomerLookup",
    action: "update",
    possession: "any",
  })
  async updateUserCustomerLookup(
    @graphql.Args() args: UpdateUserCustomerLookupArgs
  ): Promise<UserCustomerLookup | null> {
    try {
      return await this.service.updateUserCustomerLookup({
        ...args,
        data: {
          ...args.data,

          appUsers: {
            connect: args.data.appUsers,
          },

          customers: {
            connect: args.data.customers,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserCustomerLookup)
  @nestAccessControl.UseRoles({
    resource: "UserCustomerLookup",
    action: "delete",
    possession: "any",
  })
  async deleteUserCustomerLookup(
    @graphql.Args() args: DeleteUserCustomerLookupArgs
  ): Promise<UserCustomerLookup | null> {
    try {
      return await this.service.deleteUserCustomerLookup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUsers",
  })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async getAppUsers(
    @graphql.Parent() parent: UserCustomerLookup
  ): Promise<AppUser | null> {
    const result = await this.service.getAppUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customers",
  })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async getCustomers(
    @graphql.Parent() parent: UserCustomerLookup
  ): Promise<Customer | null> {
    const result = await this.service.getCustomers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
