/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ContactHashtagsMap } from "./ContactHashtagsMap";
import { ContactHashtagsMapCountArgs } from "./ContactHashtagsMapCountArgs";
import { ContactHashtagsMapFindManyArgs } from "./ContactHashtagsMapFindManyArgs";
import { ContactHashtagsMapFindUniqueArgs } from "./ContactHashtagsMapFindUniqueArgs";
import { CreateContactHashtagsMapArgs } from "./CreateContactHashtagsMapArgs";
import { UpdateContactHashtagsMapArgs } from "./UpdateContactHashtagsMapArgs";
import { DeleteContactHashtagsMapArgs } from "./DeleteContactHashtagsMapArgs";
import { ContactDetail } from "../../contactDetail/base/ContactDetail";
import { Hashtag } from "../../hashtag/base/Hashtag";
import { ContactHashtagsMapService } from "../contactHashtagsMap.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ContactHashtagsMap)
export class ContactHashtagsMapResolverBase {
  constructor(
    protected readonly service: ContactHashtagsMapService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ContactHashtagsMap",
    action: "read",
    possession: "any",
  })
  async _contactHashtagsMapsMeta(
    @graphql.Args() args: ContactHashtagsMapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ContactHashtagsMap])
  @nestAccessControl.UseRoles({
    resource: "ContactHashtagsMap",
    action: "read",
    possession: "any",
  })
  async contactHashtagsMaps(
    @graphql.Args() args: ContactHashtagsMapFindManyArgs
  ): Promise<ContactHashtagsMap[]> {
    return this.service.contactHashtagsMaps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ContactHashtagsMap, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ContactHashtagsMap",
    action: "read",
    possession: "own",
  })
  async contactHashtagsMap(
    @graphql.Args() args: ContactHashtagsMapFindUniqueArgs
  ): Promise<ContactHashtagsMap | null> {
    const result = await this.service.contactHashtagsMap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "ContactHashtagsMap",
    action: "create",
    possession: "any",
  })
  async createContactHashtagsMap(
    @graphql.Args() args: CreateContactHashtagsMapArgs
  ): Promise<ContactHashtagsMap> {
    return await this.service.createContactHashtagsMap({
      ...args,
      data: {
        ...args.data,

        contactDetails: {
          connect: args.data.contactDetails,
        },

        hashtags: {
          connect: args.data.hashtags,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "ContactHashtagsMap",
    action: "update",
    possession: "any",
  })
  async updateContactHashtagsMap(
    @graphql.Args() args: UpdateContactHashtagsMapArgs
  ): Promise<ContactHashtagsMap | null> {
    try {
      return await this.service.updateContactHashtagsMap({
        ...args,
        data: {
          ...args.data,

          contactDetails: {
            connect: args.data.contactDetails,
          },

          hashtags: {
            connect: args.data.hashtags,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "ContactHashtagsMap",
    action: "delete",
    possession: "any",
  })
  async deleteContactHashtagsMap(
    @graphql.Args() args: DeleteContactHashtagsMapArgs
  ): Promise<ContactHashtagsMap | null> {
    try {
      return await this.service.deleteContactHashtagsMap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ContactDetail, {
    nullable: true,
    name: "contactDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "ContactDetail",
    action: "read",
    possession: "any",
  })
  async getContactDetails(
    @graphql.Parent() parent: ContactHashtagsMap
  ): Promise<ContactDetail | null> {
    const result = await this.service.getContactDetails(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Hashtag, {
    nullable: true,
    name: "hashtags",
  })
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "read",
    possession: "any",
  })
  async getHashtags(
    @graphql.Parent() parent: ContactHashtagsMap
  ): Promise<Hashtag | null> {
    const result = await this.service.getHashtags(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
