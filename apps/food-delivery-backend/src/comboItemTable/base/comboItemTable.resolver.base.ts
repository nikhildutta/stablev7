/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ComboItemTable } from "./ComboItemTable";
import { ComboItemTableCountArgs } from "./ComboItemTableCountArgs";
import { ComboItemTableFindManyArgs } from "./ComboItemTableFindManyArgs";
import { ComboItemTableFindUniqueArgs } from "./ComboItemTableFindUniqueArgs";
import { CreateComboItemTableArgs } from "./CreateComboItemTableArgs";
import { UpdateComboItemTableArgs } from "./UpdateComboItemTableArgs";
import { DeleteComboItemTableArgs } from "./DeleteComboItemTableArgs";
import { ComboGroup } from "../../comboGroup/base/ComboGroup";
import { OptionsVarientsItem } from "../../optionsVarientsItem/base/OptionsVarientsItem";
import { ComboItemTableService } from "../comboItemTable.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ComboItemTable)
export class ComboItemTableResolverBase {
  constructor(
    protected readonly service: ComboItemTableService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ComboItemTable",
    action: "read",
    possession: "any",
  })
  async _comboItemTablesMeta(
    @graphql.Args() args: ComboItemTableCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ComboItemTable])
  @nestAccessControl.UseRoles({
    resource: "ComboItemTable",
    action: "read",
    possession: "any",
  })
  async comboItemTables(
    @graphql.Args() args: ComboItemTableFindManyArgs
  ): Promise<ComboItemTable[]> {
    return this.service.comboItemTables(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ComboItemTable, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ComboItemTable",
    action: "read",
    possession: "own",
  })
  async comboItemTable(
    @graphql.Args() args: ComboItemTableFindUniqueArgs
  ): Promise<ComboItemTable | null> {
    const result = await this.service.comboItemTable(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ComboItemTable)
  @nestAccessControl.UseRoles({
    resource: "ComboItemTable",
    action: "create",
    possession: "any",
  })
  async createComboItemTable(
    @graphql.Args() args: CreateComboItemTableArgs
  ): Promise<ComboItemTable> {
    return await this.service.createComboItemTable({
      ...args,
      data: {
        ...args.data,

        comboGroups: {
          connect: args.data.comboGroups,
        },

        optionsVarientsItem: {
          connect: args.data.optionsVarientsItem,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ComboItemTable)
  @nestAccessControl.UseRoles({
    resource: "ComboItemTable",
    action: "update",
    possession: "any",
  })
  async updateComboItemTable(
    @graphql.Args() args: UpdateComboItemTableArgs
  ): Promise<ComboItemTable | null> {
    try {
      return await this.service.updateComboItemTable({
        ...args,
        data: {
          ...args.data,

          comboGroups: {
            connect: args.data.comboGroups,
          },

          optionsVarientsItem: {
            connect: args.data.optionsVarientsItem,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ComboItemTable)
  @nestAccessControl.UseRoles({
    resource: "ComboItemTable",
    action: "delete",
    possession: "any",
  })
  async deleteComboItemTable(
    @graphql.Args() args: DeleteComboItemTableArgs
  ): Promise<ComboItemTable | null> {
    try {
      return await this.service.deleteComboItemTable(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ComboGroup, {
    nullable: true,
    name: "comboGroups",
  })
  @nestAccessControl.UseRoles({
    resource: "ComboGroup",
    action: "read",
    possession: "any",
  })
  async getComboGroups(
    @graphql.Parent() parent: ComboItemTable
  ): Promise<ComboGroup | null> {
    const result = await this.service.getComboGroups(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OptionsVarientsItem, {
    nullable: true,
    name: "optionsVarientsItem",
  })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "read",
    possession: "any",
  })
  async getOptionsVarientsItem(
    @graphql.Parent() parent: ComboItemTable
  ): Promise<OptionsVarientsItem | null> {
    const result = await this.service.getOptionsVarientsItem(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
