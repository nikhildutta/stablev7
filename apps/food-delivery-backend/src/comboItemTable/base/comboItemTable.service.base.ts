/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ComboItemTable as PrismaComboItemTable,
  ComboGroup as PrismaComboGroup,
  OptionsVarientsItem as PrismaOptionsVarientsItem,
} from "@prisma/client";

export class ComboItemTableServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ComboItemTableCountArgs, "select">
  ): Promise<number> {
    return this.prisma.comboItemTable.count(args);
  }

  async comboItemTables<T extends Prisma.ComboItemTableFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComboItemTableFindManyArgs>
  ): Promise<PrismaComboItemTable[]> {
    return this.prisma.comboItemTable.findMany<Prisma.ComboItemTableFindManyArgs>(
      args
    );
  }
  async comboItemTable<T extends Prisma.ComboItemTableFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComboItemTableFindUniqueArgs>
  ): Promise<PrismaComboItemTable | null> {
    return this.prisma.comboItemTable.findUnique(args);
  }
  async createComboItemTable<T extends Prisma.ComboItemTableCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComboItemTableCreateArgs>
  ): Promise<PrismaComboItemTable> {
    return this.prisma.comboItemTable.create<T>(args);
  }
  async updateComboItemTable<T extends Prisma.ComboItemTableUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComboItemTableUpdateArgs>
  ): Promise<PrismaComboItemTable> {
    return this.prisma.comboItemTable.update<T>(args);
  }
  async deleteComboItemTable<T extends Prisma.ComboItemTableDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComboItemTableDeleteArgs>
  ): Promise<PrismaComboItemTable> {
    return this.prisma.comboItemTable.delete(args);
  }

  async getComboGroups(parentId: string): Promise<PrismaComboGroup | null> {
    return this.prisma.comboItemTable
      .findUnique({
        where: { id: parentId },
      })
      .comboGroups();
  }

  async getOptionsVarientsItem(
    parentId: string
  ): Promise<PrismaOptionsVarientsItem | null> {
    return this.prisma.comboItemTable
      .findUnique({
        where: { id: parentId },
      })
      .optionsVarientsItem();
  }
}
