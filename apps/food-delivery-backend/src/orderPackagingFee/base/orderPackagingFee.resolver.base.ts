/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OrderPackagingFee } from "./OrderPackagingFee";
import { OrderPackagingFeeCountArgs } from "./OrderPackagingFeeCountArgs";
import { OrderPackagingFeeFindManyArgs } from "./OrderPackagingFeeFindManyArgs";
import { OrderPackagingFeeFindUniqueArgs } from "./OrderPackagingFeeFindUniqueArgs";
import { CreateOrderPackagingFeeArgs } from "./CreateOrderPackagingFeeArgs";
import { UpdateOrderPackagingFeeArgs } from "./UpdateOrderPackagingFeeArgs";
import { DeleteOrderPackagingFeeArgs } from "./DeleteOrderPackagingFeeArgs";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { OrderPackagingFeeService } from "../orderPackagingFee.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OrderPackagingFee)
export class OrderPackagingFeeResolverBase {
  constructor(
    protected readonly service: OrderPackagingFeeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OrderPackagingFee",
    action: "read",
    possession: "any",
  })
  async _orderPackagingFeesMeta(
    @graphql.Args() args: OrderPackagingFeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OrderPackagingFee])
  @nestAccessControl.UseRoles({
    resource: "OrderPackagingFee",
    action: "read",
    possession: "any",
  })
  async orderPackagingFees(
    @graphql.Args() args: OrderPackagingFeeFindManyArgs
  ): Promise<OrderPackagingFee[]> {
    return this.service.orderPackagingFees(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OrderPackagingFee, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OrderPackagingFee",
    action: "read",
    possession: "own",
  })
  async orderPackagingFee(
    @graphql.Args() args: OrderPackagingFeeFindUniqueArgs
  ): Promise<OrderPackagingFee | null> {
    const result = await this.service.orderPackagingFee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderPackagingFee)
  @nestAccessControl.UseRoles({
    resource: "OrderPackagingFee",
    action: "create",
    possession: "any",
  })
  async createOrderPackagingFee(
    @graphql.Args() args: CreateOrderPackagingFeeArgs
  ): Promise<OrderPackagingFee> {
    return await this.service.createOrderPackagingFee({
      ...args,
      data: {
        ...args.data,

        restaurants: {
          connect: args.data.restaurants,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderPackagingFee)
  @nestAccessControl.UseRoles({
    resource: "OrderPackagingFee",
    action: "update",
    possession: "any",
  })
  async updateOrderPackagingFee(
    @graphql.Args() args: UpdateOrderPackagingFeeArgs
  ): Promise<OrderPackagingFee | null> {
    try {
      return await this.service.updateOrderPackagingFee({
        ...args,
        data: {
          ...args.data,

          restaurants: {
            connect: args.data.restaurants,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrderPackagingFee)
  @nestAccessControl.UseRoles({
    resource: "OrderPackagingFee",
    action: "delete",
    possession: "any",
  })
  async deleteOrderPackagingFee(
    @graphql.Args() args: DeleteOrderPackagingFeeArgs
  ): Promise<OrderPackagingFee | null> {
    try {
      return await this.service.deleteOrderPackagingFee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurants",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurants(
    @graphql.Parent() parent: OrderPackagingFee
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurants(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
