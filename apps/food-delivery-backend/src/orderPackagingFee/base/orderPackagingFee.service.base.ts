/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OrderPackagingFee as PrismaOrderPackagingFee,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class OrderPackagingFeeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrderPackagingFeeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.orderPackagingFee.count(args);
  }

  async orderPackagingFees<T extends Prisma.OrderPackagingFeeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderPackagingFeeFindManyArgs>
  ): Promise<PrismaOrderPackagingFee[]> {
    return this.prisma.orderPackagingFee.findMany<Prisma.OrderPackagingFeeFindManyArgs>(
      args
    );
  }
  async orderPackagingFee<T extends Prisma.OrderPackagingFeeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderPackagingFeeFindUniqueArgs>
  ): Promise<PrismaOrderPackagingFee | null> {
    return this.prisma.orderPackagingFee.findUnique(args);
  }
  async createOrderPackagingFee<T extends Prisma.OrderPackagingFeeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderPackagingFeeCreateArgs>
  ): Promise<PrismaOrderPackagingFee> {
    return this.prisma.orderPackagingFee.create<T>(args);
  }
  async updateOrderPackagingFee<T extends Prisma.OrderPackagingFeeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderPackagingFeeUpdateArgs>
  ): Promise<PrismaOrderPackagingFee> {
    return this.prisma.orderPackagingFee.update<T>(args);
  }
  async deleteOrderPackagingFee<T extends Prisma.OrderPackagingFeeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderPackagingFeeDeleteArgs>
  ): Promise<PrismaOrderPackagingFee> {
    return this.prisma.orderPackagingFee.delete(args);
  }

  async getRestaurants(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.orderPackagingFee
      .findUnique({
        where: { id: parentId },
      })
      .restaurants();
  }
}
