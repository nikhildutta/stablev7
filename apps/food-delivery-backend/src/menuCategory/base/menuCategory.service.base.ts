/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MenuCategory as PrismaMenuCategory,
  MenuSubCategory as PrismaMenuSubCategory,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class MenuCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MenuCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.menuCategory.count(args);
  }

  async menuCategories<T extends Prisma.MenuCategoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuCategoryFindManyArgs>
  ): Promise<PrismaMenuCategory[]> {
    return this.prisma.menuCategory.findMany<Prisma.MenuCategoryFindManyArgs>(
      args
    );
  }
  async menuCategory<T extends Prisma.MenuCategoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuCategoryFindUniqueArgs>
  ): Promise<PrismaMenuCategory | null> {
    return this.prisma.menuCategory.findUnique(args);
  }
  async createMenuCategory<T extends Prisma.MenuCategoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuCategoryCreateArgs>
  ): Promise<PrismaMenuCategory> {
    return this.prisma.menuCategory.create<T>(args);
  }
  async updateMenuCategory<T extends Prisma.MenuCategoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuCategoryUpdateArgs>
  ): Promise<PrismaMenuCategory> {
    return this.prisma.menuCategory.update<T>(args);
  }
  async deleteMenuCategory<T extends Prisma.MenuCategoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MenuCategoryDeleteArgs>
  ): Promise<PrismaMenuCategory> {
    return this.prisma.menuCategory.delete(args);
  }

  async findMenuSubCategories(
    parentId: string,
    args: Prisma.MenuSubCategoryFindManyArgs
  ): Promise<PrismaMenuSubCategory[]> {
    return this.prisma.menuCategory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .menuSubCategories(args);
  }

  async getRestaurants(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.menuCategory
      .findUnique({
        where: { id: parentId },
      })
      .restaurants();
  }
}
