/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MenuCategoryService } from "../menuCategory.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MenuCategoryCreateInput } from "./MenuCategoryCreateInput";
import { MenuCategory } from "./MenuCategory";
import { MenuCategoryFindManyArgs } from "./MenuCategoryFindManyArgs";
import { MenuCategoryWhereUniqueInput } from "./MenuCategoryWhereUniqueInput";
import { MenuCategoryUpdateInput } from "./MenuCategoryUpdateInput";
import { MenuSubCategoryFindManyArgs } from "../../menuSubCategory/base/MenuSubCategoryFindManyArgs";
import { MenuSubCategory } from "../../menuSubCategory/base/MenuSubCategory";
import { MenuSubCategoryWhereUniqueInput } from "../../menuSubCategory/base/MenuSubCategoryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MenuCategoryControllerBase {
  constructor(
    protected readonly service: MenuCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MenuCategory })
  @nestAccessControl.UseRoles({
    resource: "MenuCategory",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMenuCategory(
    @common.Body() data: MenuCategoryCreateInput
  ): Promise<MenuCategory> {
    return await this.service.createMenuCategory({
      data: {
        ...data,

        restaurants: {
          connect: data.restaurants,
        },
      },
      select: {
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MenuCategory] })
  @ApiNestedQuery(MenuCategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuCategory",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async menuCategories(
    @common.Req() request: Request
  ): Promise<MenuCategory[]> {
    const args = plainToClass(MenuCategoryFindManyArgs, request.query);
    return this.service.menuCategories({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MenuCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuCategory",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async menuCategory(
    @common.Param() params: MenuCategoryWhereUniqueInput
  ): Promise<MenuCategory | null> {
    const result = await this.service.menuCategory({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MenuCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuCategory",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMenuCategory(
    @common.Param() params: MenuCategoryWhereUniqueInput,
    @common.Body() data: MenuCategoryUpdateInput
  ): Promise<MenuCategory | null> {
    try {
      return await this.service.updateMenuCategory({
        where: params,
        data: {
          ...data,

          restaurants: {
            connect: data.restaurants,
          },
        },
        select: {
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,

          restaurants: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MenuCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuCategory",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMenuCategory(
    @common.Param() params: MenuCategoryWhereUniqueInput
  ): Promise<MenuCategory | null> {
    try {
      return await this.service.deleteMenuCategory({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,

          restaurants: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/menuSubCategories")
  @ApiNestedQuery(MenuSubCategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuSubCategory",
    action: "read",
    possession: "any",
  })
  async findMenuSubCategories(
    @common.Req() request: Request,
    @common.Param() params: MenuCategoryWhereUniqueInput
  ): Promise<MenuSubCategory[]> {
    const query = plainToClass(MenuSubCategoryFindManyArgs, request.query);
    const results = await this.service.findMenuSubCategories(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        isActive: true,

        menuCategories: {
          select: {
            id: true,
          },
        },

        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/menuSubCategories")
  @nestAccessControl.UseRoles({
    resource: "MenuCategory",
    action: "update",
    possession: "any",
  })
  async connectMenuSubCategories(
    @common.Param() params: MenuCategoryWhereUniqueInput,
    @common.Body() body: MenuSubCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuSubCategories: {
        connect: body,
      },
    };
    await this.service.updateMenuCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/menuSubCategories")
  @nestAccessControl.UseRoles({
    resource: "MenuCategory",
    action: "update",
    possession: "any",
  })
  async updateMenuSubCategories(
    @common.Param() params: MenuCategoryWhereUniqueInput,
    @common.Body() body: MenuSubCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuSubCategories: {
        set: body,
      },
    };
    await this.service.updateMenuCategory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/menuSubCategories")
  @nestAccessControl.UseRoles({
    resource: "MenuCategory",
    action: "update",
    possession: "any",
  })
  async disconnectMenuSubCategories(
    @common.Param() params: MenuCategoryWhereUniqueInput,
    @common.Body() body: MenuSubCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      menuSubCategories: {
        disconnect: body,
      },
    };
    await this.service.updateMenuCategory({
      where: params,
      data,
      select: { id: true },
    });
  }
}
