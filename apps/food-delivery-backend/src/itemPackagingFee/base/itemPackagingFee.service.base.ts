/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ItemPackagingFee as PrismaItemPackagingFee,
  MenuItem as PrismaMenuItem,
} from "@prisma/client";

export class ItemPackagingFeeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ItemPackagingFeeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.itemPackagingFee.count(args);
  }

  async itemPackagingFees<T extends Prisma.ItemPackagingFeeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemPackagingFeeFindManyArgs>
  ): Promise<PrismaItemPackagingFee[]> {
    return this.prisma.itemPackagingFee.findMany<Prisma.ItemPackagingFeeFindManyArgs>(
      args
    );
  }
  async itemPackagingFee<T extends Prisma.ItemPackagingFeeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemPackagingFeeFindUniqueArgs>
  ): Promise<PrismaItemPackagingFee | null> {
    return this.prisma.itemPackagingFee.findUnique(args);
  }
  async createItemPackagingFee<T extends Prisma.ItemPackagingFeeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemPackagingFeeCreateArgs>
  ): Promise<PrismaItemPackagingFee> {
    return this.prisma.itemPackagingFee.create<T>(args);
  }
  async updateItemPackagingFee<T extends Prisma.ItemPackagingFeeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemPackagingFeeUpdateArgs>
  ): Promise<PrismaItemPackagingFee> {
    return this.prisma.itemPackagingFee.update<T>(args);
  }
  async deleteItemPackagingFee<T extends Prisma.ItemPackagingFeeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItemPackagingFeeDeleteArgs>
  ): Promise<PrismaItemPackagingFee> {
    return this.prisma.itemPackagingFee.delete(args);
  }

  async getMenuItems(parentId: string): Promise<PrismaMenuItem | null> {
    return this.prisma.itemPackagingFee
      .findUnique({
        where: { id: parentId },
      })
      .menuItems();
  }
}
