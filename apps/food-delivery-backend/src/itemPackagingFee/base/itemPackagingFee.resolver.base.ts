/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ItemPackagingFee } from "./ItemPackagingFee";
import { ItemPackagingFeeCountArgs } from "./ItemPackagingFeeCountArgs";
import { ItemPackagingFeeFindManyArgs } from "./ItemPackagingFeeFindManyArgs";
import { ItemPackagingFeeFindUniqueArgs } from "./ItemPackagingFeeFindUniqueArgs";
import { CreateItemPackagingFeeArgs } from "./CreateItemPackagingFeeArgs";
import { UpdateItemPackagingFeeArgs } from "./UpdateItemPackagingFeeArgs";
import { DeleteItemPackagingFeeArgs } from "./DeleteItemPackagingFeeArgs";
import { MenuItem } from "../../menuItem/base/MenuItem";
import { ItemPackagingFeeService } from "../itemPackagingFee.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ItemPackagingFee)
export class ItemPackagingFeeResolverBase {
  constructor(
    protected readonly service: ItemPackagingFeeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ItemPackagingFee",
    action: "read",
    possession: "any",
  })
  async _itemPackagingFeesMeta(
    @graphql.Args() args: ItemPackagingFeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ItemPackagingFee])
  @nestAccessControl.UseRoles({
    resource: "ItemPackagingFee",
    action: "read",
    possession: "any",
  })
  async itemPackagingFees(
    @graphql.Args() args: ItemPackagingFeeFindManyArgs
  ): Promise<ItemPackagingFee[]> {
    return this.service.itemPackagingFees(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ItemPackagingFee, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ItemPackagingFee",
    action: "read",
    possession: "own",
  })
  async itemPackagingFee(
    @graphql.Args() args: ItemPackagingFeeFindUniqueArgs
  ): Promise<ItemPackagingFee | null> {
    const result = await this.service.itemPackagingFee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ItemPackagingFee)
  @nestAccessControl.UseRoles({
    resource: "ItemPackagingFee",
    action: "create",
    possession: "any",
  })
  async createItemPackagingFee(
    @graphql.Args() args: CreateItemPackagingFeeArgs
  ): Promise<ItemPackagingFee> {
    return await this.service.createItemPackagingFee({
      ...args,
      data: {
        ...args.data,

        menuItems: {
          connect: args.data.menuItems,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ItemPackagingFee)
  @nestAccessControl.UseRoles({
    resource: "ItemPackagingFee",
    action: "update",
    possession: "any",
  })
  async updateItemPackagingFee(
    @graphql.Args() args: UpdateItemPackagingFeeArgs
  ): Promise<ItemPackagingFee | null> {
    try {
      return await this.service.updateItemPackagingFee({
        ...args,
        data: {
          ...args.data,

          menuItems: {
            connect: args.data.menuItems,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemPackagingFee)
  @nestAccessControl.UseRoles({
    resource: "ItemPackagingFee",
    action: "delete",
    possession: "any",
  })
  async deleteItemPackagingFee(
    @graphql.Args() args: DeleteItemPackagingFeeArgs
  ): Promise<ItemPackagingFee | null> {
    try {
      return await this.service.deleteItemPackagingFee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MenuItem, {
    nullable: true,
    name: "menuItems",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItem",
    action: "read",
    possession: "any",
  })
  async getMenuItems(
    @graphql.Parent() parent: ItemPackagingFee
  ): Promise<MenuItem | null> {
    const result = await this.service.getMenuItems(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
