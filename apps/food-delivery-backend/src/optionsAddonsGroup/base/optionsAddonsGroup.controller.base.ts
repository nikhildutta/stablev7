/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { OptionsAddonsGroupService } from "../optionsAddonsGroup.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { OptionsAddonsGroupCreateInput } from "./OptionsAddonsGroupCreateInput";
import { OptionsAddonsGroup } from "./OptionsAddonsGroup";
import { OptionsAddonsGroupFindManyArgs } from "./OptionsAddonsGroupFindManyArgs";
import { OptionsAddonsGroupWhereUniqueInput } from "./OptionsAddonsGroupWhereUniqueInput";
import { OptionsAddonsGroupUpdateInput } from "./OptionsAddonsGroupUpdateInput";
import { OptionsAddOnsItemFindManyArgs } from "../../optionsAddOnsItem/base/OptionsAddOnsItemFindManyArgs";
import { OptionsAddOnsItem } from "../../optionsAddOnsItem/base/OptionsAddOnsItem";
import { OptionsAddOnsItemWhereUniqueInput } from "../../optionsAddOnsItem/base/OptionsAddOnsItemWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class OptionsAddonsGroupControllerBase {
  constructor(
    protected readonly service: OptionsAddonsGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OptionsAddonsGroup })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createOptionsAddonsGroup(
    @common.Body() data: OptionsAddonsGroupCreateInput
  ): Promise<OptionsAddonsGroup> {
    return await this.service.createOptionsAddonsGroup({
      data: {
        ...data,

        optionsVarientsItem: {
          connect: data.optionsVarientsItem,
        },
      },
      select: {
        addOnName: true,
        addOnPrice: true,
        addonsImageUrl: true,
        containsEgg: true,
        createdAt: true,
        id: true,
        isVegetarian: true,
        lowerLimit: true,

        optionsVarientsItem: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        upperLimit: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [OptionsAddonsGroup] })
  @ApiNestedQuery(OptionsAddonsGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async optionsAddonsGroups(
    @common.Req() request: Request
  ): Promise<OptionsAddonsGroup[]> {
    const args = plainToClass(OptionsAddonsGroupFindManyArgs, request.query);
    return this.service.optionsAddonsGroups({
      ...args,
      select: {
        addOnName: true,
        addOnPrice: true,
        addonsImageUrl: true,
        containsEgg: true,
        createdAt: true,
        id: true,
        isVegetarian: true,
        lowerLimit: true,

        optionsVarientsItem: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        upperLimit: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OptionsAddonsGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async optionsAddonsGroup(
    @common.Param() params: OptionsAddonsGroupWhereUniqueInput
  ): Promise<OptionsAddonsGroup | null> {
    const result = await this.service.optionsAddonsGroup({
      where: params,
      select: {
        addOnName: true,
        addOnPrice: true,
        addonsImageUrl: true,
        containsEgg: true,
        createdAt: true,
        id: true,
        isVegetarian: true,
        lowerLimit: true,

        optionsVarientsItem: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        upperLimit: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OptionsAddonsGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateOptionsAddonsGroup(
    @common.Param() params: OptionsAddonsGroupWhereUniqueInput,
    @common.Body() data: OptionsAddonsGroupUpdateInput
  ): Promise<OptionsAddonsGroup | null> {
    try {
      return await this.service.updateOptionsAddonsGroup({
        where: params,
        data: {
          ...data,

          optionsVarientsItem: {
            connect: data.optionsVarientsItem,
          },
        },
        select: {
          addOnName: true,
          addOnPrice: true,
          addonsImageUrl: true,
          containsEgg: true,
          createdAt: true,
          id: true,
          isVegetarian: true,
          lowerLimit: true,

          optionsVarientsItem: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          upperLimit: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OptionsAddonsGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteOptionsAddonsGroup(
    @common.Param() params: OptionsAddonsGroupWhereUniqueInput
  ): Promise<OptionsAddonsGroup | null> {
    try {
      return await this.service.deleteOptionsAddonsGroup({
        where: params,
        select: {
          addOnName: true,
          addOnPrice: true,
          addonsImageUrl: true,
          containsEgg: true,
          createdAt: true,
          id: true,
          isVegetarian: true,
          lowerLimit: true,

          optionsVarientsItem: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          upperLimit: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/optionsAddOnsItem")
  @ApiNestedQuery(OptionsAddOnsItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "read",
    possession: "any",
  })
  async findOptionsAddOnsItem(
    @common.Req() request: Request,
    @common.Param() params: OptionsAddonsGroupWhereUniqueInput
  ): Promise<OptionsAddOnsItem[]> {
    const query = plainToClass(OptionsAddOnsItemFindManyArgs, request.query);
    const results = await this.service.findOptionsAddOnsItem(params.id, {
      ...query,
      select: {
        addOnName: true,
        addOnPrice: true,
        addonsImageUrl: true,
        containsEgg: true,
        createdAt: true,
        id: true,
        isVegetarian: true,

        optionsAddonsGroup: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/optionsAddOnsItem")
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "update",
    possession: "any",
  })
  async connectOptionsAddOnsItem(
    @common.Param() params: OptionsAddonsGroupWhereUniqueInput,
    @common.Body() body: OptionsAddOnsItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      optionsAddOnsItem: {
        connect: body,
      },
    };
    await this.service.updateOptionsAddonsGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/optionsAddOnsItem")
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "update",
    possession: "any",
  })
  async updateOptionsAddOnsItem(
    @common.Param() params: OptionsAddonsGroupWhereUniqueInput,
    @common.Body() body: OptionsAddOnsItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      optionsAddOnsItem: {
        set: body,
      },
    };
    await this.service.updateOptionsAddonsGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/optionsAddOnsItem")
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "update",
    possession: "any",
  })
  async disconnectOptionsAddOnsItem(
    @common.Param() params: OptionsAddonsGroupWhereUniqueInput,
    @common.Body() body: OptionsAddOnsItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      optionsAddOnsItem: {
        disconnect: body,
      },
    };
    await this.service.updateOptionsAddonsGroup({
      where: params,
      data,
      select: { id: true },
    });
  }
}
