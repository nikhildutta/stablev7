/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OptionsAddonsGroup } from "./OptionsAddonsGroup";
import { OptionsAddonsGroupCountArgs } from "./OptionsAddonsGroupCountArgs";
import { OptionsAddonsGroupFindManyArgs } from "./OptionsAddonsGroupFindManyArgs";
import { OptionsAddonsGroupFindUniqueArgs } from "./OptionsAddonsGroupFindUniqueArgs";
import { CreateOptionsAddonsGroupArgs } from "./CreateOptionsAddonsGroupArgs";
import { UpdateOptionsAddonsGroupArgs } from "./UpdateOptionsAddonsGroupArgs";
import { DeleteOptionsAddonsGroupArgs } from "./DeleteOptionsAddonsGroupArgs";
import { OptionsAddOnsItemFindManyArgs } from "../../optionsAddOnsItem/base/OptionsAddOnsItemFindManyArgs";
import { OptionsAddOnsItem } from "../../optionsAddOnsItem/base/OptionsAddOnsItem";
import { OptionsVarientsItem } from "../../optionsVarientsItem/base/OptionsVarientsItem";
import { OptionsAddonsGroupService } from "../optionsAddonsGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OptionsAddonsGroup)
export class OptionsAddonsGroupResolverBase {
  constructor(
    protected readonly service: OptionsAddonsGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "read",
    possession: "any",
  })
  async _optionsAddonsGroupsMeta(
    @graphql.Args() args: OptionsAddonsGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OptionsAddonsGroup])
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "read",
    possession: "any",
  })
  async optionsAddonsGroups(
    @graphql.Args() args: OptionsAddonsGroupFindManyArgs
  ): Promise<OptionsAddonsGroup[]> {
    return this.service.optionsAddonsGroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OptionsAddonsGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "read",
    possession: "own",
  })
  async optionsAddonsGroup(
    @graphql.Args() args: OptionsAddonsGroupFindUniqueArgs
  ): Promise<OptionsAddonsGroup | null> {
    const result = await this.service.optionsAddonsGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OptionsAddonsGroup)
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "create",
    possession: "any",
  })
  async createOptionsAddonsGroup(
    @graphql.Args() args: CreateOptionsAddonsGroupArgs
  ): Promise<OptionsAddonsGroup> {
    return await this.service.createOptionsAddonsGroup({
      ...args,
      data: {
        ...args.data,

        optionsVarientsItem: {
          connect: args.data.optionsVarientsItem,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OptionsAddonsGroup)
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "update",
    possession: "any",
  })
  async updateOptionsAddonsGroup(
    @graphql.Args() args: UpdateOptionsAddonsGroupArgs
  ): Promise<OptionsAddonsGroup | null> {
    try {
      return await this.service.updateOptionsAddonsGroup({
        ...args,
        data: {
          ...args.data,

          optionsVarientsItem: {
            connect: args.data.optionsVarientsItem,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OptionsAddonsGroup)
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "delete",
    possession: "any",
  })
  async deleteOptionsAddonsGroup(
    @graphql.Args() args: DeleteOptionsAddonsGroupArgs
  ): Promise<OptionsAddonsGroup | null> {
    try {
      return await this.service.deleteOptionsAddonsGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OptionsAddOnsItem], {
    name: "optionsAddOnsItem",
  })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddOnsItem",
    action: "read",
    possession: "any",
  })
  async findOptionsAddOnsItem(
    @graphql.Parent() parent: OptionsAddonsGroup,
    @graphql.Args() args: OptionsAddOnsItemFindManyArgs
  ): Promise<OptionsAddOnsItem[]> {
    const results = await this.service.findOptionsAddOnsItem(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OptionsVarientsItem, {
    nullable: true,
    name: "optionsVarientsItem",
  })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "read",
    possession: "any",
  })
  async getOptionsVarientsItem(
    @graphql.Parent() parent: OptionsAddonsGroup
  ): Promise<OptionsVarientsItem | null> {
    const result = await this.service.getOptionsVarientsItem(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
