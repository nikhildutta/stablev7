/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OptionsAddonsGroup as PrismaOptionsAddonsGroup,
  OptionsAddOnsItem as PrismaOptionsAddOnsItem,
  OptionsVarientsItem as PrismaOptionsVarientsItem,
} from "@prisma/client";

export class OptionsAddonsGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OptionsAddonsGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.optionsAddonsGroup.count(args);
  }

  async optionsAddonsGroups<T extends Prisma.OptionsAddonsGroupFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OptionsAddonsGroupFindManyArgs>
  ): Promise<PrismaOptionsAddonsGroup[]> {
    return this.prisma.optionsAddonsGroup.findMany<Prisma.OptionsAddonsGroupFindManyArgs>(
      args
    );
  }
  async optionsAddonsGroup<T extends Prisma.OptionsAddonsGroupFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OptionsAddonsGroupFindUniqueArgs>
  ): Promise<PrismaOptionsAddonsGroup | null> {
    return this.prisma.optionsAddonsGroup.findUnique(args);
  }
  async createOptionsAddonsGroup<T extends Prisma.OptionsAddonsGroupCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OptionsAddonsGroupCreateArgs>
  ): Promise<PrismaOptionsAddonsGroup> {
    return this.prisma.optionsAddonsGroup.create<T>(args);
  }
  async updateOptionsAddonsGroup<T extends Prisma.OptionsAddonsGroupUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OptionsAddonsGroupUpdateArgs>
  ): Promise<PrismaOptionsAddonsGroup> {
    return this.prisma.optionsAddonsGroup.update<T>(args);
  }
  async deleteOptionsAddonsGroup<T extends Prisma.OptionsAddonsGroupDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OptionsAddonsGroupDeleteArgs>
  ): Promise<PrismaOptionsAddonsGroup> {
    return this.prisma.optionsAddonsGroup.delete(args);
  }

  async findOptionsAddOnsItem(
    parentId: string,
    args: Prisma.OptionsAddOnsItemFindManyArgs
  ): Promise<PrismaOptionsAddOnsItem[]> {
    return this.prisma.optionsAddonsGroup
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .optionsAddOnsItem(args);
  }

  async getOptionsVarientsItem(
    parentId: string
  ): Promise<PrismaOptionsVarientsItem | null> {
    return this.prisma.optionsAddonsGroup
      .findUnique({
        where: { id: parentId },
      })
      .optionsVarientsItem();
  }
}
