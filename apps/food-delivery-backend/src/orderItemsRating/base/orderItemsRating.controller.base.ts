/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { OrderItemsRatingService } from "../orderItemsRating.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { OrderItemsRatingCreateInput } from "./OrderItemsRatingCreateInput";
import { OrderItemsRating } from "./OrderItemsRating";
import { OrderItemsRatingFindManyArgs } from "./OrderItemsRatingFindManyArgs";
import { OrderItemsRatingWhereUniqueInput } from "./OrderItemsRatingWhereUniqueInput";
import { OrderItemsRatingUpdateInput } from "./OrderItemsRatingUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class OrderItemsRatingControllerBase {
  constructor(
    protected readonly service: OrderItemsRatingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrderItemsRating })
  @nestAccessControl.UseRoles({
    resource: "OrderItemsRating",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createOrderItemsRating(
    @common.Body() data: OrderItemsRatingCreateInput
  ): Promise<OrderItemsRating> {
    return await this.service.createOrderItemsRating({
      data: {
        ...data,

        orderItems: {
          connect: data.orderItems,
        },

        ratings: {
          connect: data.ratings,
        },
      },
      select: {
        createdAt: true,
        id: true,
        orderItemRating: true,

        orderItems: {
          select: {
            id: true,
          },
        },

        ratings: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [OrderItemsRating] })
  @ApiNestedQuery(OrderItemsRatingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrderItemsRating",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async orderItemsRatings(
    @common.Req() request: Request
  ): Promise<OrderItemsRating[]> {
    const args = plainToClass(OrderItemsRatingFindManyArgs, request.query);
    return this.service.orderItemsRatings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        orderItemRating: true,

        orderItems: {
          select: {
            id: true,
          },
        },

        ratings: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrderItemsRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OrderItemsRating",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async orderItemsRating(
    @common.Param() params: OrderItemsRatingWhereUniqueInput
  ): Promise<OrderItemsRating | null> {
    const result = await this.service.orderItemsRating({
      where: params,
      select: {
        createdAt: true,
        id: true,
        orderItemRating: true,

        orderItems: {
          select: {
            id: true,
          },
        },

        ratings: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrderItemsRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OrderItemsRating",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateOrderItemsRating(
    @common.Param() params: OrderItemsRatingWhereUniqueInput,
    @common.Body() data: OrderItemsRatingUpdateInput
  ): Promise<OrderItemsRating | null> {
    try {
      return await this.service.updateOrderItemsRating({
        where: params,
        data: {
          ...data,

          orderItems: {
            connect: data.orderItems,
          },

          ratings: {
            connect: data.ratings,
          },
        },
        select: {
          createdAt: true,
          id: true,
          orderItemRating: true,

          orderItems: {
            select: {
              id: true,
            },
          },

          ratings: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrderItemsRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OrderItemsRating",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteOrderItemsRating(
    @common.Param() params: OrderItemsRatingWhereUniqueInput
  ): Promise<OrderItemsRating | null> {
    try {
      return await this.service.deleteOrderItemsRating({
        where: params,
        select: {
          createdAt: true,
          id: true,
          orderItemRating: true,

          orderItems: {
            select: {
              id: true,
            },
          },

          ratings: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
