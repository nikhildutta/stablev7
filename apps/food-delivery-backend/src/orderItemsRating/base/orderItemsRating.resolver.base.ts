/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OrderItemsRating } from "./OrderItemsRating";
import { OrderItemsRatingCountArgs } from "./OrderItemsRatingCountArgs";
import { OrderItemsRatingFindManyArgs } from "./OrderItemsRatingFindManyArgs";
import { OrderItemsRatingFindUniqueArgs } from "./OrderItemsRatingFindUniqueArgs";
import { CreateOrderItemsRatingArgs } from "./CreateOrderItemsRatingArgs";
import { UpdateOrderItemsRatingArgs } from "./UpdateOrderItemsRatingArgs";
import { DeleteOrderItemsRatingArgs } from "./DeleteOrderItemsRatingArgs";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { Rating } from "../../rating/base/Rating";
import { OrderItemsRatingService } from "../orderItemsRating.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OrderItemsRating)
export class OrderItemsRatingResolverBase {
  constructor(
    protected readonly service: OrderItemsRatingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OrderItemsRating",
    action: "read",
    possession: "any",
  })
  async _orderItemsRatingsMeta(
    @graphql.Args() args: OrderItemsRatingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OrderItemsRating])
  @nestAccessControl.UseRoles({
    resource: "OrderItemsRating",
    action: "read",
    possession: "any",
  })
  async orderItemsRatings(
    @graphql.Args() args: OrderItemsRatingFindManyArgs
  ): Promise<OrderItemsRating[]> {
    return this.service.orderItemsRatings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OrderItemsRating, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OrderItemsRating",
    action: "read",
    possession: "own",
  })
  async orderItemsRating(
    @graphql.Args() args: OrderItemsRatingFindUniqueArgs
  ): Promise<OrderItemsRating | null> {
    const result = await this.service.orderItemsRating(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderItemsRating)
  @nestAccessControl.UseRoles({
    resource: "OrderItemsRating",
    action: "create",
    possession: "any",
  })
  async createOrderItemsRating(
    @graphql.Args() args: CreateOrderItemsRatingArgs
  ): Promise<OrderItemsRating> {
    return await this.service.createOrderItemsRating({
      ...args,
      data: {
        ...args.data,

        orderItems: {
          connect: args.data.orderItems,
        },

        ratings: {
          connect: args.data.ratings,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderItemsRating)
  @nestAccessControl.UseRoles({
    resource: "OrderItemsRating",
    action: "update",
    possession: "any",
  })
  async updateOrderItemsRating(
    @graphql.Args() args: UpdateOrderItemsRatingArgs
  ): Promise<OrderItemsRating | null> {
    try {
      return await this.service.updateOrderItemsRating({
        ...args,
        data: {
          ...args.data,

          orderItems: {
            connect: args.data.orderItems,
          },

          ratings: {
            connect: args.data.ratings,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrderItemsRating)
  @nestAccessControl.UseRoles({
    resource: "OrderItemsRating",
    action: "delete",
    possession: "any",
  })
  async deleteOrderItemsRating(
    @graphql.Args() args: DeleteOrderItemsRatingArgs
  ): Promise<OrderItemsRating | null> {
    try {
      return await this.service.deleteOrderItemsRating(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OrderItem, {
    nullable: true,
    name: "orderItems",
  })
  @nestAccessControl.UseRoles({
    resource: "OrderItem",
    action: "read",
    possession: "any",
  })
  async getOrderItems(
    @graphql.Parent() parent: OrderItemsRating
  ): Promise<OrderItem | null> {
    const result = await this.service.getOrderItems(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Rating, {
    nullable: true,
    name: "ratings",
  })
  @nestAccessControl.UseRoles({
    resource: "Rating",
    action: "read",
    possession: "any",
  })
  async getRatings(
    @graphql.Parent() parent: OrderItemsRating
  ): Promise<Rating | null> {
    const result = await this.service.getRatings(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
