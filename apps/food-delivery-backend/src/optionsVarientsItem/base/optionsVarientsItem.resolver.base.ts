/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OptionsVarientsItem } from "./OptionsVarientsItem";
import { OptionsVarientsItemCountArgs } from "./OptionsVarientsItemCountArgs";
import { OptionsVarientsItemFindManyArgs } from "./OptionsVarientsItemFindManyArgs";
import { OptionsVarientsItemFindUniqueArgs } from "./OptionsVarientsItemFindUniqueArgs";
import { CreateOptionsVarientsItemArgs } from "./CreateOptionsVarientsItemArgs";
import { UpdateOptionsVarientsItemArgs } from "./UpdateOptionsVarientsItemArgs";
import { DeleteOptionsVarientsItemArgs } from "./DeleteOptionsVarientsItemArgs";
import { ComboItemTableFindManyArgs } from "../../comboItemTable/base/ComboItemTableFindManyArgs";
import { ComboItemTable } from "../../comboItemTable/base/ComboItemTable";
import { OptionsAddonsGroupFindManyArgs } from "../../optionsAddonsGroup/base/OptionsAddonsGroupFindManyArgs";
import { OptionsAddonsGroup } from "../../optionsAddonsGroup/base/OptionsAddonsGroup";
import { OrderItemFindManyArgs } from "../../orderItem/base/OrderItemFindManyArgs";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { OptionsVarientsGroup } from "../../optionsVarientsGroup/base/OptionsVarientsGroup";
import { OptionsVarientsItemService } from "../optionsVarientsItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OptionsVarientsItem)
export class OptionsVarientsItemResolverBase {
  constructor(
    protected readonly service: OptionsVarientsItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "read",
    possession: "any",
  })
  async _optionsVarientsItemsMeta(
    @graphql.Args() args: OptionsVarientsItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OptionsVarientsItem])
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "read",
    possession: "any",
  })
  async optionsVarientsItems(
    @graphql.Args() args: OptionsVarientsItemFindManyArgs
  ): Promise<OptionsVarientsItem[]> {
    return this.service.optionsVarientsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OptionsVarientsItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "read",
    possession: "own",
  })
  async optionsVarientsItem(
    @graphql.Args() args: OptionsVarientsItemFindUniqueArgs
  ): Promise<OptionsVarientsItem | null> {
    const result = await this.service.optionsVarientsItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OptionsVarientsItem)
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "create",
    possession: "any",
  })
  async createOptionsVarientsItem(
    @graphql.Args() args: CreateOptionsVarientsItemArgs
  ): Promise<OptionsVarientsItem> {
    return await this.service.createOptionsVarientsItem({
      ...args,
      data: {
        ...args.data,

        optionsVarientsGroup: {
          connect: args.data.optionsVarientsGroup,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OptionsVarientsItem)
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "update",
    possession: "any",
  })
  async updateOptionsVarientsItem(
    @graphql.Args() args: UpdateOptionsVarientsItemArgs
  ): Promise<OptionsVarientsItem | null> {
    try {
      return await this.service.updateOptionsVarientsItem({
        ...args,
        data: {
          ...args.data,

          optionsVarientsGroup: {
            connect: args.data.optionsVarientsGroup,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OptionsVarientsItem)
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "delete",
    possession: "any",
  })
  async deleteOptionsVarientsItem(
    @graphql.Args() args: DeleteOptionsVarientsItemArgs
  ): Promise<OptionsVarientsItem | null> {
    try {
      return await this.service.deleteOptionsVarientsItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ComboItemTable], { name: "comboItemTable" })
  @nestAccessControl.UseRoles({
    resource: "ComboItemTable",
    action: "read",
    possession: "any",
  })
  async findComboItemTable(
    @graphql.Parent() parent: OptionsVarientsItem,
    @graphql.Args() args: ComboItemTableFindManyArgs
  ): Promise<ComboItemTable[]> {
    const results = await this.service.findComboItemTable(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OptionsAddonsGroup], {
    name: "optionsAddonsGroup",
  })
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "read",
    possession: "any",
  })
  async findOptionsAddonsGroup(
    @graphql.Parent() parent: OptionsVarientsItem,
    @graphql.Args() args: OptionsAddonsGroupFindManyArgs
  ): Promise<OptionsAddonsGroup[]> {
    const results = await this.service.findOptionsAddonsGroup(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OrderItem], { name: "orderItems" })
  @nestAccessControl.UseRoles({
    resource: "OrderItem",
    action: "read",
    possession: "any",
  })
  async findOrderItems(
    @graphql.Parent() parent: OptionsVarientsItem,
    @graphql.Args() args: OrderItemFindManyArgs
  ): Promise<OrderItem[]> {
    const results = await this.service.findOrderItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OptionsVarientsGroup, {
    nullable: true,
    name: "optionsVarientsGroup",
  })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "read",
    possession: "any",
  })
  async getOptionsVarientsGroup(
    @graphql.Parent() parent: OptionsVarientsItem
  ): Promise<OptionsVarientsGroup | null> {
    const result = await this.service.getOptionsVarientsGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
