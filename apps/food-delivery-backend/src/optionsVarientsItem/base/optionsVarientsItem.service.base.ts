/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OptionsVarientsItem as PrismaOptionsVarientsItem,
  ComboItemTable as PrismaComboItemTable,
  OptionsAddonsGroup as PrismaOptionsAddonsGroup,
  OrderItem as PrismaOrderItem,
  OptionsVarientsGroup as PrismaOptionsVarientsGroup,
} from "@prisma/client";

export class OptionsVarientsItemServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OptionsVarientsItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.optionsVarientsItem.count(args);
  }

  async optionsVarientsItems<T extends Prisma.OptionsVarientsItemFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OptionsVarientsItemFindManyArgs>
  ): Promise<PrismaOptionsVarientsItem[]> {
    return this.prisma.optionsVarientsItem.findMany<Prisma.OptionsVarientsItemFindManyArgs>(
      args
    );
  }
  async optionsVarientsItem<T extends Prisma.OptionsVarientsItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OptionsVarientsItemFindUniqueArgs>
  ): Promise<PrismaOptionsVarientsItem | null> {
    return this.prisma.optionsVarientsItem.findUnique(args);
  }
  async createOptionsVarientsItem<
    T extends Prisma.OptionsVarientsItemCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.OptionsVarientsItemCreateArgs>
  ): Promise<PrismaOptionsVarientsItem> {
    return this.prisma.optionsVarientsItem.create<T>(args);
  }
  async updateOptionsVarientsItem<
    T extends Prisma.OptionsVarientsItemUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.OptionsVarientsItemUpdateArgs>
  ): Promise<PrismaOptionsVarientsItem> {
    return this.prisma.optionsVarientsItem.update<T>(args);
  }
  async deleteOptionsVarientsItem<
    T extends Prisma.OptionsVarientsItemDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.OptionsVarientsItemDeleteArgs>
  ): Promise<PrismaOptionsVarientsItem> {
    return this.prisma.optionsVarientsItem.delete(args);
  }

  async findComboItemTable(
    parentId: string,
    args: Prisma.ComboItemTableFindManyArgs
  ): Promise<PrismaComboItemTable[]> {
    return this.prisma.optionsVarientsItem
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .comboItemTable(args);
  }

  async findOptionsAddonsGroup(
    parentId: string,
    args: Prisma.OptionsAddonsGroupFindManyArgs
  ): Promise<PrismaOptionsAddonsGroup[]> {
    return this.prisma.optionsVarientsItem
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .optionsAddonsGroup(args);
  }

  async findOrderItems(
    parentId: string,
    args: Prisma.OrderItemFindManyArgs
  ): Promise<PrismaOrderItem[]> {
    return this.prisma.optionsVarientsItem
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orderItems(args);
  }

  async getOptionsVarientsGroup(
    parentId: string
  ): Promise<PrismaOptionsVarientsGroup | null> {
    return this.prisma.optionsVarientsItem
      .findUnique({
        where: { id: parentId },
      })
      .optionsVarientsGroup();
  }
}
