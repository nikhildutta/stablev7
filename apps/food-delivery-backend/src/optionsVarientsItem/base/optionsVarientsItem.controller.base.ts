/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { OptionsVarientsItemService } from "../optionsVarientsItem.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { OptionsVarientsItemCreateInput } from "./OptionsVarientsItemCreateInput";
import { OptionsVarientsItem } from "./OptionsVarientsItem";
import { OptionsVarientsItemFindManyArgs } from "./OptionsVarientsItemFindManyArgs";
import { OptionsVarientsItemWhereUniqueInput } from "./OptionsVarientsItemWhereUniqueInput";
import { OptionsVarientsItemUpdateInput } from "./OptionsVarientsItemUpdateInput";
import { ComboItemTableFindManyArgs } from "../../comboItemTable/base/ComboItemTableFindManyArgs";
import { ComboItemTable } from "../../comboItemTable/base/ComboItemTable";
import { ComboItemTableWhereUniqueInput } from "../../comboItemTable/base/ComboItemTableWhereUniqueInput";
import { OptionsAddonsGroupFindManyArgs } from "../../optionsAddonsGroup/base/OptionsAddonsGroupFindManyArgs";
import { OptionsAddonsGroup } from "../../optionsAddonsGroup/base/OptionsAddonsGroup";
import { OptionsAddonsGroupWhereUniqueInput } from "../../optionsAddonsGroup/base/OptionsAddonsGroupWhereUniqueInput";
import { OrderItemFindManyArgs } from "../../orderItem/base/OrderItemFindManyArgs";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { OrderItemWhereUniqueInput } from "../../orderItem/base/OrderItemWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class OptionsVarientsItemControllerBase {
  constructor(
    protected readonly service: OptionsVarientsItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OptionsVarientsItem })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createOptionsVarientsItem(
    @common.Body() data: OptionsVarientsItemCreateInput
  ): Promise<OptionsVarientsItem> {
    return await this.service.createOptionsVarientsItem({
      data: {
        ...data,

        optionsVarientsGroup: {
          connect: data.optionsVarientsGroup,
        },
      },
      select: {
        additionalPrice: true,
        createdAt: true,
        id: true,
        isDefault: true,

        optionsVarientsGroup: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        variantDescription: true,
        variantImageUrl: true,
        variantName: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [OptionsVarientsItem] })
  @ApiNestedQuery(OptionsVarientsItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async optionsVarientsItems(
    @common.Req() request: Request
  ): Promise<OptionsVarientsItem[]> {
    const args = plainToClass(OptionsVarientsItemFindManyArgs, request.query);
    return this.service.optionsVarientsItems({
      ...args,
      select: {
        additionalPrice: true,
        createdAt: true,
        id: true,
        isDefault: true,

        optionsVarientsGroup: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        variantDescription: true,
        variantImageUrl: true,
        variantName: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OptionsVarientsItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async optionsVarientsItem(
    @common.Param() params: OptionsVarientsItemWhereUniqueInput
  ): Promise<OptionsVarientsItem | null> {
    const result = await this.service.optionsVarientsItem({
      where: params,
      select: {
        additionalPrice: true,
        createdAt: true,
        id: true,
        isDefault: true,

        optionsVarientsGroup: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        variantDescription: true,
        variantImageUrl: true,
        variantName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OptionsVarientsItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateOptionsVarientsItem(
    @common.Param() params: OptionsVarientsItemWhereUniqueInput,
    @common.Body() data: OptionsVarientsItemUpdateInput
  ): Promise<OptionsVarientsItem | null> {
    try {
      return await this.service.updateOptionsVarientsItem({
        where: params,
        data: {
          ...data,

          optionsVarientsGroup: {
            connect: data.optionsVarientsGroup,
          },
        },
        select: {
          additionalPrice: true,
          createdAt: true,
          id: true,
          isDefault: true,

          optionsVarientsGroup: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          variantDescription: true,
          variantImageUrl: true,
          variantName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OptionsVarientsItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteOptionsVarientsItem(
    @common.Param() params: OptionsVarientsItemWhereUniqueInput
  ): Promise<OptionsVarientsItem | null> {
    try {
      return await this.service.deleteOptionsVarientsItem({
        where: params,
        select: {
          additionalPrice: true,
          createdAt: true,
          id: true,
          isDefault: true,

          optionsVarientsGroup: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          variantDescription: true,
          variantImageUrl: true,
          variantName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/comboItemTable")
  @ApiNestedQuery(ComboItemTableFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComboItemTable",
    action: "read",
    possession: "any",
  })
  async findComboItemTable(
    @common.Req() request: Request,
    @common.Param() params: OptionsVarientsItemWhereUniqueInput
  ): Promise<ComboItemTable[]> {
    const query = plainToClass(ComboItemTableFindManyArgs, request.query);
    const results = await this.service.findComboItemTable(params.id, {
      ...query,
      select: {
        comboGroups: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isAddonAllowed: true,

        optionsVarientsItem: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/comboItemTable")
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "update",
    possession: "any",
  })
  async connectComboItemTable(
    @common.Param() params: OptionsVarientsItemWhereUniqueInput,
    @common.Body() body: ComboItemTableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboItemTable: {
        connect: body,
      },
    };
    await this.service.updateOptionsVarientsItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/comboItemTable")
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "update",
    possession: "any",
  })
  async updateComboItemTable(
    @common.Param() params: OptionsVarientsItemWhereUniqueInput,
    @common.Body() body: ComboItemTableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboItemTable: {
        set: body,
      },
    };
    await this.service.updateOptionsVarientsItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/comboItemTable")
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "update",
    possession: "any",
  })
  async disconnectComboItemTable(
    @common.Param() params: OptionsVarientsItemWhereUniqueInput,
    @common.Body() body: ComboItemTableWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      comboItemTable: {
        disconnect: body,
      },
    };
    await this.service.updateOptionsVarientsItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/optionsAddonsGroup")
  @ApiNestedQuery(OptionsAddonsGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OptionsAddonsGroup",
    action: "read",
    possession: "any",
  })
  async findOptionsAddonsGroup(
    @common.Req() request: Request,
    @common.Param() params: OptionsVarientsItemWhereUniqueInput
  ): Promise<OptionsAddonsGroup[]> {
    const query = plainToClass(OptionsAddonsGroupFindManyArgs, request.query);
    const results = await this.service.findOptionsAddonsGroup(params.id, {
      ...query,
      select: {
        addOnName: true,
        addOnPrice: true,
        addonsImageUrl: true,
        containsEgg: true,
        createdAt: true,
        id: true,
        isVegetarian: true,
        lowerLimit: true,

        optionsVarientsItem: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        upperLimit: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/optionsAddonsGroup")
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "update",
    possession: "any",
  })
  async connectOptionsAddonsGroup(
    @common.Param() params: OptionsVarientsItemWhereUniqueInput,
    @common.Body() body: OptionsAddonsGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      optionsAddonsGroup: {
        connect: body,
      },
    };
    await this.service.updateOptionsVarientsItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/optionsAddonsGroup")
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "update",
    possession: "any",
  })
  async updateOptionsAddonsGroup(
    @common.Param() params: OptionsVarientsItemWhereUniqueInput,
    @common.Body() body: OptionsAddonsGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      optionsAddonsGroup: {
        set: body,
      },
    };
    await this.service.updateOptionsVarientsItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/optionsAddonsGroup")
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "update",
    possession: "any",
  })
  async disconnectOptionsAddonsGroup(
    @common.Param() params: OptionsVarientsItemWhereUniqueInput,
    @common.Body() body: OptionsAddonsGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      optionsAddonsGroup: {
        disconnect: body,
      },
    };
    await this.service.updateOptionsVarientsItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orderItems")
  @ApiNestedQuery(OrderItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrderItem",
    action: "read",
    possession: "any",
  })
  async findOrderItems(
    @common.Req() request: Request,
    @common.Param() params: OptionsVarientsItemWhereUniqueInput
  ): Promise<OrderItem[]> {
    const query = plainToClass(OrderItemFindManyArgs, request.query);
    const results = await this.service.findOrderItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        customizationOptions: true,
        id: true,

        optionsVarientsItem: {
          select: {
            id: true,
          },
        },

        orderHistory: {
          select: {
            id: true,
          },
        },

        quantity: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderItems")
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "update",
    possession: "any",
  })
  async connectOrderItems(
    @common.Param() params: OptionsVarientsItemWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        connect: body,
      },
    };
    await this.service.updateOptionsVarientsItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderItems")
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "update",
    possession: "any",
  })
  async updateOrderItems(
    @common.Param() params: OptionsVarientsItemWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        set: body,
      },
    };
    await this.service.updateOptionsVarientsItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderItems")
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsItem",
    action: "update",
    possession: "any",
  })
  async disconnectOrderItems(
    @common.Param() params: OptionsVarientsItemWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        disconnect: body,
      },
    };
    await this.service.updateOptionsVarientsItem({
      where: params,
      data,
      select: { id: true },
    });
  }
}
