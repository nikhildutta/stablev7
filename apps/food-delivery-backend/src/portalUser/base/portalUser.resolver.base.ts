/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PortalUser } from "./PortalUser";
import { PortalUserCountArgs } from "./PortalUserCountArgs";
import { PortalUserFindManyArgs } from "./PortalUserFindManyArgs";
import { PortalUserFindUniqueArgs } from "./PortalUserFindUniqueArgs";
import { CreatePortalUserArgs } from "./CreatePortalUserArgs";
import { UpdatePortalUserArgs } from "./UpdatePortalUserArgs";
import { DeletePortalUserArgs } from "./DeletePortalUserArgs";
import { AuditLogFindManyArgs } from "../../auditLog/base/AuditLogFindManyArgs";
import { AuditLog } from "../../auditLog/base/AuditLog";
import { PortalUsersRelationsLookupFindManyArgs } from "../../portalUsersRelationsLookup/base/PortalUsersRelationsLookupFindManyArgs";
import { PortalUsersRelationsLookup } from "../../portalUsersRelationsLookup/base/PortalUsersRelationsLookup";
import { PortalUserService } from "../portalUser.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PortalUser)
export class PortalUserResolverBase {
  constructor(
    protected readonly service: PortalUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PortalUser",
    action: "read",
    possession: "any",
  })
  async _portalUsersMeta(
    @graphql.Args() args: PortalUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PortalUser])
  @nestAccessControl.UseRoles({
    resource: "PortalUser",
    action: "read",
    possession: "any",
  })
  async portalUsers(
    @graphql.Args() args: PortalUserFindManyArgs
  ): Promise<PortalUser[]> {
    return this.service.portalUsers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PortalUser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PortalUser",
    action: "read",
    possession: "own",
  })
  async portalUser(
    @graphql.Args() args: PortalUserFindUniqueArgs
  ): Promise<PortalUser | null> {
    const result = await this.service.portalUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PortalUser)
  @nestAccessControl.UseRoles({
    resource: "PortalUser",
    action: "create",
    possession: "any",
  })
  async createPortalUser(
    @graphql.Args() args: CreatePortalUserArgs
  ): Promise<PortalUser> {
    return await this.service.createPortalUser({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PortalUser)
  @nestAccessControl.UseRoles({
    resource: "PortalUser",
    action: "update",
    possession: "any",
  })
  async updatePortalUser(
    @graphql.Args() args: UpdatePortalUserArgs
  ): Promise<PortalUser | null> {
    try {
      return await this.service.updatePortalUser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PortalUser)
  @nestAccessControl.UseRoles({
    resource: "PortalUser",
    action: "delete",
    possession: "any",
  })
  async deletePortalUser(
    @graphql.Args() args: DeletePortalUserArgs
  ): Promise<PortalUser | null> {
    try {
      return await this.service.deletePortalUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AuditLog], { name: "auditLogs" })
  @nestAccessControl.UseRoles({
    resource: "AuditLog",
    action: "read",
    possession: "any",
  })
  async findAuditLogs(
    @graphql.Parent() parent: PortalUser,
    @graphql.Args() args: AuditLogFindManyArgs
  ): Promise<AuditLog[]> {
    const results = await this.service.findAuditLogs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PortalUsersRelationsLookup], {
    name: "portalUsersRelationsLookup",
  })
  @nestAccessControl.UseRoles({
    resource: "PortalUsersRelationsLookup",
    action: "read",
    possession: "any",
  })
  async findPortalUsersRelationsLookup(
    @graphql.Parent() parent: PortalUser,
    @graphql.Args() args: PortalUsersRelationsLookupFindManyArgs
  ): Promise<PortalUsersRelationsLookup[]> {
    const results = await this.service.findPortalUsersRelationsLookup(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
