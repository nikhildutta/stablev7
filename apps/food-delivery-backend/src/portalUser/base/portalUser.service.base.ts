/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PortalUser as PrismaPortalUser,
  AuditLog as PrismaAuditLog,
  PortalUsersRelationsLookup as PrismaPortalUsersRelationsLookup,
} from "@prisma/client";

export class PortalUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PortalUserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.portalUser.count(args);
  }

  async portalUsers<T extends Prisma.PortalUserFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PortalUserFindManyArgs>
  ): Promise<PrismaPortalUser[]> {
    return this.prisma.portalUser.findMany<Prisma.PortalUserFindManyArgs>(args);
  }
  async portalUser<T extends Prisma.PortalUserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PortalUserFindUniqueArgs>
  ): Promise<PrismaPortalUser | null> {
    return this.prisma.portalUser.findUnique(args);
  }
  async createPortalUser<T extends Prisma.PortalUserCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PortalUserCreateArgs>
  ): Promise<PrismaPortalUser> {
    return this.prisma.portalUser.create<T>(args);
  }
  async updatePortalUser<T extends Prisma.PortalUserUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PortalUserUpdateArgs>
  ): Promise<PrismaPortalUser> {
    return this.prisma.portalUser.update<T>(args);
  }
  async deletePortalUser<T extends Prisma.PortalUserDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PortalUserDeleteArgs>
  ): Promise<PrismaPortalUser> {
    return this.prisma.portalUser.delete(args);
  }

  async findAuditLogs(
    parentId: string,
    args: Prisma.AuditLogFindManyArgs
  ): Promise<PrismaAuditLog[]> {
    return this.prisma.portalUser
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .auditLogs(args);
  }

  async findPortalUsersRelationsLookup(
    parentId: string,
    args: Prisma.PortalUsersRelationsLookupFindManyArgs
  ): Promise<PrismaPortalUsersRelationsLookup[]> {
    return this.prisma.portalUser
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .portalUsersRelationsLookup(args);
  }
}
