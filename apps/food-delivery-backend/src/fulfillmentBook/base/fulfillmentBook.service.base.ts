/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FulfillmentBook as PrismaFulfillmentBook,
  OrderHistory as PrismaOrderHistory,
} from "@prisma/client";

export class FulfillmentBookServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FulfillmentBookCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fulfillmentBook.count(args);
  }

  async fulfillmentBooks<T extends Prisma.FulfillmentBookFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FulfillmentBookFindManyArgs>
  ): Promise<PrismaFulfillmentBook[]> {
    return this.prisma.fulfillmentBook.findMany<Prisma.FulfillmentBookFindManyArgs>(
      args
    );
  }
  async fulfillmentBook<T extends Prisma.FulfillmentBookFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FulfillmentBookFindUniqueArgs>
  ): Promise<PrismaFulfillmentBook | null> {
    return this.prisma.fulfillmentBook.findUnique(args);
  }
  async createFulfillmentBook<T extends Prisma.FulfillmentBookCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FulfillmentBookCreateArgs>
  ): Promise<PrismaFulfillmentBook> {
    return this.prisma.fulfillmentBook.create<T>(args);
  }
  async updateFulfillmentBook<T extends Prisma.FulfillmentBookUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FulfillmentBookUpdateArgs>
  ): Promise<PrismaFulfillmentBook> {
    return this.prisma.fulfillmentBook.update<T>(args);
  }
  async deleteFulfillmentBook<T extends Prisma.FulfillmentBookDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FulfillmentBookDeleteArgs>
  ): Promise<PrismaFulfillmentBook> {
    return this.prisma.fulfillmentBook.delete(args);
  }

  async getOrderHistory(parentId: string): Promise<PrismaOrderHistory | null> {
    return this.prisma.fulfillmentBook
      .findUnique({
        where: { id: parentId },
      })
      .orderHistory();
  }
}
