/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FulfillmentBook } from "./FulfillmentBook";
import { FulfillmentBookCountArgs } from "./FulfillmentBookCountArgs";
import { FulfillmentBookFindManyArgs } from "./FulfillmentBookFindManyArgs";
import { FulfillmentBookFindUniqueArgs } from "./FulfillmentBookFindUniqueArgs";
import { CreateFulfillmentBookArgs } from "./CreateFulfillmentBookArgs";
import { UpdateFulfillmentBookArgs } from "./UpdateFulfillmentBookArgs";
import { DeleteFulfillmentBookArgs } from "./DeleteFulfillmentBookArgs";
import { OrderHistory } from "../../orderHistory/base/OrderHistory";
import { FulfillmentBookService } from "../fulfillmentBook.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FulfillmentBook)
export class FulfillmentBookResolverBase {
  constructor(
    protected readonly service: FulfillmentBookService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FulfillmentBook",
    action: "read",
    possession: "any",
  })
  async _fulfillmentBooksMeta(
    @graphql.Args() args: FulfillmentBookCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FulfillmentBook])
  @nestAccessControl.UseRoles({
    resource: "FulfillmentBook",
    action: "read",
    possession: "any",
  })
  async fulfillmentBooks(
    @graphql.Args() args: FulfillmentBookFindManyArgs
  ): Promise<FulfillmentBook[]> {
    return this.service.fulfillmentBooks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FulfillmentBook, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FulfillmentBook",
    action: "read",
    possession: "own",
  })
  async fulfillmentBook(
    @graphql.Args() args: FulfillmentBookFindUniqueArgs
  ): Promise<FulfillmentBook | null> {
    const result = await this.service.fulfillmentBook(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FulfillmentBook)
  @nestAccessControl.UseRoles({
    resource: "FulfillmentBook",
    action: "create",
    possession: "any",
  })
  async createFulfillmentBook(
    @graphql.Args() args: CreateFulfillmentBookArgs
  ): Promise<FulfillmentBook> {
    return await this.service.createFulfillmentBook({
      ...args,
      data: {
        ...args.data,

        orderHistory: {
          connect: args.data.orderHistory,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FulfillmentBook)
  @nestAccessControl.UseRoles({
    resource: "FulfillmentBook",
    action: "update",
    possession: "any",
  })
  async updateFulfillmentBook(
    @graphql.Args() args: UpdateFulfillmentBookArgs
  ): Promise<FulfillmentBook | null> {
    try {
      return await this.service.updateFulfillmentBook({
        ...args,
        data: {
          ...args.data,

          orderHistory: {
            connect: args.data.orderHistory,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FulfillmentBook)
  @nestAccessControl.UseRoles({
    resource: "FulfillmentBook",
    action: "delete",
    possession: "any",
  })
  async deleteFulfillmentBook(
    @graphql.Args() args: DeleteFulfillmentBookArgs
  ): Promise<FulfillmentBook | null> {
    try {
      return await this.service.deleteFulfillmentBook(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OrderHistory, {
    nullable: true,
    name: "orderHistory",
  })
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "any",
  })
  async getOrderHistory(
    @graphql.Parent() parent: FulfillmentBook
  ): Promise<OrderHistory | null> {
    const result = await this.service.getOrderHistory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
