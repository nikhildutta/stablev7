/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FulfillmentBookService } from "../fulfillmentBook.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FulfillmentBookCreateInput } from "./FulfillmentBookCreateInput";
import { FulfillmentBook } from "./FulfillmentBook";
import { FulfillmentBookFindManyArgs } from "./FulfillmentBookFindManyArgs";
import { FulfillmentBookWhereUniqueInput } from "./FulfillmentBookWhereUniqueInput";
import { FulfillmentBookUpdateInput } from "./FulfillmentBookUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FulfillmentBookControllerBase {
  constructor(
    protected readonly service: FulfillmentBookService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FulfillmentBook })
  @nestAccessControl.UseRoles({
    resource: "FulfillmentBook",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFulfillmentBook(
    @common.Body() data: FulfillmentBookCreateInput
  ): Promise<FulfillmentBook> {
    return await this.service.createFulfillmentBook({
      data: {
        ...data,

        orderHistory: {
          connect: data.orderHistory,
        },
      },
      select: {
        acceptedOrderBy: true,
        acceptedOrderStatus: true,
        acceptedOrderStatusAt: true,
        createdAt: true,
        customerFulfillmentStatus: true,
        customerFulfillmentStatusAt: true,
        id: true,
        markedFulfilledBy: true,

        orderHistory: {
          select: {
            id: true,
          },
        },

        partnerPickupAt: true,
        partnerPickupBy: true,
        partnerPickupStatus: true,
        readyForPickupBy: true,
        readyForPickupStatus: true,
        readyForPickupStatusAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [FulfillmentBook] })
  @ApiNestedQuery(FulfillmentBookFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FulfillmentBook",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async fulfillmentBooks(
    @common.Req() request: Request
  ): Promise<FulfillmentBook[]> {
    const args = plainToClass(FulfillmentBookFindManyArgs, request.query);
    return this.service.fulfillmentBooks({
      ...args,
      select: {
        acceptedOrderBy: true,
        acceptedOrderStatus: true,
        acceptedOrderStatusAt: true,
        createdAt: true,
        customerFulfillmentStatus: true,
        customerFulfillmentStatusAt: true,
        id: true,
        markedFulfilledBy: true,

        orderHistory: {
          select: {
            id: true,
          },
        },

        partnerPickupAt: true,
        partnerPickupBy: true,
        partnerPickupStatus: true,
        readyForPickupBy: true,
        readyForPickupStatus: true,
        readyForPickupStatusAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FulfillmentBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FulfillmentBook",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async fulfillmentBook(
    @common.Param() params: FulfillmentBookWhereUniqueInput
  ): Promise<FulfillmentBook | null> {
    const result = await this.service.fulfillmentBook({
      where: params,
      select: {
        acceptedOrderBy: true,
        acceptedOrderStatus: true,
        acceptedOrderStatusAt: true,
        createdAt: true,
        customerFulfillmentStatus: true,
        customerFulfillmentStatusAt: true,
        id: true,
        markedFulfilledBy: true,

        orderHistory: {
          select: {
            id: true,
          },
        },

        partnerPickupAt: true,
        partnerPickupBy: true,
        partnerPickupStatus: true,
        readyForPickupBy: true,
        readyForPickupStatus: true,
        readyForPickupStatusAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FulfillmentBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FulfillmentBook",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFulfillmentBook(
    @common.Param() params: FulfillmentBookWhereUniqueInput,
    @common.Body() data: FulfillmentBookUpdateInput
  ): Promise<FulfillmentBook | null> {
    try {
      return await this.service.updateFulfillmentBook({
        where: params,
        data: {
          ...data,

          orderHistory: {
            connect: data.orderHistory,
          },
        },
        select: {
          acceptedOrderBy: true,
          acceptedOrderStatus: true,
          acceptedOrderStatusAt: true,
          createdAt: true,
          customerFulfillmentStatus: true,
          customerFulfillmentStatusAt: true,
          id: true,
          markedFulfilledBy: true,

          orderHistory: {
            select: {
              id: true,
            },
          },

          partnerPickupAt: true,
          partnerPickupBy: true,
          partnerPickupStatus: true,
          readyForPickupBy: true,
          readyForPickupStatus: true,
          readyForPickupStatusAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FulfillmentBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FulfillmentBook",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFulfillmentBook(
    @common.Param() params: FulfillmentBookWhereUniqueInput
  ): Promise<FulfillmentBook | null> {
    try {
      return await this.service.deleteFulfillmentBook({
        where: params,
        select: {
          acceptedOrderBy: true,
          acceptedOrderStatus: true,
          acceptedOrderStatusAt: true,
          createdAt: true,
          customerFulfillmentStatus: true,
          customerFulfillmentStatusAt: true,
          id: true,
          markedFulfilledBy: true,

          orderHistory: {
            select: {
              id: true,
            },
          },

          partnerPickupAt: true,
          partnerPickupBy: true,
          partnerPickupStatus: true,
          readyForPickupBy: true,
          readyForPickupStatus: true,
          readyForPickupStatusAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
