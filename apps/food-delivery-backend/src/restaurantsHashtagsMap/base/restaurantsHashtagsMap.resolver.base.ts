/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RestaurantsHashtagsMap } from "./RestaurantsHashtagsMap";
import { RestaurantsHashtagsMapCountArgs } from "./RestaurantsHashtagsMapCountArgs";
import { RestaurantsHashtagsMapFindManyArgs } from "./RestaurantsHashtagsMapFindManyArgs";
import { RestaurantsHashtagsMapFindUniqueArgs } from "./RestaurantsHashtagsMapFindUniqueArgs";
import { CreateRestaurantsHashtagsMapArgs } from "./CreateRestaurantsHashtagsMapArgs";
import { UpdateRestaurantsHashtagsMapArgs } from "./UpdateRestaurantsHashtagsMapArgs";
import { DeleteRestaurantsHashtagsMapArgs } from "./DeleteRestaurantsHashtagsMapArgs";
import { Hashtag } from "../../hashtag/base/Hashtag";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { RestaurantsHashtagsMapService } from "../restaurantsHashtagsMap.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RestaurantsHashtagsMap)
export class RestaurantsHashtagsMapResolverBase {
  constructor(
    protected readonly service: RestaurantsHashtagsMapService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RestaurantsHashtagsMap",
    action: "read",
    possession: "any",
  })
  async _restaurantsHashtagsMapsMeta(
    @graphql.Args() args: RestaurantsHashtagsMapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RestaurantsHashtagsMap])
  @nestAccessControl.UseRoles({
    resource: "RestaurantsHashtagsMap",
    action: "read",
    possession: "any",
  })
  async restaurantsHashtagsMaps(
    @graphql.Args() args: RestaurantsHashtagsMapFindManyArgs
  ): Promise<RestaurantsHashtagsMap[]> {
    return this.service.restaurantsHashtagsMaps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RestaurantsHashtagsMap, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RestaurantsHashtagsMap",
    action: "read",
    possession: "own",
  })
  async restaurantsHashtagsMap(
    @graphql.Args() args: RestaurantsHashtagsMapFindUniqueArgs
  ): Promise<RestaurantsHashtagsMap | null> {
    const result = await this.service.restaurantsHashtagsMap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantsHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "RestaurantsHashtagsMap",
    action: "create",
    possession: "any",
  })
  async createRestaurantsHashtagsMap(
    @graphql.Args() args: CreateRestaurantsHashtagsMapArgs
  ): Promise<RestaurantsHashtagsMap> {
    return await this.service.createRestaurantsHashtagsMap({
      ...args,
      data: {
        ...args.data,

        hashtags: {
          connect: args.data.hashtags,
        },

        restaurants: {
          connect: args.data.restaurants,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantsHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "RestaurantsHashtagsMap",
    action: "update",
    possession: "any",
  })
  async updateRestaurantsHashtagsMap(
    @graphql.Args() args: UpdateRestaurantsHashtagsMapArgs
  ): Promise<RestaurantsHashtagsMap | null> {
    try {
      return await this.service.updateRestaurantsHashtagsMap({
        ...args,
        data: {
          ...args.data,

          hashtags: {
            connect: args.data.hashtags,
          },

          restaurants: {
            connect: args.data.restaurants,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RestaurantsHashtagsMap)
  @nestAccessControl.UseRoles({
    resource: "RestaurantsHashtagsMap",
    action: "delete",
    possession: "any",
  })
  async deleteRestaurantsHashtagsMap(
    @graphql.Args() args: DeleteRestaurantsHashtagsMapArgs
  ): Promise<RestaurantsHashtagsMap | null> {
    try {
      return await this.service.deleteRestaurantsHashtagsMap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Hashtag, {
    nullable: true,
    name: "hashtags",
  })
  @nestAccessControl.UseRoles({
    resource: "Hashtag",
    action: "read",
    possession: "any",
  })
  async getHashtags(
    @graphql.Parent() parent: RestaurantsHashtagsMap
  ): Promise<Hashtag | null> {
    const result = await this.service.getHashtags(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurants",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurants(
    @graphql.Parent() parent: RestaurantsHashtagsMap
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurants(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
