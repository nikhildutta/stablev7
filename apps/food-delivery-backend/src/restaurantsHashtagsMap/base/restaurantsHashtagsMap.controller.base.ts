/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RestaurantsHashtagsMapService } from "../restaurantsHashtagsMap.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RestaurantsHashtagsMapCreateInput } from "./RestaurantsHashtagsMapCreateInput";
import { RestaurantsHashtagsMap } from "./RestaurantsHashtagsMap";
import { RestaurantsHashtagsMapFindManyArgs } from "./RestaurantsHashtagsMapFindManyArgs";
import { RestaurantsHashtagsMapWhereUniqueInput } from "./RestaurantsHashtagsMapWhereUniqueInput";
import { RestaurantsHashtagsMapUpdateInput } from "./RestaurantsHashtagsMapUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RestaurantsHashtagsMapControllerBase {
  constructor(
    protected readonly service: RestaurantsHashtagsMapService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RestaurantsHashtagsMap })
  @nestAccessControl.UseRoles({
    resource: "RestaurantsHashtagsMap",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRestaurantsHashtagsMap(
    @common.Body() data: RestaurantsHashtagsMapCreateInput
  ): Promise<RestaurantsHashtagsMap> {
    return await this.service.createRestaurantsHashtagsMap({
      data: {
        ...data,

        hashtags: {
          connect: data.hashtags,
        },

        restaurants: {
          connect: data.restaurants,
        },
      },
      select: {
        hashtags: {
          select: {
            id: true,
          },
        },

        id: true,

        restaurants: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [RestaurantsHashtagsMap] })
  @ApiNestedQuery(RestaurantsHashtagsMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RestaurantsHashtagsMap",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async restaurantsHashtagsMaps(
    @common.Req() request: Request
  ): Promise<RestaurantsHashtagsMap[]> {
    const args = plainToClass(
      RestaurantsHashtagsMapFindManyArgs,
      request.query
    );
    return this.service.restaurantsHashtagsMaps({
      ...args,
      select: {
        hashtags: {
          select: {
            id: true,
          },
        },

        id: true,

        restaurants: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RestaurantsHashtagsMap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RestaurantsHashtagsMap",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async restaurantsHashtagsMap(
    @common.Param() params: RestaurantsHashtagsMapWhereUniqueInput
  ): Promise<RestaurantsHashtagsMap | null> {
    const result = await this.service.restaurantsHashtagsMap({
      where: params,
      select: {
        hashtags: {
          select: {
            id: true,
          },
        },

        id: true,

        restaurants: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RestaurantsHashtagsMap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RestaurantsHashtagsMap",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRestaurantsHashtagsMap(
    @common.Param() params: RestaurantsHashtagsMapWhereUniqueInput,
    @common.Body() data: RestaurantsHashtagsMapUpdateInput
  ): Promise<RestaurantsHashtagsMap | null> {
    try {
      return await this.service.updateRestaurantsHashtagsMap({
        where: params,
        data: {
          ...data,

          hashtags: {
            connect: data.hashtags,
          },

          restaurants: {
            connect: data.restaurants,
          },
        },
        select: {
          hashtags: {
            select: {
              id: true,
            },
          },

          id: true,

          restaurants: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RestaurantsHashtagsMap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RestaurantsHashtagsMap",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRestaurantsHashtagsMap(
    @common.Param() params: RestaurantsHashtagsMapWhereUniqueInput
  ): Promise<RestaurantsHashtagsMap | null> {
    try {
      return await this.service.deleteRestaurantsHashtagsMap({
        where: params,
        select: {
          hashtags: {
            select: {
              id: true,
            },
          },

          id: true,

          restaurants: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
