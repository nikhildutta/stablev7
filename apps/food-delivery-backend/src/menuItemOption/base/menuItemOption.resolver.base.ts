/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MenuItemOption } from "./MenuItemOption";
import { MenuItemOptionCountArgs } from "./MenuItemOptionCountArgs";
import { MenuItemOptionFindManyArgs } from "./MenuItemOptionFindManyArgs";
import { MenuItemOptionFindUniqueArgs } from "./MenuItemOptionFindUniqueArgs";
import { CreateMenuItemOptionArgs } from "./CreateMenuItemOptionArgs";
import { UpdateMenuItemOptionArgs } from "./UpdateMenuItemOptionArgs";
import { DeleteMenuItemOptionArgs } from "./DeleteMenuItemOptionArgs";
import { OptionsVarientsGroupFindManyArgs } from "../../optionsVarientsGroup/base/OptionsVarientsGroupFindManyArgs";
import { OptionsVarientsGroup } from "../../optionsVarientsGroup/base/OptionsVarientsGroup";
import { MenuItemsOptionsGroup } from "../../menuItemsOptionsGroup/base/MenuItemsOptionsGroup";
import { MenuItemOptionService } from "../menuItemOption.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MenuItemOption)
export class MenuItemOptionResolverBase {
  constructor(
    protected readonly service: MenuItemOptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "read",
    possession: "any",
  })
  async _menuItemOptionsMeta(
    @graphql.Args() args: MenuItemOptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MenuItemOption])
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "read",
    possession: "any",
  })
  async menuItemOptions(
    @graphql.Args() args: MenuItemOptionFindManyArgs
  ): Promise<MenuItemOption[]> {
    return this.service.menuItemOptions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MenuItemOption, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "read",
    possession: "own",
  })
  async menuItemOption(
    @graphql.Args() args: MenuItemOptionFindUniqueArgs
  ): Promise<MenuItemOption | null> {
    const result = await this.service.menuItemOption(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuItemOption)
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "create",
    possession: "any",
  })
  async createMenuItemOption(
    @graphql.Args() args: CreateMenuItemOptionArgs
  ): Promise<MenuItemOption> {
    return await this.service.createMenuItemOption({
      ...args,
      data: {
        ...args.data,

        menuItemsOptionsGroups: {
          connect: args.data.menuItemsOptionsGroups,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MenuItemOption)
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "update",
    possession: "any",
  })
  async updateMenuItemOption(
    @graphql.Args() args: UpdateMenuItemOptionArgs
  ): Promise<MenuItemOption | null> {
    try {
      return await this.service.updateMenuItemOption({
        ...args,
        data: {
          ...args.data,

          menuItemsOptionsGroups: {
            connect: args.data.menuItemsOptionsGroups,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MenuItemOption)
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "delete",
    possession: "any",
  })
  async deleteMenuItemOption(
    @graphql.Args() args: DeleteMenuItemOptionArgs
  ): Promise<MenuItemOption | null> {
    try {
      return await this.service.deleteMenuItemOption(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OptionsVarientsGroup], {
    name: "optionsVarientsGroup",
  })
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "read",
    possession: "any",
  })
  async findOptionsVarientsGroup(
    @graphql.Parent() parent: MenuItemOption,
    @graphql.Args() args: OptionsVarientsGroupFindManyArgs
  ): Promise<OptionsVarientsGroup[]> {
    const results = await this.service.findOptionsVarientsGroup(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MenuItemsOptionsGroup, {
    nullable: true,
    name: "menuItemsOptionsGroups",
  })
  @nestAccessControl.UseRoles({
    resource: "MenuItemsOptionsGroup",
    action: "read",
    possession: "any",
  })
  async getMenuItemsOptionsGroups(
    @graphql.Parent() parent: MenuItemOption
  ): Promise<MenuItemsOptionsGroup | null> {
    const result = await this.service.getMenuItemsOptionsGroups(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
