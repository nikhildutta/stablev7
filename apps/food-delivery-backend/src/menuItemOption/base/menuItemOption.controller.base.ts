/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MenuItemOptionService } from "../menuItemOption.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MenuItemOptionCreateInput } from "./MenuItemOptionCreateInput";
import { MenuItemOption } from "./MenuItemOption";
import { MenuItemOptionFindManyArgs } from "./MenuItemOptionFindManyArgs";
import { MenuItemOptionWhereUniqueInput } from "./MenuItemOptionWhereUniqueInput";
import { MenuItemOptionUpdateInput } from "./MenuItemOptionUpdateInput";
import { OptionsVarientsGroupFindManyArgs } from "../../optionsVarientsGroup/base/OptionsVarientsGroupFindManyArgs";
import { OptionsVarientsGroup } from "../../optionsVarientsGroup/base/OptionsVarientsGroup";
import { OptionsVarientsGroupWhereUniqueInput } from "../../optionsVarientsGroup/base/OptionsVarientsGroupWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MenuItemOptionControllerBase {
  constructor(
    protected readonly service: MenuItemOptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MenuItemOption })
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMenuItemOption(
    @common.Body() data: MenuItemOptionCreateInput
  ): Promise<MenuItemOption> {
    return await this.service.createMenuItemOption({
      data: {
        ...data,

        menuItemsOptionsGroups: {
          connect: data.menuItemsOptionsGroups,
        },
      },
      select: {
        additionalPrice: true,
        createdAt: true,
        description: true,
        id: true,
        isDefault: true,

        menuItemsOptionsGroups: {
          select: {
            id: true,
          },
        },

        name: true,
        optionImageUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MenuItemOption] })
  @ApiNestedQuery(MenuItemOptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async menuItemOptions(
    @common.Req() request: Request
  ): Promise<MenuItemOption[]> {
    const args = plainToClass(MenuItemOptionFindManyArgs, request.query);
    return this.service.menuItemOptions({
      ...args,
      select: {
        additionalPrice: true,
        createdAt: true,
        description: true,
        id: true,
        isDefault: true,

        menuItemsOptionsGroups: {
          select: {
            id: true,
          },
        },

        name: true,
        optionImageUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MenuItemOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async menuItemOption(
    @common.Param() params: MenuItemOptionWhereUniqueInput
  ): Promise<MenuItemOption | null> {
    const result = await this.service.menuItemOption({
      where: params,
      select: {
        additionalPrice: true,
        createdAt: true,
        description: true,
        id: true,
        isDefault: true,

        menuItemsOptionsGroups: {
          select: {
            id: true,
          },
        },

        name: true,
        optionImageUrl: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MenuItemOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMenuItemOption(
    @common.Param() params: MenuItemOptionWhereUniqueInput,
    @common.Body() data: MenuItemOptionUpdateInput
  ): Promise<MenuItemOption | null> {
    try {
      return await this.service.updateMenuItemOption({
        where: params,
        data: {
          ...data,

          menuItemsOptionsGroups: {
            connect: data.menuItemsOptionsGroups,
          },
        },
        select: {
          additionalPrice: true,
          createdAt: true,
          description: true,
          id: true,
          isDefault: true,

          menuItemsOptionsGroups: {
            select: {
              id: true,
            },
          },

          name: true,
          optionImageUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MenuItemOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMenuItemOption(
    @common.Param() params: MenuItemOptionWhereUniqueInput
  ): Promise<MenuItemOption | null> {
    try {
      return await this.service.deleteMenuItemOption({
        where: params,
        select: {
          additionalPrice: true,
          createdAt: true,
          description: true,
          id: true,
          isDefault: true,

          menuItemsOptionsGroups: {
            select: {
              id: true,
            },
          },

          name: true,
          optionImageUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/optionsVarientsGroup")
  @ApiNestedQuery(OptionsVarientsGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OptionsVarientsGroup",
    action: "read",
    possession: "any",
  })
  async findOptionsVarientsGroup(
    @common.Req() request: Request,
    @common.Param() params: MenuItemOptionWhereUniqueInput
  ): Promise<OptionsVarientsGroup[]> {
    const query = plainToClass(OptionsVarientsGroupFindManyArgs, request.query);
    const results = await this.service.findOptionsVarientsGroup(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        menuItemOptions: {
          select: {
            id: true,
          },
        },

        optionVariantGroupName: true,
        updatedAt: true,
        variantGroupDescription: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/optionsVarientsGroup")
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "update",
    possession: "any",
  })
  async connectOptionsVarientsGroup(
    @common.Param() params: MenuItemOptionWhereUniqueInput,
    @common.Body() body: OptionsVarientsGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      optionsVarientsGroup: {
        connect: body,
      },
    };
    await this.service.updateMenuItemOption({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/optionsVarientsGroup")
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "update",
    possession: "any",
  })
  async updateOptionsVarientsGroup(
    @common.Param() params: MenuItemOptionWhereUniqueInput,
    @common.Body() body: OptionsVarientsGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      optionsVarientsGroup: {
        set: body,
      },
    };
    await this.service.updateMenuItemOption({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/optionsVarientsGroup")
  @nestAccessControl.UseRoles({
    resource: "MenuItemOption",
    action: "update",
    possession: "any",
  })
  async disconnectOptionsVarientsGroup(
    @common.Param() params: MenuItemOptionWhereUniqueInput,
    @common.Body() body: OptionsVarientsGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      optionsVarientsGroup: {
        disconnect: body,
      },
    };
    await this.service.updateMenuItemOption({
      where: params,
      data,
      select: { id: true },
    });
  }
}
