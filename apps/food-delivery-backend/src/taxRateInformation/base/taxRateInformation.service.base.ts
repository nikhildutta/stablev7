/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TaxRateInformation as PrismaTaxRateInformation,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class TaxRateInformationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TaxRateInformationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.taxRateInformation.count(args);
  }

  async taxRateInformations<T extends Prisma.TaxRateInformationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxRateInformationFindManyArgs>
  ): Promise<PrismaTaxRateInformation[]> {
    return this.prisma.taxRateInformation.findMany<Prisma.TaxRateInformationFindManyArgs>(
      args
    );
  }
  async taxRateInformation<T extends Prisma.TaxRateInformationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxRateInformationFindUniqueArgs>
  ): Promise<PrismaTaxRateInformation | null> {
    return this.prisma.taxRateInformation.findUnique(args);
  }
  async createTaxRateInformation<T extends Prisma.TaxRateInformationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxRateInformationCreateArgs>
  ): Promise<PrismaTaxRateInformation> {
    return this.prisma.taxRateInformation.create<T>(args);
  }
  async updateTaxRateInformation<T extends Prisma.TaxRateInformationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxRateInformationUpdateArgs>
  ): Promise<PrismaTaxRateInformation> {
    return this.prisma.taxRateInformation.update<T>(args);
  }
  async deleteTaxRateInformation<T extends Prisma.TaxRateInformationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxRateInformationDeleteArgs>
  ): Promise<PrismaTaxRateInformation> {
    return this.prisma.taxRateInformation.delete(args);
  }

  async getRestaurants(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.taxRateInformation
      .findUnique({
        where: { id: parentId },
      })
      .restaurants();
  }
}
