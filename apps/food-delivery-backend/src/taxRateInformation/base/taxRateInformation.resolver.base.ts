/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TaxRateInformation } from "./TaxRateInformation";
import { TaxRateInformationCountArgs } from "./TaxRateInformationCountArgs";
import { TaxRateInformationFindManyArgs } from "./TaxRateInformationFindManyArgs";
import { TaxRateInformationFindUniqueArgs } from "./TaxRateInformationFindUniqueArgs";
import { CreateTaxRateInformationArgs } from "./CreateTaxRateInformationArgs";
import { UpdateTaxRateInformationArgs } from "./UpdateTaxRateInformationArgs";
import { DeleteTaxRateInformationArgs } from "./DeleteTaxRateInformationArgs";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { TaxRateInformationService } from "../taxRateInformation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TaxRateInformation)
export class TaxRateInformationResolverBase {
  constructor(
    protected readonly service: TaxRateInformationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TaxRateInformation",
    action: "read",
    possession: "any",
  })
  async _taxRateInformationsMeta(
    @graphql.Args() args: TaxRateInformationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TaxRateInformation])
  @nestAccessControl.UseRoles({
    resource: "TaxRateInformation",
    action: "read",
    possession: "any",
  })
  async taxRateInformations(
    @graphql.Args() args: TaxRateInformationFindManyArgs
  ): Promise<TaxRateInformation[]> {
    return this.service.taxRateInformations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TaxRateInformation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TaxRateInformation",
    action: "read",
    possession: "own",
  })
  async taxRateInformation(
    @graphql.Args() args: TaxRateInformationFindUniqueArgs
  ): Promise<TaxRateInformation | null> {
    const result = await this.service.taxRateInformation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TaxRateInformation)
  @nestAccessControl.UseRoles({
    resource: "TaxRateInformation",
    action: "create",
    possession: "any",
  })
  async createTaxRateInformation(
    @graphql.Args() args: CreateTaxRateInformationArgs
  ): Promise<TaxRateInformation> {
    return await this.service.createTaxRateInformation({
      ...args,
      data: {
        ...args.data,

        restaurants: {
          connect: args.data.restaurants,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TaxRateInformation)
  @nestAccessControl.UseRoles({
    resource: "TaxRateInformation",
    action: "update",
    possession: "any",
  })
  async updateTaxRateInformation(
    @graphql.Args() args: UpdateTaxRateInformationArgs
  ): Promise<TaxRateInformation | null> {
    try {
      return await this.service.updateTaxRateInformation({
        ...args,
        data: {
          ...args.data,

          restaurants: {
            connect: args.data.restaurants,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TaxRateInformation)
  @nestAccessControl.UseRoles({
    resource: "TaxRateInformation",
    action: "delete",
    possession: "any",
  })
  async deleteTaxRateInformation(
    @graphql.Args() args: DeleteTaxRateInformationArgs
  ): Promise<TaxRateInformation | null> {
    try {
      return await this.service.deleteTaxRateInformation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurants",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurants(
    @graphql.Parent() parent: TaxRateInformation
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurants(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
