/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FavouriteRestaurant } from "./FavouriteRestaurant";
import { FavouriteRestaurantCountArgs } from "./FavouriteRestaurantCountArgs";
import { FavouriteRestaurantFindManyArgs } from "./FavouriteRestaurantFindManyArgs";
import { FavouriteRestaurantFindUniqueArgs } from "./FavouriteRestaurantFindUniqueArgs";
import { CreateFavouriteRestaurantArgs } from "./CreateFavouriteRestaurantArgs";
import { UpdateFavouriteRestaurantArgs } from "./UpdateFavouriteRestaurantArgs";
import { DeleteFavouriteRestaurantArgs } from "./DeleteFavouriteRestaurantArgs";
import { Favourite } from "../../favourite/base/Favourite";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { FavouriteRestaurantService } from "../favouriteRestaurant.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FavouriteRestaurant)
export class FavouriteRestaurantResolverBase {
  constructor(
    protected readonly service: FavouriteRestaurantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FavouriteRestaurant",
    action: "read",
    possession: "any",
  })
  async _favouriteRestaurantsMeta(
    @graphql.Args() args: FavouriteRestaurantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FavouriteRestaurant])
  @nestAccessControl.UseRoles({
    resource: "FavouriteRestaurant",
    action: "read",
    possession: "any",
  })
  async favouriteRestaurants(
    @graphql.Args() args: FavouriteRestaurantFindManyArgs
  ): Promise<FavouriteRestaurant[]> {
    return this.service.favouriteRestaurants(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FavouriteRestaurant, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FavouriteRestaurant",
    action: "read",
    possession: "own",
  })
  async favouriteRestaurant(
    @graphql.Args() args: FavouriteRestaurantFindUniqueArgs
  ): Promise<FavouriteRestaurant | null> {
    const result = await this.service.favouriteRestaurant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FavouriteRestaurant)
  @nestAccessControl.UseRoles({
    resource: "FavouriteRestaurant",
    action: "create",
    possession: "any",
  })
  async createFavouriteRestaurant(
    @graphql.Args() args: CreateFavouriteRestaurantArgs
  ): Promise<FavouriteRestaurant> {
    return await this.service.createFavouriteRestaurant({
      ...args,
      data: {
        ...args.data,

        favourites: {
          connect: args.data.favourites,
        },

        restaurants: {
          connect: args.data.restaurants,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FavouriteRestaurant)
  @nestAccessControl.UseRoles({
    resource: "FavouriteRestaurant",
    action: "update",
    possession: "any",
  })
  async updateFavouriteRestaurant(
    @graphql.Args() args: UpdateFavouriteRestaurantArgs
  ): Promise<FavouriteRestaurant | null> {
    try {
      return await this.service.updateFavouriteRestaurant({
        ...args,
        data: {
          ...args.data,

          favourites: {
            connect: args.data.favourites,
          },

          restaurants: {
            connect: args.data.restaurants,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FavouriteRestaurant)
  @nestAccessControl.UseRoles({
    resource: "FavouriteRestaurant",
    action: "delete",
    possession: "any",
  })
  async deleteFavouriteRestaurant(
    @graphql.Args() args: DeleteFavouriteRestaurantArgs
  ): Promise<FavouriteRestaurant | null> {
    try {
      return await this.service.deleteFavouriteRestaurant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Favourite, {
    nullable: true,
    name: "favourites",
  })
  @nestAccessControl.UseRoles({
    resource: "Favourite",
    action: "read",
    possession: "any",
  })
  async getFavourites(
    @graphql.Parent() parent: FavouriteRestaurant
  ): Promise<Favourite | null> {
    const result = await this.service.getFavourites(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurants",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurants(
    @graphql.Parent() parent: FavouriteRestaurant
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurants(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
