/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FavouriteRestaurant as PrismaFavouriteRestaurant,
  Favourite as PrismaFavourite,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class FavouriteRestaurantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FavouriteRestaurantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.favouriteRestaurant.count(args);
  }

  async favouriteRestaurants<T extends Prisma.FavouriteRestaurantFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavouriteRestaurantFindManyArgs>
  ): Promise<PrismaFavouriteRestaurant[]> {
    return this.prisma.favouriteRestaurant.findMany<Prisma.FavouriteRestaurantFindManyArgs>(
      args
    );
  }
  async favouriteRestaurant<T extends Prisma.FavouriteRestaurantFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FavouriteRestaurantFindUniqueArgs>
  ): Promise<PrismaFavouriteRestaurant | null> {
    return this.prisma.favouriteRestaurant.findUnique(args);
  }
  async createFavouriteRestaurant<
    T extends Prisma.FavouriteRestaurantCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FavouriteRestaurantCreateArgs>
  ): Promise<PrismaFavouriteRestaurant> {
    return this.prisma.favouriteRestaurant.create<T>(args);
  }
  async updateFavouriteRestaurant<
    T extends Prisma.FavouriteRestaurantUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FavouriteRestaurantUpdateArgs>
  ): Promise<PrismaFavouriteRestaurant> {
    return this.prisma.favouriteRestaurant.update<T>(args);
  }
  async deleteFavouriteRestaurant<
    T extends Prisma.FavouriteRestaurantDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FavouriteRestaurantDeleteArgs>
  ): Promise<PrismaFavouriteRestaurant> {
    return this.prisma.favouriteRestaurant.delete(args);
  }

  async getFavourites(parentId: string): Promise<PrismaFavourite | null> {
    return this.prisma.favouriteRestaurant
      .findUnique({
        where: { id: parentId },
      })
      .favourites();
  }

  async getRestaurants(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.favouriteRestaurant
      .findUnique({
        where: { id: parentId },
      })
      .restaurants();
  }
}
