/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ComplaintsBookService } from "../complaintsBook.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ComplaintsBookCreateInput } from "./ComplaintsBookCreateInput";
import { ComplaintsBook } from "./ComplaintsBook";
import { ComplaintsBookFindManyArgs } from "./ComplaintsBookFindManyArgs";
import { ComplaintsBookWhereUniqueInput } from "./ComplaintsBookWhereUniqueInput";
import { ComplaintsBookUpdateInput } from "./ComplaintsBookUpdateInput";
import { ComplaintItemFindManyArgs } from "../../complaintItem/base/ComplaintItemFindManyArgs";
import { ComplaintItem } from "../../complaintItem/base/ComplaintItem";
import { ComplaintItemWhereUniqueInput } from "../../complaintItem/base/ComplaintItemWhereUniqueInput";
import { ComplaintsPhotoFindManyArgs } from "../../complaintsPhoto/base/ComplaintsPhotoFindManyArgs";
import { ComplaintsPhoto } from "../../complaintsPhoto/base/ComplaintsPhoto";
import { ComplaintsPhotoWhereUniqueInput } from "../../complaintsPhoto/base/ComplaintsPhotoWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ComplaintsBookControllerBase {
  constructor(
    protected readonly service: ComplaintsBookService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ComplaintsBook })
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createComplaintsBook(
    @common.Body() data: ComplaintsBookCreateInput
  ): Promise<ComplaintsBook> {
    return await this.service.createComplaintsBook({
      data: {
        ...data,

        paymentsBook: {
          connect: data.paymentsBook,
        },
      },
      select: {
        createdAt: true,
        id: true,
        issue_category: true,
        issueDescription: true,
        orderId: true,

        paymentsBook: {
          select: {
            id: true,
          },
        },

        refundAmount: true,
        refund_eligibility: true,
        refund_mode: true,
        refund_type: true,
        ticketCreationTime: true,
        ticketId: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ComplaintsBook] })
  @ApiNestedQuery(ComplaintsBookFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async complaintsBooks(
    @common.Req() request: Request
  ): Promise<ComplaintsBook[]> {
    const args = plainToClass(ComplaintsBookFindManyArgs, request.query);
    return this.service.complaintsBooks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        issue_category: true,
        issueDescription: true,
        orderId: true,

        paymentsBook: {
          select: {
            id: true,
          },
        },

        refundAmount: true,
        refund_eligibility: true,
        refund_mode: true,
        refund_type: true,
        ticketCreationTime: true,
        ticketId: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ComplaintsBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async complaintsBook(
    @common.Param() params: ComplaintsBookWhereUniqueInput
  ): Promise<ComplaintsBook | null> {
    const result = await this.service.complaintsBook({
      where: params,
      select: {
        createdAt: true,
        id: true,
        issue_category: true,
        issueDescription: true,
        orderId: true,

        paymentsBook: {
          select: {
            id: true,
          },
        },

        refundAmount: true,
        refund_eligibility: true,
        refund_mode: true,
        refund_type: true,
        ticketCreationTime: true,
        ticketId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ComplaintsBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateComplaintsBook(
    @common.Param() params: ComplaintsBookWhereUniqueInput,
    @common.Body() data: ComplaintsBookUpdateInput
  ): Promise<ComplaintsBook | null> {
    try {
      return await this.service.updateComplaintsBook({
        where: params,
        data: {
          ...data,

          paymentsBook: {
            connect: data.paymentsBook,
          },
        },
        select: {
          createdAt: true,
          id: true,
          issue_category: true,
          issueDescription: true,
          orderId: true,

          paymentsBook: {
            select: {
              id: true,
            },
          },

          refundAmount: true,
          refund_eligibility: true,
          refund_mode: true,
          refund_type: true,
          ticketCreationTime: true,
          ticketId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ComplaintsBook })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteComplaintsBook(
    @common.Param() params: ComplaintsBookWhereUniqueInput
  ): Promise<ComplaintsBook | null> {
    try {
      return await this.service.deleteComplaintsBook({
        where: params,
        select: {
          createdAt: true,
          id: true,
          issue_category: true,
          issueDescription: true,
          orderId: true,

          paymentsBook: {
            select: {
              id: true,
            },
          },

          refundAmount: true,
          refund_eligibility: true,
          refund_mode: true,
          refund_type: true,
          ticketCreationTime: true,
          ticketId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/complaintItem")
  @ApiNestedQuery(ComplaintItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComplaintItem",
    action: "read",
    possession: "any",
  })
  async findComplaintItem(
    @common.Req() request: Request,
    @common.Param() params: ComplaintsBookWhereUniqueInput
  ): Promise<ComplaintItem[]> {
    const query = plainToClass(ComplaintItemFindManyArgs, request.query);
    const results = await this.service.findComplaintItem(params.id, {
      ...query,
      select: {
        complaintsBook: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isRefund: true,

        orderItems: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/complaintItem")
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "update",
    possession: "any",
  })
  async connectComplaintItem(
    @common.Param() params: ComplaintsBookWhereUniqueInput,
    @common.Body() body: ComplaintItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaintItem: {
        connect: body,
      },
    };
    await this.service.updateComplaintsBook({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/complaintItem")
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "update",
    possession: "any",
  })
  async updateComplaintItem(
    @common.Param() params: ComplaintsBookWhereUniqueInput,
    @common.Body() body: ComplaintItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaintItem: {
        set: body,
      },
    };
    await this.service.updateComplaintsBook({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/complaintItem")
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "update",
    possession: "any",
  })
  async disconnectComplaintItem(
    @common.Param() params: ComplaintsBookWhereUniqueInput,
    @common.Body() body: ComplaintItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaintItem: {
        disconnect: body,
      },
    };
    await this.service.updateComplaintsBook({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/complaintsPhotos")
  @ApiNestedQuery(ComplaintsPhotoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ComplaintsPhoto",
    action: "read",
    possession: "any",
  })
  async findComplaintsPhotos(
    @common.Req() request: Request,
    @common.Param() params: ComplaintsBookWhereUniqueInput
  ): Promise<ComplaintsPhoto[]> {
    const query = plainToClass(ComplaintsPhotoFindManyArgs, request.query);
    const results = await this.service.findComplaintsPhotos(params.id, {
      ...query,
      select: {
        complaintImageUrl: true,

        complaintsBook: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/complaintsPhotos")
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "update",
    possession: "any",
  })
  async connectComplaintsPhotos(
    @common.Param() params: ComplaintsBookWhereUniqueInput,
    @common.Body() body: ComplaintsPhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaintsPhotos: {
        connect: body,
      },
    };
    await this.service.updateComplaintsBook({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/complaintsPhotos")
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "update",
    possession: "any",
  })
  async updateComplaintsPhotos(
    @common.Param() params: ComplaintsBookWhereUniqueInput,
    @common.Body() body: ComplaintsPhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaintsPhotos: {
        set: body,
      },
    };
    await this.service.updateComplaintsBook({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/complaintsPhotos")
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "update",
    possession: "any",
  })
  async disconnectComplaintsPhotos(
    @common.Param() params: ComplaintsBookWhereUniqueInput,
    @common.Body() body: ComplaintsPhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaintsPhotos: {
        disconnect: body,
      },
    };
    await this.service.updateComplaintsBook({
      where: params,
      data,
      select: { id: true },
    });
  }
}
