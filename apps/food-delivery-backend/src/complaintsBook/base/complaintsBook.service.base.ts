/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ComplaintsBook as PrismaComplaintsBook,
  ComplaintItem as PrismaComplaintItem,
  ComplaintsPhoto as PrismaComplaintsPhoto,
  PaymentsBook as PrismaPaymentsBook,
} from "@prisma/client";

export class ComplaintsBookServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ComplaintsBookCountArgs, "select">
  ): Promise<number> {
    return this.prisma.complaintsBook.count(args);
  }

  async complaintsBooks<T extends Prisma.ComplaintsBookFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsBookFindManyArgs>
  ): Promise<PrismaComplaintsBook[]> {
    return this.prisma.complaintsBook.findMany<Prisma.ComplaintsBookFindManyArgs>(
      args
    );
  }
  async complaintsBook<T extends Prisma.ComplaintsBookFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsBookFindUniqueArgs>
  ): Promise<PrismaComplaintsBook | null> {
    return this.prisma.complaintsBook.findUnique(args);
  }
  async createComplaintsBook<T extends Prisma.ComplaintsBookCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsBookCreateArgs>
  ): Promise<PrismaComplaintsBook> {
    return this.prisma.complaintsBook.create<T>(args);
  }
  async updateComplaintsBook<T extends Prisma.ComplaintsBookUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsBookUpdateArgs>
  ): Promise<PrismaComplaintsBook> {
    return this.prisma.complaintsBook.update<T>(args);
  }
  async deleteComplaintsBook<T extends Prisma.ComplaintsBookDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ComplaintsBookDeleteArgs>
  ): Promise<PrismaComplaintsBook> {
    return this.prisma.complaintsBook.delete(args);
  }

  async findComplaintItem(
    parentId: string,
    args: Prisma.ComplaintItemFindManyArgs
  ): Promise<PrismaComplaintItem[]> {
    return this.prisma.complaintsBook
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .complaintItem(args);
  }

  async findComplaintsPhotos(
    parentId: string,
    args: Prisma.ComplaintsPhotoFindManyArgs
  ): Promise<PrismaComplaintsPhoto[]> {
    return this.prisma.complaintsBook
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .complaintsPhotos(args);
  }

  async getPaymentsBook(parentId: string): Promise<PrismaPaymentsBook | null> {
    return this.prisma.complaintsBook
      .findUnique({
        where: { id: parentId },
      })
      .paymentsBook();
  }
}
