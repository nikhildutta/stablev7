/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ComplaintsBook } from "./ComplaintsBook";
import { ComplaintsBookCountArgs } from "./ComplaintsBookCountArgs";
import { ComplaintsBookFindManyArgs } from "./ComplaintsBookFindManyArgs";
import { ComplaintsBookFindUniqueArgs } from "./ComplaintsBookFindUniqueArgs";
import { CreateComplaintsBookArgs } from "./CreateComplaintsBookArgs";
import { UpdateComplaintsBookArgs } from "./UpdateComplaintsBookArgs";
import { DeleteComplaintsBookArgs } from "./DeleteComplaintsBookArgs";
import { ComplaintItemFindManyArgs } from "../../complaintItem/base/ComplaintItemFindManyArgs";
import { ComplaintItem } from "../../complaintItem/base/ComplaintItem";
import { ComplaintsPhotoFindManyArgs } from "../../complaintsPhoto/base/ComplaintsPhotoFindManyArgs";
import { ComplaintsPhoto } from "../../complaintsPhoto/base/ComplaintsPhoto";
import { PaymentsBook } from "../../paymentsBook/base/PaymentsBook";
import { ComplaintsBookService } from "../complaintsBook.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ComplaintsBook)
export class ComplaintsBookResolverBase {
  constructor(
    protected readonly service: ComplaintsBookService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "read",
    possession: "any",
  })
  async _complaintsBooksMeta(
    @graphql.Args() args: ComplaintsBookCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ComplaintsBook])
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "read",
    possession: "any",
  })
  async complaintsBooks(
    @graphql.Args() args: ComplaintsBookFindManyArgs
  ): Promise<ComplaintsBook[]> {
    return this.service.complaintsBooks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ComplaintsBook, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "read",
    possession: "own",
  })
  async complaintsBook(
    @graphql.Args() args: ComplaintsBookFindUniqueArgs
  ): Promise<ComplaintsBook | null> {
    const result = await this.service.complaintsBook(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ComplaintsBook)
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "create",
    possession: "any",
  })
  async createComplaintsBook(
    @graphql.Args() args: CreateComplaintsBookArgs
  ): Promise<ComplaintsBook> {
    return await this.service.createComplaintsBook({
      ...args,
      data: {
        ...args.data,

        paymentsBook: {
          connect: args.data.paymentsBook,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ComplaintsBook)
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "update",
    possession: "any",
  })
  async updateComplaintsBook(
    @graphql.Args() args: UpdateComplaintsBookArgs
  ): Promise<ComplaintsBook | null> {
    try {
      return await this.service.updateComplaintsBook({
        ...args,
        data: {
          ...args.data,

          paymentsBook: {
            connect: args.data.paymentsBook,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ComplaintsBook)
  @nestAccessControl.UseRoles({
    resource: "ComplaintsBook",
    action: "delete",
    possession: "any",
  })
  async deleteComplaintsBook(
    @graphql.Args() args: DeleteComplaintsBookArgs
  ): Promise<ComplaintsBook | null> {
    try {
      return await this.service.deleteComplaintsBook(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ComplaintItem], { name: "complaintItem" })
  @nestAccessControl.UseRoles({
    resource: "ComplaintItem",
    action: "read",
    possession: "any",
  })
  async findComplaintItem(
    @graphql.Parent() parent: ComplaintsBook,
    @graphql.Args() args: ComplaintItemFindManyArgs
  ): Promise<ComplaintItem[]> {
    const results = await this.service.findComplaintItem(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ComplaintsPhoto], { name: "complaintsPhotos" })
  @nestAccessControl.UseRoles({
    resource: "ComplaintsPhoto",
    action: "read",
    possession: "any",
  })
  async findComplaintsPhotos(
    @graphql.Parent() parent: ComplaintsBook,
    @graphql.Args() args: ComplaintsPhotoFindManyArgs
  ): Promise<ComplaintsPhoto[]> {
    const results = await this.service.findComplaintsPhotos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentsBook, {
    nullable: true,
    name: "paymentsBook",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "read",
    possession: "any",
  })
  async getPaymentsBook(
    @graphql.Parent() parent: ComplaintsBook
  ): Promise<PaymentsBook | null> {
    const result = await this.service.getPaymentsBook(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
