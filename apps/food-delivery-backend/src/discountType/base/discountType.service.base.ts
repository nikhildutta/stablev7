/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DiscountType as PrismaDiscountType,
  Discount as PrismaDiscount,
} from "@prisma/client";

export class DiscountTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DiscountTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.discountType.count(args);
  }

  async discountTypes<T extends Prisma.DiscountTypeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiscountTypeFindManyArgs>
  ): Promise<PrismaDiscountType[]> {
    return this.prisma.discountType.findMany<Prisma.DiscountTypeFindManyArgs>(
      args
    );
  }
  async discountType<T extends Prisma.DiscountTypeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiscountTypeFindUniqueArgs>
  ): Promise<PrismaDiscountType | null> {
    return this.prisma.discountType.findUnique(args);
  }
  async createDiscountType<T extends Prisma.DiscountTypeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiscountTypeCreateArgs>
  ): Promise<PrismaDiscountType> {
    return this.prisma.discountType.create<T>(args);
  }
  async updateDiscountType<T extends Prisma.DiscountTypeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiscountTypeUpdateArgs>
  ): Promise<PrismaDiscountType> {
    return this.prisma.discountType.update<T>(args);
  }
  async deleteDiscountType<T extends Prisma.DiscountTypeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DiscountTypeDeleteArgs>
  ): Promise<PrismaDiscountType> {
    return this.prisma.discountType.delete(args);
  }

  async findDiscount(
    parentId: string,
    args: Prisma.DiscountFindManyArgs
  ): Promise<PrismaDiscount[]> {
    return this.prisma.discountType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .discount(args);
  }
}
