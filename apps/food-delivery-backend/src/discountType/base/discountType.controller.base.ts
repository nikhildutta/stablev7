/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DiscountTypeService } from "../discountType.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DiscountTypeCreateInput } from "./DiscountTypeCreateInput";
import { DiscountType } from "./DiscountType";
import { DiscountTypeFindManyArgs } from "./DiscountTypeFindManyArgs";
import { DiscountTypeWhereUniqueInput } from "./DiscountTypeWhereUniqueInput";
import { DiscountTypeUpdateInput } from "./DiscountTypeUpdateInput";
import { DiscountFindManyArgs } from "../../discount/base/DiscountFindManyArgs";
import { Discount } from "../../discount/base/Discount";
import { DiscountWhereUniqueInput } from "../../discount/base/DiscountWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DiscountTypeControllerBase {
  constructor(
    protected readonly service: DiscountTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DiscountType })
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDiscountType(
    @common.Body() data: DiscountTypeCreateInput
  ): Promise<DiscountType> {
    return await this.service.createDiscountType({
      data: data,
      select: {
        discountType: true,
        id: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [DiscountType] })
  @ApiNestedQuery(DiscountTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async discountTypes(@common.Req() request: Request): Promise<DiscountType[]> {
    const args = plainToClass(DiscountTypeFindManyArgs, request.query);
    return this.service.discountTypes({
      ...args,
      select: {
        discountType: true,
        id: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DiscountType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async discountType(
    @common.Param() params: DiscountTypeWhereUniqueInput
  ): Promise<DiscountType | null> {
    const result = await this.service.discountType({
      where: params,
      select: {
        discountType: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DiscountType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDiscountType(
    @common.Param() params: DiscountTypeWhereUniqueInput,
    @common.Body() data: DiscountTypeUpdateInput
  ): Promise<DiscountType | null> {
    try {
      return await this.service.updateDiscountType({
        where: params,
        data: data,
        select: {
          discountType: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DiscountType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDiscountType(
    @common.Param() params: DiscountTypeWhereUniqueInput
  ): Promise<DiscountType | null> {
    try {
      return await this.service.deleteDiscountType({
        where: params,
        select: {
          discountType: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/discount")
  @ApiNestedQuery(DiscountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Discount",
    action: "read",
    possession: "any",
  })
  async findDiscount(
    @common.Req() request: Request,
    @common.Param() params: DiscountTypeWhereUniqueInput
  ): Promise<Discount[]> {
    const query = plainToClass(DiscountFindManyArgs, request.query);
    const results = await this.service.findDiscount(params.id, {
      ...query,
      select: {
        createdAt: true,

        discountType: {
          select: {
            id: true,
          },
        },

        expirationDate: true,
        id: true,
        isActive: true,
        maxDiscount: true,
        minimumOrderValue: true,
        typeOfDiscount: true,
        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/discount")
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "update",
    possession: "any",
  })
  async connectDiscount(
    @common.Param() params: DiscountTypeWhereUniqueInput,
    @common.Body() body: DiscountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discount: {
        connect: body,
      },
    };
    await this.service.updateDiscountType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/discount")
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "update",
    possession: "any",
  })
  async updateDiscount(
    @common.Param() params: DiscountTypeWhereUniqueInput,
    @common.Body() body: DiscountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discount: {
        set: body,
      },
    };
    await this.service.updateDiscountType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/discount")
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "update",
    possession: "any",
  })
  async disconnectDiscount(
    @common.Param() params: DiscountTypeWhereUniqueInput,
    @common.Body() body: DiscountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discount: {
        disconnect: body,
      },
    };
    await this.service.updateDiscountType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
