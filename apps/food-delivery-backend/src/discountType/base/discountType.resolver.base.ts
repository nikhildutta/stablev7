/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DiscountType } from "./DiscountType";
import { DiscountTypeCountArgs } from "./DiscountTypeCountArgs";
import { DiscountTypeFindManyArgs } from "./DiscountTypeFindManyArgs";
import { DiscountTypeFindUniqueArgs } from "./DiscountTypeFindUniqueArgs";
import { CreateDiscountTypeArgs } from "./CreateDiscountTypeArgs";
import { UpdateDiscountTypeArgs } from "./UpdateDiscountTypeArgs";
import { DeleteDiscountTypeArgs } from "./DeleteDiscountTypeArgs";
import { DiscountFindManyArgs } from "../../discount/base/DiscountFindManyArgs";
import { Discount } from "../../discount/base/Discount";
import { DiscountTypeService } from "../discountType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DiscountType)
export class DiscountTypeResolverBase {
  constructor(
    protected readonly service: DiscountTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "read",
    possession: "any",
  })
  async _discountTypesMeta(
    @graphql.Args() args: DiscountTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DiscountType])
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "read",
    possession: "any",
  })
  async discountTypes(
    @graphql.Args() args: DiscountTypeFindManyArgs
  ): Promise<DiscountType[]> {
    return this.service.discountTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DiscountType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "read",
    possession: "own",
  })
  async discountType(
    @graphql.Args() args: DiscountTypeFindUniqueArgs
  ): Promise<DiscountType | null> {
    const result = await this.service.discountType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DiscountType)
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "create",
    possession: "any",
  })
  async createDiscountType(
    @graphql.Args() args: CreateDiscountTypeArgs
  ): Promise<DiscountType> {
    return await this.service.createDiscountType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DiscountType)
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "update",
    possession: "any",
  })
  async updateDiscountType(
    @graphql.Args() args: UpdateDiscountTypeArgs
  ): Promise<DiscountType | null> {
    try {
      return await this.service.updateDiscountType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DiscountType)
  @nestAccessControl.UseRoles({
    resource: "DiscountType",
    action: "delete",
    possession: "any",
  })
  async deleteDiscountType(
    @graphql.Args() args: DeleteDiscountTypeArgs
  ): Promise<DiscountType | null> {
    try {
      return await this.service.deleteDiscountType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Discount], { name: "discount" })
  @nestAccessControl.UseRoles({
    resource: "Discount",
    action: "read",
    possession: "any",
  })
  async findDiscount(
    @graphql.Parent() parent: DiscountType,
    @graphql.Args() args: DiscountFindManyArgs
  ): Promise<Discount[]> {
    const results = await this.service.findDiscount(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
