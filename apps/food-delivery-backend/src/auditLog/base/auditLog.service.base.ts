/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AuditLog as PrismaAuditLog,
  PortalUser as PrismaPortalUser,
} from "@prisma/client";

export class AuditLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AuditLogCountArgs, "select">): Promise<number> {
    return this.prisma.auditLog.count(args);
  }

  async auditLogs<T extends Prisma.AuditLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuditLogFindManyArgs>
  ): Promise<PrismaAuditLog[]> {
    return this.prisma.auditLog.findMany<Prisma.AuditLogFindManyArgs>(args);
  }
  async auditLog<T extends Prisma.AuditLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuditLogFindUniqueArgs>
  ): Promise<PrismaAuditLog | null> {
    return this.prisma.auditLog.findUnique(args);
  }
  async createAuditLog<T extends Prisma.AuditLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuditLogCreateArgs>
  ): Promise<PrismaAuditLog> {
    return this.prisma.auditLog.create<T>(args);
  }
  async updateAuditLog<T extends Prisma.AuditLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuditLogUpdateArgs>
  ): Promise<PrismaAuditLog> {
    return this.prisma.auditLog.update<T>(args);
  }
  async deleteAuditLog<T extends Prisma.AuditLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AuditLogDeleteArgs>
  ): Promise<PrismaAuditLog> {
    return this.prisma.auditLog.delete(args);
  }

  async getPortalUsers(parentId: string): Promise<PrismaPortalUser | null> {
    return this.prisma.auditLog
      .findUnique({
        where: { id: parentId },
      })
      .portalUsers();
  }
}
