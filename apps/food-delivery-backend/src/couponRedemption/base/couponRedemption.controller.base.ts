/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CouponRedemptionService } from "../couponRedemption.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CouponRedemptionCreateInput } from "./CouponRedemptionCreateInput";
import { CouponRedemption } from "./CouponRedemption";
import { CouponRedemptionFindManyArgs } from "./CouponRedemptionFindManyArgs";
import { CouponRedemptionWhereUniqueInput } from "./CouponRedemptionWhereUniqueInput";
import { CouponRedemptionUpdateInput } from "./CouponRedemptionUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CouponRedemptionControllerBase {
  constructor(
    protected readonly service: CouponRedemptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CouponRedemption })
  @nestAccessControl.UseRoles({
    resource: "CouponRedemption",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCouponRedemption(
    @common.Body() data: CouponRedemptionCreateInput
  ): Promise<CouponRedemption> {
    return await this.service.createCouponRedemption({
      data: {
        ...data,

        appUsers: {
          connect: data.appUsers,
        },

        coupons: {
          connect: data.coupons,
        },
      },
      select: {
        appUsers: {
          select: {
            id: true,
          },
        },

        coupons: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isRedeemed: true,
        redemptionDate: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CouponRedemption] })
  @ApiNestedQuery(CouponRedemptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CouponRedemption",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async couponRedemptions(
    @common.Req() request: Request
  ): Promise<CouponRedemption[]> {
    const args = plainToClass(CouponRedemptionFindManyArgs, request.query);
    return this.service.couponRedemptions({
      ...args,
      select: {
        appUsers: {
          select: {
            id: true,
          },
        },

        coupons: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isRedeemed: true,
        redemptionDate: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CouponRedemption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CouponRedemption",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async couponRedemption(
    @common.Param() params: CouponRedemptionWhereUniqueInput
  ): Promise<CouponRedemption | null> {
    const result = await this.service.couponRedemption({
      where: params,
      select: {
        appUsers: {
          select: {
            id: true,
          },
        },

        coupons: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isRedeemed: true,
        redemptionDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CouponRedemption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CouponRedemption",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCouponRedemption(
    @common.Param() params: CouponRedemptionWhereUniqueInput,
    @common.Body() data: CouponRedemptionUpdateInput
  ): Promise<CouponRedemption | null> {
    try {
      return await this.service.updateCouponRedemption({
        where: params,
        data: {
          ...data,

          appUsers: {
            connect: data.appUsers,
          },

          coupons: {
            connect: data.coupons,
          },
        },
        select: {
          appUsers: {
            select: {
              id: true,
            },
          },

          coupons: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          isRedeemed: true,
          redemptionDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CouponRedemption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CouponRedemption",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCouponRedemption(
    @common.Param() params: CouponRedemptionWhereUniqueInput
  ): Promise<CouponRedemption | null> {
    try {
      return await this.service.deleteCouponRedemption({
        where: params,
        select: {
          appUsers: {
            select: {
              id: true,
            },
          },

          coupons: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          isRedeemed: true,
          redemptionDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
