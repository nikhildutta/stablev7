/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CouponRedemption as PrismaCouponRedemption,
  AppUser as PrismaAppUser,
  Coupon as PrismaCoupon,
} from "@prisma/client";

export class CouponRedemptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CouponRedemptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.couponRedemption.count(args);
  }

  async couponRedemptions<T extends Prisma.CouponRedemptionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CouponRedemptionFindManyArgs>
  ): Promise<PrismaCouponRedemption[]> {
    return this.prisma.couponRedemption.findMany<Prisma.CouponRedemptionFindManyArgs>(
      args
    );
  }
  async couponRedemption<T extends Prisma.CouponRedemptionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CouponRedemptionFindUniqueArgs>
  ): Promise<PrismaCouponRedemption | null> {
    return this.prisma.couponRedemption.findUnique(args);
  }
  async createCouponRedemption<T extends Prisma.CouponRedemptionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CouponRedemptionCreateArgs>
  ): Promise<PrismaCouponRedemption> {
    return this.prisma.couponRedemption.create<T>(args);
  }
  async updateCouponRedemption<T extends Prisma.CouponRedemptionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CouponRedemptionUpdateArgs>
  ): Promise<PrismaCouponRedemption> {
    return this.prisma.couponRedemption.update<T>(args);
  }
  async deleteCouponRedemption<T extends Prisma.CouponRedemptionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CouponRedemptionDeleteArgs>
  ): Promise<PrismaCouponRedemption> {
    return this.prisma.couponRedemption.delete(args);
  }

  async getAppUsers(parentId: string): Promise<PrismaAppUser | null> {
    return this.prisma.couponRedemption
      .findUnique({
        where: { id: parentId },
      })
      .appUsers();
  }

  async getCoupons(parentId: string): Promise<PrismaCoupon | null> {
    return this.prisma.couponRedemption
      .findUnique({
        where: { id: parentId },
      })
      .coupons();
  }
}
