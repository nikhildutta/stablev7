/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OrderHistory } from "./OrderHistory";
import { OrderHistoryCountArgs } from "./OrderHistoryCountArgs";
import { OrderHistoryFindManyArgs } from "./OrderHistoryFindManyArgs";
import { OrderHistoryFindUniqueArgs } from "./OrderHistoryFindUniqueArgs";
import { CreateOrderHistoryArgs } from "./CreateOrderHistoryArgs";
import { UpdateOrderHistoryArgs } from "./UpdateOrderHistoryArgs";
import { DeleteOrderHistoryArgs } from "./DeleteOrderHistoryArgs";
import { FulfillmentBookFindManyArgs } from "../../fulfillmentBook/base/FulfillmentBookFindManyArgs";
import { FulfillmentBook } from "../../fulfillmentBook/base/FulfillmentBook";
import { OrderItemFindManyArgs } from "../../orderItem/base/OrderItemFindManyArgs";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { OrdersHashtagsMapFindManyArgs } from "../../ordersHashtagsMap/base/OrdersHashtagsMapFindManyArgs";
import { OrdersHashtagsMap } from "../../ordersHashtagsMap/base/OrdersHashtagsMap";
import { PaymentsBookFindManyArgs } from "../../paymentsBook/base/PaymentsBookFindManyArgs";
import { PaymentsBook } from "../../paymentsBook/base/PaymentsBook";
import { RatingFindManyArgs } from "../../rating/base/RatingFindManyArgs";
import { Rating } from "../../rating/base/Rating";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { SettlementsBreakupFindManyArgs } from "../../settlementsBreakup/base/SettlementsBreakupFindManyArgs";
import { SettlementsBreakup } from "../../settlementsBreakup/base/SettlementsBreakup";
import { Address } from "../../address/base/Address";
import { AppUser } from "../../appUser/base/AppUser";
import { Coupon } from "../../coupon/base/Coupon";
import { PaymentMethod } from "../../paymentMethod/base/PaymentMethod";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { OrderHistoryService } from "../orderHistory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OrderHistory)
export class OrderHistoryResolverBase {
  constructor(
    protected readonly service: OrderHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "any",
  })
  async _orderHistoriesMeta(
    @graphql.Args() args: OrderHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OrderHistory])
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "any",
  })
  async orderHistories(
    @graphql.Args() args: OrderHistoryFindManyArgs
  ): Promise<OrderHistory[]> {
    return this.service.orderHistories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OrderHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "own",
  })
  async orderHistory(
    @graphql.Args() args: OrderHistoryFindUniqueArgs
  ): Promise<OrderHistory | null> {
    const result = await this.service.orderHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderHistory)
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "create",
    possession: "any",
  })
  async createOrderHistory(
    @graphql.Args() args: CreateOrderHistoryArgs
  ): Promise<OrderHistory> {
    return await this.service.createOrderHistory({
      ...args,
      data: {
        ...args.data,

        addresses: {
          connect: args.data.addresses,
        },

        appUsers: {
          connect: args.data.appUsers,
        },

        coupons: {
          connect: args.data.coupons,
        },

        paymentMethods: {
          connect: args.data.paymentMethods,
        },

        restaurants: {
          connect: args.data.restaurants,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrderHistory)
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async updateOrderHistory(
    @graphql.Args() args: UpdateOrderHistoryArgs
  ): Promise<OrderHistory | null> {
    try {
      return await this.service.updateOrderHistory({
        ...args,
        data: {
          ...args.data,

          addresses: {
            connect: args.data.addresses,
          },

          appUsers: {
            connect: args.data.appUsers,
          },

          coupons: {
            connect: args.data.coupons,
          },

          paymentMethods: {
            connect: args.data.paymentMethods,
          },

          restaurants: {
            connect: args.data.restaurants,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrderHistory)
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "delete",
    possession: "any",
  })
  async deleteOrderHistory(
    @graphql.Args() args: DeleteOrderHistoryArgs
  ): Promise<OrderHistory | null> {
    try {
      return await this.service.deleteOrderHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FulfillmentBook], { name: "fulfillmentBook" })
  @nestAccessControl.UseRoles({
    resource: "FulfillmentBook",
    action: "read",
    possession: "any",
  })
  async findFulfillmentBook(
    @graphql.Parent() parent: OrderHistory,
    @graphql.Args() args: FulfillmentBookFindManyArgs
  ): Promise<FulfillmentBook[]> {
    const results = await this.service.findFulfillmentBook(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OrderItem], { name: "orderItems" })
  @nestAccessControl.UseRoles({
    resource: "OrderItem",
    action: "read",
    possession: "any",
  })
  async findOrderItems(
    @graphql.Parent() parent: OrderHistory,
    @graphql.Args() args: OrderItemFindManyArgs
  ): Promise<OrderItem[]> {
    const results = await this.service.findOrderItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OrdersHashtagsMap], {
    name: "ordersHashtagsMap",
  })
  @nestAccessControl.UseRoles({
    resource: "OrdersHashtagsMap",
    action: "read",
    possession: "any",
  })
  async findOrdersHashtagsMap(
    @graphql.Parent() parent: OrderHistory,
    @graphql.Args() args: OrdersHashtagsMapFindManyArgs
  ): Promise<OrdersHashtagsMap[]> {
    const results = await this.service.findOrdersHashtagsMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PaymentsBook], { name: "paymentsBook" })
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "read",
    possession: "any",
  })
  async findPaymentsBook(
    @graphql.Parent() parent: OrderHistory,
    @graphql.Args() args: PaymentsBookFindManyArgs
  ): Promise<PaymentsBook[]> {
    const results = await this.service.findPaymentsBook(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Rating], { name: "ratings" })
  @nestAccessControl.UseRoles({
    resource: "Rating",
    action: "read",
    possession: "any",
  })
  async findRatings(
    @graphql.Parent() parent: OrderHistory,
    @graphql.Args() args: RatingFindManyArgs
  ): Promise<Rating[]> {
    const results = await this.service.findRatings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Review], { name: "reviews" })
  @nestAccessControl.UseRoles({
    resource: "Review",
    action: "read",
    possession: "any",
  })
  async findReviews(
    @graphql.Parent() parent: OrderHistory,
    @graphql.Args() args: ReviewFindManyArgs
  ): Promise<Review[]> {
    const results = await this.service.findReviews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SettlementsBreakup], {
    name: "settlementsBreakup",
  })
  @nestAccessControl.UseRoles({
    resource: "SettlementsBreakup",
    action: "read",
    possession: "any",
  })
  async findSettlementsBreakup(
    @graphql.Parent() parent: OrderHistory,
    @graphql.Args() args: SettlementsBreakupFindManyArgs
  ): Promise<SettlementsBreakup[]> {
    const results = await this.service.findSettlementsBreakup(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Address, {
    nullable: true,
    name: "addresses",
  })
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "read",
    possession: "any",
  })
  async getAddresses(
    @graphql.Parent() parent: OrderHistory
  ): Promise<Address | null> {
    const result = await this.service.getAddresses(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUsers",
  })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async getAppUsers(
    @graphql.Parent() parent: OrderHistory
  ): Promise<AppUser | null> {
    const result = await this.service.getAppUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Coupon, {
    nullable: true,
    name: "coupons",
  })
  @nestAccessControl.UseRoles({
    resource: "Coupon",
    action: "read",
    possession: "any",
  })
  async getCoupons(
    @graphql.Parent() parent: OrderHistory
  ): Promise<Coupon | null> {
    const result = await this.service.getCoupons(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentMethod, {
    nullable: true,
    name: "paymentMethods",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentMethod",
    action: "read",
    possession: "any",
  })
  async getPaymentMethods(
    @graphql.Parent() parent: OrderHistory
  ): Promise<PaymentMethod | null> {
    const result = await this.service.getPaymentMethods(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurants",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurants(
    @graphql.Parent() parent: OrderHistory
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurants(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
