/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AddressWhereUniqueInput } from "../../address/base/AddressWhereUniqueInput";

import {
  ValidateNested,
  IsOptional,
  IsNumber,
  IsDate,
  IsBoolean,
  IsInt,
  IsEnum,
  IsString,
} from "class-validator";

import { Type } from "class-transformer";
import { AppUserWhereUniqueInput } from "../../appUser/base/AppUserWhereUniqueInput";
import { CouponWhereUniqueInput } from "../../coupon/base/CouponWhereUniqueInput";
import { Decimal } from "decimal.js";
import { FulfillmentBookUpdateManyWithoutOrderHistoriesInput } from "./FulfillmentBookUpdateManyWithoutOrderHistoriesInput";
import { OrderItemUpdateManyWithoutOrderHistoriesInput } from "./OrderItemUpdateManyWithoutOrderHistoriesInput";
import { OrdersHashtagsMapUpdateManyWithoutOrderHistoriesInput } from "./OrdersHashtagsMapUpdateManyWithoutOrderHistoriesInput";
import { EnumOrderHistoryOrderType } from "./EnumOrderHistoryOrderType";
import { PaymentMethodWhereUniqueInput } from "../../paymentMethod/base/PaymentMethodWhereUniqueInput";
import { PaymentsBookUpdateManyWithoutOrderHistoriesInput } from "./PaymentsBookUpdateManyWithoutOrderHistoriesInput";
import { RatingUpdateManyWithoutOrderHistoriesInput } from "./RatingUpdateManyWithoutOrderHistoriesInput";
import { RestaurantWhereUniqueInput } from "../../restaurant/base/RestaurantWhereUniqueInput";
import { ReviewUpdateManyWithoutOrderHistoriesInput } from "./ReviewUpdateManyWithoutOrderHistoriesInput";
import { SettlementsBreakupUpdateManyWithoutOrderHistoriesInput } from "./SettlementsBreakupUpdateManyWithoutOrderHistoriesInput";

@InputType()
class OrderHistoryUpdateInput {
  @ApiProperty({
    required: false,
    type: () => AddressWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AddressWhereUniqueInput)
  @IsOptional()
  @Field(() => AddressWhereUniqueInput, {
    nullable: true,
  })
  addresses?: AddressWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => AppUserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AppUserWhereUniqueInput)
  @IsOptional()
  @Field(() => AppUserWhereUniqueInput, {
    nullable: true,
  })
  appUsers?: AppUserWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => CouponWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CouponWhereUniqueInput)
  @IsOptional()
  @Field(() => CouponWhereUniqueInput, {
    nullable: true,
  })
  coupons?: CouponWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  deliveryTipsAmount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  discountAmount?: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  estimatedDeliveryTime?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  finalAmount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => FulfillmentBookUpdateManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => FulfillmentBookUpdateManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => FulfillmentBookUpdateManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  fulfillmentBook?: FulfillmentBookUpdateManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isCancelled?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isFulfilled?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isPaid?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isRejected?: boolean | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  orderIdRef?: number;

  @ApiProperty({
    required: false,
    type: () => OrderItemUpdateManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => OrderItemUpdateManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => OrderItemUpdateManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  orderItems?: OrderItemUpdateManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: false,
    type: () => OrdersHashtagsMapUpdateManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => OrdersHashtagsMapUpdateManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => OrdersHashtagsMapUpdateManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  ordersHashtagsMap?: OrdersHashtagsMapUpdateManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: false,
    enum: EnumOrderHistoryOrderType,
  })
  @IsEnum(EnumOrderHistoryOrderType)
  @IsOptional()
  @Field(() => EnumOrderHistoryOrderType, {
    nullable: true,
  })
  order_type?: "Delivery" | "TakeAway" | "DineIn" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  packagingAmount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => PaymentMethodWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PaymentMethodWhereUniqueInput)
  @IsOptional()
  @Field(() => PaymentMethodWhereUniqueInput, {
    nullable: true,
  })
  paymentMethods?: PaymentMethodWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => PaymentsBookUpdateManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => PaymentsBookUpdateManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => PaymentsBookUpdateManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  paymentsBook?: PaymentsBookUpdateManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  preparationInstruction?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  preparationTime?: number | null;

  @ApiProperty({
    required: false,
    type: () => RatingUpdateManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => RatingUpdateManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => RatingUpdateManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  ratings?: RatingUpdateManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  rejectedBy?: string;

  @ApiProperty({
    required: false,
    type: () => RestaurantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RestaurantWhereUniqueInput)
  @IsOptional()
  @Field(() => RestaurantWhereUniqueInput, {
    nullable: true,
  })
  restaurants?: RestaurantWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ReviewUpdateManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => ReviewUpdateManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => ReviewUpdateManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  reviews?: ReviewUpdateManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: false,
    type: () => SettlementsBreakupUpdateManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => SettlementsBreakupUpdateManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => SettlementsBreakupUpdateManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  settlementsBreakup?: SettlementsBreakupUpdateManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  totalAmount?: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt?: Date | null;
}

export { OrderHistoryUpdateInput as OrderHistoryUpdateInput };
