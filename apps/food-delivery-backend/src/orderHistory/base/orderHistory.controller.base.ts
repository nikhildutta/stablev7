/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { OrderHistoryService } from "../orderHistory.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { OrderHistoryCreateInput } from "./OrderHistoryCreateInput";
import { OrderHistory } from "./OrderHistory";
import { OrderHistoryFindManyArgs } from "./OrderHistoryFindManyArgs";
import { OrderHistoryWhereUniqueInput } from "./OrderHistoryWhereUniqueInput";
import { OrderHistoryUpdateInput } from "./OrderHistoryUpdateInput";
import { FulfillmentBookFindManyArgs } from "../../fulfillmentBook/base/FulfillmentBookFindManyArgs";
import { FulfillmentBook } from "../../fulfillmentBook/base/FulfillmentBook";
import { FulfillmentBookWhereUniqueInput } from "../../fulfillmentBook/base/FulfillmentBookWhereUniqueInput";
import { OrderItemFindManyArgs } from "../../orderItem/base/OrderItemFindManyArgs";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { OrderItemWhereUniqueInput } from "../../orderItem/base/OrderItemWhereUniqueInput";
import { OrdersHashtagsMapFindManyArgs } from "../../ordersHashtagsMap/base/OrdersHashtagsMapFindManyArgs";
import { OrdersHashtagsMap } from "../../ordersHashtagsMap/base/OrdersHashtagsMap";
import { OrdersHashtagsMapWhereUniqueInput } from "../../ordersHashtagsMap/base/OrdersHashtagsMapWhereUniqueInput";
import { PaymentsBookFindManyArgs } from "../../paymentsBook/base/PaymentsBookFindManyArgs";
import { PaymentsBook } from "../../paymentsBook/base/PaymentsBook";
import { PaymentsBookWhereUniqueInput } from "../../paymentsBook/base/PaymentsBookWhereUniqueInput";
import { RatingFindManyArgs } from "../../rating/base/RatingFindManyArgs";
import { Rating } from "../../rating/base/Rating";
import { RatingWhereUniqueInput } from "../../rating/base/RatingWhereUniqueInput";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { ReviewWhereUniqueInput } from "../../review/base/ReviewWhereUniqueInput";
import { SettlementsBreakupFindManyArgs } from "../../settlementsBreakup/base/SettlementsBreakupFindManyArgs";
import { SettlementsBreakup } from "../../settlementsBreakup/base/SettlementsBreakup";
import { SettlementsBreakupWhereUniqueInput } from "../../settlementsBreakup/base/SettlementsBreakupWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class OrderHistoryControllerBase {
  constructor(
    protected readonly service: OrderHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OrderHistory })
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createOrderHistory(
    @common.Body() data: OrderHistoryCreateInput
  ): Promise<OrderHistory> {
    return await this.service.createOrderHistory({
      data: {
        ...data,

        addresses: {
          connect: data.addresses,
        },

        appUsers: {
          connect: data.appUsers,
        },

        coupons: {
          connect: data.coupons,
        },

        paymentMethods: {
          connect: data.paymentMethods,
        },

        restaurants: {
          connect: data.restaurants,
        },
      },
      select: {
        addresses: {
          select: {
            id: true,
          },
        },

        appUsers: {
          select: {
            id: true,
          },
        },

        coupons: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deliveryTipsAmount: true,
        discountAmount: true,
        estimatedDeliveryTime: true,
        finalAmount: true,
        id: true,
        isCancelled: true,
        isFulfilled: true,
        isPaid: true,
        isRejected: true,
        orderDateTime: true,
        orderIdRef: true,
        order_type: true,
        packagingAmount: true,

        paymentMethods: {
          select: {
            id: true,
          },
        },

        preparationInstruction: true,
        preparationTime: true,
        rejectedBy: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        totalAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [OrderHistory] })
  @ApiNestedQuery(OrderHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async orderHistories(
    @common.Req() request: Request
  ): Promise<OrderHistory[]> {
    const args = plainToClass(OrderHistoryFindManyArgs, request.query);
    return this.service.orderHistories({
      ...args,
      select: {
        addresses: {
          select: {
            id: true,
          },
        },

        appUsers: {
          select: {
            id: true,
          },
        },

        coupons: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deliveryTipsAmount: true,
        discountAmount: true,
        estimatedDeliveryTime: true,
        finalAmount: true,
        id: true,
        isCancelled: true,
        isFulfilled: true,
        isPaid: true,
        isRejected: true,
        orderDateTime: true,
        orderIdRef: true,
        order_type: true,
        packagingAmount: true,

        paymentMethods: {
          select: {
            id: true,
          },
        },

        preparationInstruction: true,
        preparationTime: true,
        rejectedBy: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        totalAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OrderHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async orderHistory(
    @common.Param() params: OrderHistoryWhereUniqueInput
  ): Promise<OrderHistory | null> {
    const result = await this.service.orderHistory({
      where: params,
      select: {
        addresses: {
          select: {
            id: true,
          },
        },

        appUsers: {
          select: {
            id: true,
          },
        },

        coupons: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deliveryTipsAmount: true,
        discountAmount: true,
        estimatedDeliveryTime: true,
        finalAmount: true,
        id: true,
        isCancelled: true,
        isFulfilled: true,
        isPaid: true,
        isRejected: true,
        orderDateTime: true,
        orderIdRef: true,
        order_type: true,
        packagingAmount: true,

        paymentMethods: {
          select: {
            id: true,
          },
        },

        preparationInstruction: true,
        preparationTime: true,
        rejectedBy: true,

        restaurants: {
          select: {
            id: true,
          },
        },

        totalAmount: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OrderHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateOrderHistory(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() data: OrderHistoryUpdateInput
  ): Promise<OrderHistory | null> {
    try {
      return await this.service.updateOrderHistory({
        where: params,
        data: {
          ...data,

          addresses: {
            connect: data.addresses,
          },

          appUsers: {
            connect: data.appUsers,
          },

          coupons: {
            connect: data.coupons,
          },

          paymentMethods: {
            connect: data.paymentMethods,
          },

          restaurants: {
            connect: data.restaurants,
          },
        },
        select: {
          addresses: {
            select: {
              id: true,
            },
          },

          appUsers: {
            select: {
              id: true,
            },
          },

          coupons: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          deliveryTipsAmount: true,
          discountAmount: true,
          estimatedDeliveryTime: true,
          finalAmount: true,
          id: true,
          isCancelled: true,
          isFulfilled: true,
          isPaid: true,
          isRejected: true,
          orderDateTime: true,
          orderIdRef: true,
          order_type: true,
          packagingAmount: true,

          paymentMethods: {
            select: {
              id: true,
            },
          },

          preparationInstruction: true,
          preparationTime: true,
          rejectedBy: true,

          restaurants: {
            select: {
              id: true,
            },
          },

          totalAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OrderHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteOrderHistory(
    @common.Param() params: OrderHistoryWhereUniqueInput
  ): Promise<OrderHistory | null> {
    try {
      return await this.service.deleteOrderHistory({
        where: params,
        select: {
          addresses: {
            select: {
              id: true,
            },
          },

          appUsers: {
            select: {
              id: true,
            },
          },

          coupons: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          deliveryTipsAmount: true,
          discountAmount: true,
          estimatedDeliveryTime: true,
          finalAmount: true,
          id: true,
          isCancelled: true,
          isFulfilled: true,
          isPaid: true,
          isRejected: true,
          orderDateTime: true,
          orderIdRef: true,
          order_type: true,
          packagingAmount: true,

          paymentMethods: {
            select: {
              id: true,
            },
          },

          preparationInstruction: true,
          preparationTime: true,
          rejectedBy: true,

          restaurants: {
            select: {
              id: true,
            },
          },

          totalAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/fulfillmentBook")
  @ApiNestedQuery(FulfillmentBookFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FulfillmentBook",
    action: "read",
    possession: "any",
  })
  async findFulfillmentBook(
    @common.Req() request: Request,
    @common.Param() params: OrderHistoryWhereUniqueInput
  ): Promise<FulfillmentBook[]> {
    const query = plainToClass(FulfillmentBookFindManyArgs, request.query);
    const results = await this.service.findFulfillmentBook(params.id, {
      ...query,
      select: {
        acceptedOrderBy: true,
        acceptedOrderStatus: true,
        acceptedOrderStatusAt: true,
        createdAt: true,
        customerFulfillmentStatus: true,
        customerFulfillmentStatusAt: true,
        id: true,
        markedFulfilledBy: true,

        orderHistory: {
          select: {
            id: true,
          },
        },

        partnerPickupAt: true,
        partnerPickupBy: true,
        partnerPickupStatus: true,
        readyForPickupBy: true,
        readyForPickupStatus: true,
        readyForPickupStatusAt: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/fulfillmentBook")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async connectFulfillmentBook(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: FulfillmentBookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fulfillmentBook: {
        connect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/fulfillmentBook")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async updateFulfillmentBook(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: FulfillmentBookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fulfillmentBook: {
        set: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/fulfillmentBook")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async disconnectFulfillmentBook(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: FulfillmentBookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fulfillmentBook: {
        disconnect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orderItems")
  @ApiNestedQuery(OrderItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrderItem",
    action: "read",
    possession: "any",
  })
  async findOrderItems(
    @common.Req() request: Request,
    @common.Param() params: OrderHistoryWhereUniqueInput
  ): Promise<OrderItem[]> {
    const query = plainToClass(OrderItemFindManyArgs, request.query);
    const results = await this.service.findOrderItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        customizationOptions: true,
        id: true,

        optionsVarientsItem: {
          select: {
            id: true,
          },
        },

        orderHistory: {
          select: {
            id: true,
          },
        },

        quantity: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderItems")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async connectOrderItems(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        connect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderItems")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async updateOrderItems(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        set: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderItems")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async disconnectOrderItems(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: OrderItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderItems: {
        disconnect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ordersHashtagsMap")
  @ApiNestedQuery(OrdersHashtagsMapFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrdersHashtagsMap",
    action: "read",
    possession: "any",
  })
  async findOrdersHashtagsMap(
    @common.Req() request: Request,
    @common.Param() params: OrderHistoryWhereUniqueInput
  ): Promise<OrdersHashtagsMap[]> {
    const query = plainToClass(OrdersHashtagsMapFindManyArgs, request.query);
    const results = await this.service.findOrdersHashtagsMap(params.id, {
      ...query,
      select: {
        hashtags: {
          select: {
            id: true,
          },
        },

        id: true,

        orderHistory: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ordersHashtagsMap")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async connectOrdersHashtagsMap(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: OrdersHashtagsMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersHashtagsMap: {
        connect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ordersHashtagsMap")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async updateOrdersHashtagsMap(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: OrdersHashtagsMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersHashtagsMap: {
        set: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ordersHashtagsMap")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async disconnectOrdersHashtagsMap(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: OrdersHashtagsMapWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersHashtagsMap: {
        disconnect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paymentsBook")
  @ApiNestedQuery(PaymentsBookFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentsBook",
    action: "read",
    possession: "any",
  })
  async findPaymentsBook(
    @common.Req() request: Request,
    @common.Param() params: OrderHistoryWhereUniqueInput
  ): Promise<PaymentsBook[]> {
    const query = plainToClass(PaymentsBookFindManyArgs, request.query);
    const results = await this.service.findPaymentsBook(params.id, {
      ...query,
      select: {
        createdAt: true,
        errorCode: true,
        id: true,

        orderHistory: {
          select: {
            id: true,
          },
        },

        paymentAmount: true,
        paymentCurrency: true,
        paymentDate: true,

        paymentMethods: {
          select: {
            id: true,
          },
        },

        paymentStatus: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentsBook")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async connectPaymentsBook(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: PaymentsBookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentsBook: {
        connect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentsBook")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async updatePaymentsBook(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: PaymentsBookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentsBook: {
        set: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentsBook")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async disconnectPaymentsBook(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: PaymentsBookWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentsBook: {
        disconnect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ratings")
  @ApiNestedQuery(RatingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Rating",
    action: "read",
    possession: "any",
  })
  async findRatings(
    @common.Req() request: Request,
    @common.Param() params: OrderHistoryWhereUniqueInput
  ): Promise<Rating[]> {
    const query = plainToClass(RatingFindManyArgs, request.query);
    const results = await this.service.findRatings(params.id, {
      ...query,
      select: {
        cleanliness: true,
        createdAt: true,
        foodQuality: true,
        id: true,

        orderHistory: {
          select: {
            id: true,
          },
        },

        ratingForCustomer: true,
        ratingOfDelivery: true,
        ratingOfOrder: true,
        service: true,
        updatedAt: true,
        valueForMoney: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ratings")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async connectRatings(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: RatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ratings: {
        connect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ratings")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async updateRatings(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: RatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ratings: {
        set: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ratings")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async disconnectRatings(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: RatingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ratings: {
        disconnect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/reviews")
  @ApiNestedQuery(ReviewFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Review",
    action: "read",
    possession: "any",
  })
  async findReviews(
    @common.Req() request: Request,
    @common.Param() params: OrderHistoryWhereUniqueInput
  ): Promise<Review[]> {
    const query = plainToClass(ReviewFindManyArgs, request.query);
    const results = await this.service.findReviews(params.id, {
      ...query,
      select: {
        body: true,
        createdAt: true,
        id: true,

        orderHistory: {
          select: {
            id: true,
          },
        },

        reviewImg: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async connectReviews(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        connect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async updateReviews(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        set: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async disconnectReviews(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        disconnect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/settlementsBreakup")
  @ApiNestedQuery(SettlementsBreakupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SettlementsBreakup",
    action: "read",
    possession: "any",
  })
  async findSettlementsBreakup(
    @common.Req() request: Request,
    @common.Param() params: OrderHistoryWhereUniqueInput
  ): Promise<SettlementsBreakup[]> {
    const query = plainToClass(SettlementsBreakupFindManyArgs, request.query);
    const results = await this.service.findSettlementsBreakup(params.id, {
      ...query,
      select: {
        amountForGstUnder95: true,
        amountForTcs: true,

        appUsers: {
          select: {
            id: true,
          },
        },

        bankUtr: true,
        baseServiceFee: true,
        baseServiceFeePercentage: true,
        businessname: true,
        cancellationOrRejectionReason: true,
        cancellationOrRejectionState: true,
        cancellationPolicy: true,
        cashReceivedSelfDelivery: true,
        commissionableAmount: true,
        createdAt: true,
        creditDebitNoteAdjustment: true,
        customerCompensation: true,
        customerPayable: true,
        deliveryCharge: true,
        deliveryChargesRecovery: true,
        deliveryStateCode: true,
        discountConstruct: true,
        extraInventoryAds: true,
        fulfilmentFee: true,
        fulfilmentFeePerKm: true,
        gstPaidByPlatform: true,
        gstToBePaidByRestaurant: true,
        id: true,
        netAdditions: true,
        netDeductions: true,
        orderDateTime: true,
        orderDistanceKm: true,

        orderHistory: {
          select: {
            id: true,
          },
        },

        orderLevelPayout: true,
        orderStatus: true,
        orderType: true,
        packagingCharge: true,
        paymentMechanismFee: true,
        paymentMode: true,

        payoutCycles: {
          select: {
            id: true,
          },
        },

        promoRecoveryAdjustment: true,
        restaurantDiscountFromOthers: true,
        restaurantDiscountFromPromo: true,
        restaurantId: true,
        settlementDate: true,
        settlementStatus: true,
        subtotal: true,
        taxCollectedAtSource: true,
        taxesOnServicePaymentFees: true,
        tcsIgstAmount: true,
        tds194OAmount: true,
        totalGstFromCustomers: true,
        unsettledAmount: true,
        updatedAt: true,
        weekNo: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/settlementsBreakup")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async connectSettlementsBreakup(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: SettlementsBreakupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      settlementsBreakup: {
        connect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/settlementsBreakup")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async updateSettlementsBreakup(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: SettlementsBreakupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      settlementsBreakup: {
        set: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/settlementsBreakup")
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "update",
    possession: "any",
  })
  async disconnectSettlementsBreakup(
    @common.Param() params: OrderHistoryWhereUniqueInput,
    @common.Body() body: SettlementsBreakupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      settlementsBreakup: {
        disconnect: body,
      },
    };
    await this.service.updateOrderHistory({
      where: params,
      data,
      select: { id: true },
    });
  }
}
