/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OrderHistory as PrismaOrderHistory,
  FulfillmentBook as PrismaFulfillmentBook,
  OrderItem as PrismaOrderItem,
  OrdersHashtagsMap as PrismaOrdersHashtagsMap,
  PaymentsBook as PrismaPaymentsBook,
  Rating as PrismaRating,
  Review as PrismaReview,
  SettlementsBreakup as PrismaSettlementsBreakup,
  Address as PrismaAddress,
  AppUser as PrismaAppUser,
  Coupon as PrismaCoupon,
  PaymentMethod as PrismaPaymentMethod,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class OrderHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrderHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.orderHistory.count(args);
  }

  async orderHistories<T extends Prisma.OrderHistoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderHistoryFindManyArgs>
  ): Promise<PrismaOrderHistory[]> {
    return this.prisma.orderHistory.findMany<Prisma.OrderHistoryFindManyArgs>(
      args
    );
  }
  async orderHistory<T extends Prisma.OrderHistoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderHistoryFindUniqueArgs>
  ): Promise<PrismaOrderHistory | null> {
    return this.prisma.orderHistory.findUnique(args);
  }
  async createOrderHistory<T extends Prisma.OrderHistoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderHistoryCreateArgs>
  ): Promise<PrismaOrderHistory> {
    return this.prisma.orderHistory.create<T>(args);
  }
  async updateOrderHistory<T extends Prisma.OrderHistoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderHistoryUpdateArgs>
  ): Promise<PrismaOrderHistory> {
    return this.prisma.orderHistory.update<T>(args);
  }
  async deleteOrderHistory<T extends Prisma.OrderHistoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrderHistoryDeleteArgs>
  ): Promise<PrismaOrderHistory> {
    return this.prisma.orderHistory.delete(args);
  }

  async findFulfillmentBook(
    parentId: string,
    args: Prisma.FulfillmentBookFindManyArgs
  ): Promise<PrismaFulfillmentBook[]> {
    return this.prisma.orderHistory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .fulfillmentBook(args);
  }

  async findOrderItems(
    parentId: string,
    args: Prisma.OrderItemFindManyArgs
  ): Promise<PrismaOrderItem[]> {
    return this.prisma.orderHistory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orderItems(args);
  }

  async findOrdersHashtagsMap(
    parentId: string,
    args: Prisma.OrdersHashtagsMapFindManyArgs
  ): Promise<PrismaOrdersHashtagsMap[]> {
    return this.prisma.orderHistory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ordersHashtagsMap(args);
  }

  async findPaymentsBook(
    parentId: string,
    args: Prisma.PaymentsBookFindManyArgs
  ): Promise<PrismaPaymentsBook[]> {
    return this.prisma.orderHistory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paymentsBook(args);
  }

  async findRatings(
    parentId: string,
    args: Prisma.RatingFindManyArgs
  ): Promise<PrismaRating[]> {
    return this.prisma.orderHistory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ratings(args);
  }

  async findReviews(
    parentId: string,
    args: Prisma.ReviewFindManyArgs
  ): Promise<PrismaReview[]> {
    return this.prisma.orderHistory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }

  async findSettlementsBreakup(
    parentId: string,
    args: Prisma.SettlementsBreakupFindManyArgs
  ): Promise<PrismaSettlementsBreakup[]> {
    return this.prisma.orderHistory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .settlementsBreakup(args);
  }

  async getAddresses(parentId: string): Promise<PrismaAddress | null> {
    return this.prisma.orderHistory
      .findUnique({
        where: { id: parentId },
      })
      .addresses();
  }

  async getAppUsers(parentId: string): Promise<PrismaAppUser | null> {
    return this.prisma.orderHistory
      .findUnique({
        where: { id: parentId },
      })
      .appUsers();
  }

  async getCoupons(parentId: string): Promise<PrismaCoupon | null> {
    return this.prisma.orderHistory
      .findUnique({
        where: { id: parentId },
      })
      .coupons();
  }

  async getPaymentMethods(
    parentId: string
  ): Promise<PrismaPaymentMethod | null> {
    return this.prisma.orderHistory
      .findUnique({
        where: { id: parentId },
      })
      .paymentMethods();
  }

  async getRestaurants(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.orderHistory
      .findUnique({
        where: { id: parentId },
      })
      .restaurants();
  }
}
