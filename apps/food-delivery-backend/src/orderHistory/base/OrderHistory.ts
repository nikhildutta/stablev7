/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Address } from "../../address/base/Address";

import {
  ValidateNested,
  IsDate,
  IsOptional,
  IsNumber,
  IsString,
  IsBoolean,
  IsInt,
  IsEnum,
} from "class-validator";

import { Type } from "class-transformer";
import { AppUser } from "../../appUser/base/AppUser";
import { Coupon } from "../../coupon/base/Coupon";
import { Decimal } from "decimal.js";
import { FulfillmentBook } from "../../fulfillmentBook/base/FulfillmentBook";
import { OrderItem } from "../../orderItem/base/OrderItem";
import { OrdersHashtagsMap } from "../../ordersHashtagsMap/base/OrdersHashtagsMap";
import { EnumOrderHistoryOrderType } from "./EnumOrderHistoryOrderType";
import { PaymentMethod } from "../../paymentMethod/base/PaymentMethod";
import { PaymentsBook } from "../../paymentsBook/base/PaymentsBook";
import { Rating } from "../../rating/base/Rating";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { Review } from "../../review/base/Review";
import { SettlementsBreakup } from "../../settlementsBreakup/base/SettlementsBreakup";

@ObjectType()
class OrderHistory {
  @ApiProperty({
    required: true,
    type: () => Address,
  })
  @ValidateNested()
  @Type(() => Address)
  addresses?: Address;

  @ApiProperty({
    required: true,
    type: () => AppUser,
  })
  @ValidateNested()
  @Type(() => AppUser)
  appUsers?: AppUser;

  @ApiProperty({
    required: true,
    type: () => Coupon,
  })
  @ValidateNested()
  @Type(() => Coupon)
  coupons?: Coupon;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt!: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  deliveryTipsAmount!: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  discountAmount!: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  estimatedDeliveryTime!: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  finalAmount!: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => [FulfillmentBook],
  })
  @ValidateNested()
  @Type(() => FulfillmentBook)
  @IsOptional()
  fulfillmentBook?: Array<FulfillmentBook>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isCancelled!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isFulfilled!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isPaid!: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isRejected!: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  orderDateTime!: Date | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  orderIdRef!: number;

  @ApiProperty({
    required: false,
    type: () => [OrderItem],
  })
  @ValidateNested()
  @Type(() => OrderItem)
  @IsOptional()
  orderItems?: Array<OrderItem>;

  @ApiProperty({
    required: false,
    type: () => [OrdersHashtagsMap],
  })
  @ValidateNested()
  @Type(() => OrdersHashtagsMap)
  @IsOptional()
  ordersHashtagsMap?: Array<OrdersHashtagsMap>;

  @ApiProperty({
    required: false,
    enum: EnumOrderHistoryOrderType,
  })
  @IsEnum(EnumOrderHistoryOrderType)
  @IsOptional()
  @Field(() => EnumOrderHistoryOrderType, {
    nullable: true,
  })
  order_type?: "Delivery" | "TakeAway" | "DineIn" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  packagingAmount!: Decimal | null;

  @ApiProperty({
    required: true,
    type: () => PaymentMethod,
  })
  @ValidateNested()
  @Type(() => PaymentMethod)
  paymentMethods?: PaymentMethod;

  @ApiProperty({
    required: false,
    type: () => [PaymentsBook],
  })
  @ValidateNested()
  @Type(() => PaymentsBook)
  @IsOptional()
  paymentsBook?: Array<PaymentsBook>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  preparationInstruction!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  preparationTime!: number | null;

  @ApiProperty({
    required: false,
    type: () => [Rating],
  })
  @ValidateNested()
  @Type(() => Rating)
  @IsOptional()
  ratings?: Array<Rating>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  rejectedBy!: string;

  @ApiProperty({
    required: true,
    type: () => Restaurant,
  })
  @ValidateNested()
  @Type(() => Restaurant)
  restaurants?: Restaurant;

  @ApiProperty({
    required: false,
    type: () => [Review],
  })
  @ValidateNested()
  @Type(() => Review)
  @IsOptional()
  reviews?: Array<Review>;

  @ApiProperty({
    required: false,
    type: () => [SettlementsBreakup],
  })
  @ValidateNested()
  @Type(() => SettlementsBreakup)
  @IsOptional()
  settlementsBreakup?: Array<SettlementsBreakup>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  totalAmount!: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt!: Date | null;
}

export { OrderHistory as OrderHistory };
