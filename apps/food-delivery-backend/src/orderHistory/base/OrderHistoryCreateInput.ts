/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AddressWhereUniqueInput } from "../../address/base/AddressWhereUniqueInput";

import {
  ValidateNested,
  IsNumber,
  IsOptional,
  IsDate,
  IsBoolean,
  IsInt,
  IsEnum,
  IsString,
} from "class-validator";

import { Type } from "class-transformer";
import { AppUserWhereUniqueInput } from "../../appUser/base/AppUserWhereUniqueInput";
import { CouponWhereUniqueInput } from "../../coupon/base/CouponWhereUniqueInput";
import { Decimal } from "decimal.js";
import { FulfillmentBookCreateNestedManyWithoutOrderHistoriesInput } from "./FulfillmentBookCreateNestedManyWithoutOrderHistoriesInput";
import { OrderItemCreateNestedManyWithoutOrderHistoriesInput } from "./OrderItemCreateNestedManyWithoutOrderHistoriesInput";
import { OrdersHashtagsMapCreateNestedManyWithoutOrderHistoriesInput } from "./OrdersHashtagsMapCreateNestedManyWithoutOrderHistoriesInput";
import { EnumOrderHistoryOrderType } from "./EnumOrderHistoryOrderType";
import { PaymentMethodWhereUniqueInput } from "../../paymentMethod/base/PaymentMethodWhereUniqueInput";
import { PaymentsBookCreateNestedManyWithoutOrderHistoriesInput } from "./PaymentsBookCreateNestedManyWithoutOrderHistoriesInput";
import { RatingCreateNestedManyWithoutOrderHistoriesInput } from "./RatingCreateNestedManyWithoutOrderHistoriesInput";
import { RestaurantWhereUniqueInput } from "../../restaurant/base/RestaurantWhereUniqueInput";
import { ReviewCreateNestedManyWithoutOrderHistoriesInput } from "./ReviewCreateNestedManyWithoutOrderHistoriesInput";
import { SettlementsBreakupCreateNestedManyWithoutOrderHistoriesInput } from "./SettlementsBreakupCreateNestedManyWithoutOrderHistoriesInput";

@InputType()
class OrderHistoryCreateInput {
  @ApiProperty({
    required: true,
    type: () => AddressWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AddressWhereUniqueInput)
  @Field(() => AddressWhereUniqueInput)
  addresses!: AddressWhereUniqueInput;

  @ApiProperty({
    required: true,
    type: () => AppUserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AppUserWhereUniqueInput)
  @Field(() => AppUserWhereUniqueInput)
  appUsers!: AppUserWhereUniqueInput;

  @ApiProperty({
    required: true,
    type: () => CouponWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CouponWhereUniqueInput)
  @Field(() => CouponWhereUniqueInput)
  coupons!: CouponWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  deliveryTipsAmount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  discountAmount?: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  estimatedDeliveryTime?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  finalAmount?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => FulfillmentBookCreateNestedManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => FulfillmentBookCreateNestedManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => FulfillmentBookCreateNestedManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  fulfillmentBook?: FulfillmentBookCreateNestedManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isCancelled?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isFulfilled?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isPaid?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isRejected?: boolean | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  orderIdRef!: number;

  @ApiProperty({
    required: false,
    type: () => OrderItemCreateNestedManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => OrderItemCreateNestedManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => OrderItemCreateNestedManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  orderItems?: OrderItemCreateNestedManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: false,
    type: () => OrdersHashtagsMapCreateNestedManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => OrdersHashtagsMapCreateNestedManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => OrdersHashtagsMapCreateNestedManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  ordersHashtagsMap?: OrdersHashtagsMapCreateNestedManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: false,
    enum: EnumOrderHistoryOrderType,
  })
  @IsEnum(EnumOrderHistoryOrderType)
  @IsOptional()
  @Field(() => EnumOrderHistoryOrderType, {
    nullable: true,
  })
  order_type?: "Delivery" | "TakeAway" | "DineIn" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  packagingAmount?: Decimal | null;

  @ApiProperty({
    required: true,
    type: () => PaymentMethodWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PaymentMethodWhereUniqueInput)
  @Field(() => PaymentMethodWhereUniqueInput)
  paymentMethods!: PaymentMethodWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => PaymentsBookCreateNestedManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => PaymentsBookCreateNestedManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => PaymentsBookCreateNestedManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  paymentsBook?: PaymentsBookCreateNestedManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  preparationInstruction?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  preparationTime?: number | null;

  @ApiProperty({
    required: false,
    type: () => RatingCreateNestedManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => RatingCreateNestedManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => RatingCreateNestedManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  ratings?: RatingCreateNestedManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  rejectedBy!: string;

  @ApiProperty({
    required: true,
    type: () => RestaurantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => RestaurantWhereUniqueInput)
  @Field(() => RestaurantWhereUniqueInput)
  restaurants!: RestaurantWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ReviewCreateNestedManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => ReviewCreateNestedManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => ReviewCreateNestedManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  reviews?: ReviewCreateNestedManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: false,
    type: () => SettlementsBreakupCreateNestedManyWithoutOrderHistoriesInput,
  })
  @ValidateNested()
  @Type(() => SettlementsBreakupCreateNestedManyWithoutOrderHistoriesInput)
  @IsOptional()
  @Field(() => SettlementsBreakupCreateNestedManyWithoutOrderHistoriesInput, {
    nullable: true,
  })
  settlementsBreakup?: SettlementsBreakupCreateNestedManyWithoutOrderHistoriesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  totalAmount?: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt?: Date | null;
}

export { OrderHistoryCreateInput as OrderHistoryCreateInput };
