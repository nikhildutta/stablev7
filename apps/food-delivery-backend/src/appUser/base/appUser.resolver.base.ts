/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AppUser } from "./AppUser";
import { AppUserCountArgs } from "./AppUserCountArgs";
import { AppUserFindManyArgs } from "./AppUserFindManyArgs";
import { AppUserFindUniqueArgs } from "./AppUserFindUniqueArgs";
import { CreateAppUserArgs } from "./CreateAppUserArgs";
import { UpdateAppUserArgs } from "./UpdateAppUserArgs";
import { DeleteAppUserArgs } from "./DeleteAppUserArgs";
import { AccessLogFindManyArgs } from "../../accessLog/base/AccessLogFindManyArgs";
import { AccessLog } from "../../accessLog/base/AccessLog";
import { CouponRedemptionFindManyArgs } from "../../couponRedemption/base/CouponRedemptionFindManyArgs";
import { CouponRedemption } from "../../couponRedemption/base/CouponRedemption";
import { CustomerPreferenceFindManyArgs } from "../../customerPreference/base/CustomerPreferenceFindManyArgs";
import { CustomerPreference } from "../../customerPreference/base/CustomerPreference";
import { CustomerSubscriptionFindManyArgs } from "../../customerSubscription/base/CustomerSubscriptionFindManyArgs";
import { CustomerSubscription } from "../../customerSubscription/base/CustomerSubscription";
import { ErrorLogFindManyArgs } from "../../errorLog/base/ErrorLogFindManyArgs";
import { ErrorLog } from "../../errorLog/base/ErrorLog";
import { FavouriteFindManyArgs } from "../../favourite/base/FavouriteFindManyArgs";
import { Favourite } from "../../favourite/base/Favourite";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { NotificationSettingFindManyArgs } from "../../notificationSetting/base/NotificationSettingFindManyArgs";
import { NotificationSetting } from "../../notificationSetting/base/NotificationSetting";
import { OrderHistoryFindManyArgs } from "../../orderHistory/base/OrderHistoryFindManyArgs";
import { OrderHistory } from "../../orderHistory/base/OrderHistory";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { ReservationFindManyArgs } from "../../reservation/base/ReservationFindManyArgs";
import { Reservation } from "../../reservation/base/Reservation";
import { RewardFindManyArgs } from "../../reward/base/RewardFindManyArgs";
import { Reward } from "../../reward/base/Reward";
import { SettlementsBreakupFindManyArgs } from "../../settlementsBreakup/base/SettlementsBreakupFindManyArgs";
import { SettlementsBreakup } from "../../settlementsBreakup/base/SettlementsBreakup";
import { SsoLookupFindManyArgs } from "../../ssoLookup/base/SsoLookupFindManyArgs";
import { SsoLookup } from "../../ssoLookup/base/SsoLookup";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { UserCustomerLookupFindManyArgs } from "../../userCustomerLookup/base/UserCustomerLookupFindManyArgs";
import { UserCustomerLookup } from "../../userCustomerLookup/base/UserCustomerLookup";
import { UserFeedbackFindManyArgs } from "../../userFeedback/base/UserFeedbackFindManyArgs";
import { UserFeedback } from "../../userFeedback/base/UserFeedback";
import { UsersHashtagsMapFindManyArgs } from "../../usersHashtagsMap/base/UsersHashtagsMapFindManyArgs";
import { UsersHashtagsMap } from "../../usersHashtagsMap/base/UsersHashtagsMap";
import { AppUserService } from "../appUser.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AppUser)
export class AppUserResolverBase {
  constructor(
    protected readonly service: AppUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async _appUsersMeta(
    @graphql.Args() args: AppUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AppUser])
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async appUsers(
    @graphql.Args() args: AppUserFindManyArgs
  ): Promise<AppUser[]> {
    return this.service.appUsers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AppUser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "own",
  })
  async appUser(
    @graphql.Args() args: AppUserFindUniqueArgs
  ): Promise<AppUser | null> {
    const result = await this.service.appUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AppUser)
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "create",
    possession: "any",
  })
  async createAppUser(
    @graphql.Args() args: CreateAppUserArgs
  ): Promise<AppUser> {
    return await this.service.createAppUser({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AppUser)
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "update",
    possession: "any",
  })
  async updateAppUser(
    @graphql.Args() args: UpdateAppUserArgs
  ): Promise<AppUser | null> {
    try {
      return await this.service.updateAppUser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AppUser)
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "delete",
    possession: "any",
  })
  async deleteAppUser(
    @graphql.Args() args: DeleteAppUserArgs
  ): Promise<AppUser | null> {
    try {
      return await this.service.deleteAppUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AccessLog], { name: "accessLogs" })
  @nestAccessControl.UseRoles({
    resource: "AccessLog",
    action: "read",
    possession: "any",
  })
  async findAccessLogs(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: AccessLogFindManyArgs
  ): Promise<AccessLog[]> {
    const results = await this.service.findAccessLogs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CouponRedemption], { name: "couponRedemptions" })
  @nestAccessControl.UseRoles({
    resource: "CouponRedemption",
    action: "read",
    possession: "any",
  })
  async findCouponRedemptions(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: CouponRedemptionFindManyArgs
  ): Promise<CouponRedemption[]> {
    const results = await this.service.findCouponRedemptions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CustomerPreference], {
    name: "customerPreferences",
  })
  @nestAccessControl.UseRoles({
    resource: "CustomerPreference",
    action: "read",
    possession: "any",
  })
  async findCustomerPreferences(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: CustomerPreferenceFindManyArgs
  ): Promise<CustomerPreference[]> {
    const results = await this.service.findCustomerPreferences(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CustomerSubscription], {
    name: "customerSubscriptions",
  })
  @nestAccessControl.UseRoles({
    resource: "CustomerSubscription",
    action: "read",
    possession: "any",
  })
  async findCustomerSubscriptions(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: CustomerSubscriptionFindManyArgs
  ): Promise<CustomerSubscription[]> {
    const results = await this.service.findCustomerSubscriptions(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ErrorLog], { name: "errorLogs" })
  @nestAccessControl.UseRoles({
    resource: "ErrorLog",
    action: "read",
    possession: "any",
  })
  async findErrorLogs(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: ErrorLogFindManyArgs
  ): Promise<ErrorLog[]> {
    const results = await this.service.findErrorLogs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Favourite], { name: "favourites" })
  @nestAccessControl.UseRoles({
    resource: "Favourite",
    action: "read",
    possession: "any",
  })
  async findFavourites(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: FavouriteFindManyArgs
  ): Promise<Favourite[]> {
    const results = await this.service.findFavourites(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Notification], { name: "notifications" })
  @nestAccessControl.UseRoles({
    resource: "Notification",
    action: "read",
    possession: "any",
  })
  async findNotifications(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: NotificationFindManyArgs
  ): Promise<Notification[]> {
    const results = await this.service.findNotifications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [NotificationSetting], {
    name: "notificationSettings",
  })
  @nestAccessControl.UseRoles({
    resource: "NotificationSetting",
    action: "read",
    possession: "any",
  })
  async findNotificationSettings(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: NotificationSettingFindManyArgs
  ): Promise<NotificationSetting[]> {
    const results = await this.service.findNotificationSettings(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OrderHistory], { name: "orderHistory" })
  @nestAccessControl.UseRoles({
    resource: "OrderHistory",
    action: "read",
    possession: "any",
  })
  async findOrderHistory(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: OrderHistoryFindManyArgs
  ): Promise<OrderHistory[]> {
    const results = await this.service.findOrderHistory(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Report], { name: "reports" })
  @nestAccessControl.UseRoles({
    resource: "Report",
    action: "read",
    possession: "any",
  })
  async findReports(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: ReportFindManyArgs
  ): Promise<Report[]> {
    const results = await this.service.findReports(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Reservation], { name: "reservations" })
  @nestAccessControl.UseRoles({
    resource: "Reservation",
    action: "read",
    possession: "any",
  })
  async findReservations(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: ReservationFindManyArgs
  ): Promise<Reservation[]> {
    const results = await this.service.findReservations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Reward], { name: "rewards" })
  @nestAccessControl.UseRoles({
    resource: "Reward",
    action: "read",
    possession: "any",
  })
  async findRewards(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: RewardFindManyArgs
  ): Promise<Reward[]> {
    const results = await this.service.findRewards(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SettlementsBreakup], {
    name: "settlementsBreakup",
  })
  @nestAccessControl.UseRoles({
    resource: "SettlementsBreakup",
    action: "read",
    possession: "any",
  })
  async findSettlementsBreakup(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: SettlementsBreakupFindManyArgs
  ): Promise<SettlementsBreakup[]> {
    const results = await this.service.findSettlementsBreakup(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SsoLookup], { name: "ssoLookup" })
  @nestAccessControl.UseRoles({
    resource: "SsoLookup",
    action: "read",
    possession: "any",
  })
  async findSsoLookup(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: SsoLookupFindManyArgs
  ): Promise<SsoLookup[]> {
    const results = await this.service.findSsoLookup(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Subscription], { name: "subscriptions" })
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "read",
    possession: "any",
  })
  async findSubscriptions(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: SubscriptionFindManyArgs
  ): Promise<Subscription[]> {
    const results = await this.service.findSubscriptions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserCustomerLookup], {
    name: "userCustomerLookup",
  })
  @nestAccessControl.UseRoles({
    resource: "UserCustomerLookup",
    action: "read",
    possession: "any",
  })
  async findUserCustomerLookup(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: UserCustomerLookupFindManyArgs
  ): Promise<UserCustomerLookup[]> {
    const results = await this.service.findUserCustomerLookup(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserFeedback], { name: "userFeedbacks" })
  @nestAccessControl.UseRoles({
    resource: "UserFeedback",
    action: "read",
    possession: "any",
  })
  async findUserFeedbacks(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: UserFeedbackFindManyArgs
  ): Promise<UserFeedback[]> {
    const results = await this.service.findUserFeedbacks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UsersHashtagsMap], { name: "usersHashtagsMap" })
  @nestAccessControl.UseRoles({
    resource: "UsersHashtagsMap",
    action: "read",
    possession: "any",
  })
  async findUsersHashtagsMap(
    @graphql.Parent() parent: AppUser,
    @graphql.Args() args: UsersHashtagsMapFindManyArgs
  ): Promise<UsersHashtagsMap[]> {
    const results = await this.service.findUsersHashtagsMap(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
