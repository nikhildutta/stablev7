/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccessLog } from "../../accessLog/base/AccessLog";
import {
  ValidateNested,
  IsOptional,
  IsEnum,
  IsDate,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumAppUserAccountStatus } from "./EnumAppUserAccountStatus";
import { CouponRedemption } from "../../couponRedemption/base/CouponRedemption";
import { CustomerPreference } from "../../customerPreference/base/CustomerPreference";
import { CustomerSubscription } from "../../customerSubscription/base/CustomerSubscription";
import { ErrorLog } from "../../errorLog/base/ErrorLog";
import { Favourite } from "../../favourite/base/Favourite";
import { Notification } from "../../notification/base/Notification";
import { NotificationSetting } from "../../notificationSetting/base/NotificationSetting";
import { OrderHistory } from "../../orderHistory/base/OrderHistory";
import { Report } from "../../report/base/Report";
import { Reservation } from "../../reservation/base/Reservation";
import { Reward } from "../../reward/base/Reward";
import { SettlementsBreakup } from "../../settlementsBreakup/base/SettlementsBreakup";
import { SsoLookup } from "../../ssoLookup/base/SsoLookup";
import { Subscription } from "../../subscription/base/Subscription";
import { UserCustomerLookup } from "../../userCustomerLookup/base/UserCustomerLookup";
import { UserFeedback } from "../../userFeedback/base/UserFeedback";
import { UsersHashtagsMap } from "../../usersHashtagsMap/base/UsersHashtagsMap";

@ObjectType()
class AppUser {
  @ApiProperty({
    required: false,
    type: () => [AccessLog],
  })
  @ValidateNested()
  @Type(() => AccessLog)
  @IsOptional()
  accessLogs?: Array<AccessLog>;

  @ApiProperty({
    required: false,
    enum: EnumAppUserAccountStatus,
  })
  @IsEnum(EnumAppUserAccountStatus)
  @IsOptional()
  @Field(() => EnumAppUserAccountStatus, {
    nullable: true,
  })
  account_status?: "Live" | "Is_Disabled" | "Is_Deleted" | null;

  @ApiProperty({
    required: false,
    type: () => [CouponRedemption],
  })
  @ValidateNested()
  @Type(() => CouponRedemption)
  @IsOptional()
  couponRedemptions?: Array<CouponRedemption>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [CustomerPreference],
  })
  @ValidateNested()
  @Type(() => CustomerPreference)
  @IsOptional()
  customerPreferences?: Array<CustomerPreference>;

  @ApiProperty({
    required: false,
    type: () => [CustomerSubscription],
  })
  @ValidateNested()
  @Type(() => CustomerSubscription)
  @IsOptional()
  customerSubscriptions?: Array<CustomerSubscription>;

  @ApiProperty({
    required: false,
    type: () => [ErrorLog],
  })
  @ValidateNested()
  @Type(() => ErrorLog)
  @IsOptional()
  errorLogs?: Array<ErrorLog>;

  @ApiProperty({
    required: false,
    type: () => [Favourite],
  })
  @ValidateNested()
  @Type(() => Favourite)
  @IsOptional()
  favourites?: Array<Favourite>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Notification],
  })
  @ValidateNested()
  @Type(() => Notification)
  @IsOptional()
  notifications?: Array<Notification>;

  @ApiProperty({
    required: false,
    type: () => [NotificationSetting],
  })
  @ValidateNested()
  @Type(() => NotificationSetting)
  @IsOptional()
  notificationSettings?: Array<NotificationSetting>;

  @ApiProperty({
    required: false,
    type: () => [OrderHistory],
  })
  @ValidateNested()
  @Type(() => OrderHistory)
  @IsOptional()
  orderHistory?: Array<OrderHistory>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  profilePicUrl!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Report],
  })
  @ValidateNested()
  @Type(() => Report)
  @IsOptional()
  reports?: Array<Report>;

  @ApiProperty({
    required: false,
    type: () => [Reservation],
  })
  @ValidateNested()
  @Type(() => Reservation)
  @IsOptional()
  reservations?: Array<Reservation>;

  @ApiProperty({
    required: false,
    type: () => [Reward],
  })
  @ValidateNested()
  @Type(() => Reward)
  @IsOptional()
  rewards?: Array<Reward>;

  @ApiProperty({
    required: false,
    type: () => [SettlementsBreakup],
  })
  @ValidateNested()
  @Type(() => SettlementsBreakup)
  @IsOptional()
  settlementsBreakup?: Array<SettlementsBreakup>;

  @ApiProperty({
    required: false,
    type: () => [SsoLookup],
  })
  @ValidateNested()
  @Type(() => SsoLookup)
  @IsOptional()
  ssoLookup?: Array<SsoLookup>;

  @ApiProperty({
    required: false,
    type: () => [Subscription],
  })
  @ValidateNested()
  @Type(() => Subscription)
  @IsOptional()
  subscriptions?: Array<Subscription>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [UserCustomerLookup],
  })
  @ValidateNested()
  @Type(() => UserCustomerLookup)
  @IsOptional()
  userCustomerLookup?: Array<UserCustomerLookup>;

  @ApiProperty({
    required: false,
    type: () => [UserFeedback],
  })
  @ValidateNested()
  @Type(() => UserFeedback)
  @IsOptional()
  userFeedbacks?: Array<UserFeedback>;

  @ApiProperty({
    required: false,
    type: () => [UsersHashtagsMap],
  })
  @ValidateNested()
  @Type(() => UsersHashtagsMap)
  @IsOptional()
  usersHashtagsMap?: Array<UsersHashtagsMap>;
}

export { AppUser as AppUser };
