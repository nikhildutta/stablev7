/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccessLogListRelationFilter } from "../../accessLog/base/AccessLogListRelationFilter";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { EnumAppUserAccountStatus } from "./EnumAppUserAccountStatus";
import { CouponRedemptionListRelationFilter } from "../../couponRedemption/base/CouponRedemptionListRelationFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { CustomerPreferenceListRelationFilter } from "../../customerPreference/base/CustomerPreferenceListRelationFilter";
import { CustomerSubscriptionListRelationFilter } from "../../customerSubscription/base/CustomerSubscriptionListRelationFilter";
import { ErrorLogListRelationFilter } from "../../errorLog/base/ErrorLogListRelationFilter";
import { FavouriteListRelationFilter } from "../../favourite/base/FavouriteListRelationFilter";
import { StringFilter } from "../../util/StringFilter";
import { NotificationListRelationFilter } from "../../notification/base/NotificationListRelationFilter";
import { NotificationSettingListRelationFilter } from "../../notificationSetting/base/NotificationSettingListRelationFilter";
import { OrderHistoryListRelationFilter } from "../../orderHistory/base/OrderHistoryListRelationFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { ReportListRelationFilter } from "../../report/base/ReportListRelationFilter";
import { ReservationListRelationFilter } from "../../reservation/base/ReservationListRelationFilter";
import { RewardListRelationFilter } from "../../reward/base/RewardListRelationFilter";
import { SettlementsBreakupListRelationFilter } from "../../settlementsBreakup/base/SettlementsBreakupListRelationFilter";
import { SsoLookupListRelationFilter } from "../../ssoLookup/base/SsoLookupListRelationFilter";
import { SubscriptionListRelationFilter } from "../../subscription/base/SubscriptionListRelationFilter";
import { UserCustomerLookupListRelationFilter } from "../../userCustomerLookup/base/UserCustomerLookupListRelationFilter";
import { UserFeedbackListRelationFilter } from "../../userFeedback/base/UserFeedbackListRelationFilter";
import { UsersHashtagsMapListRelationFilter } from "../../usersHashtagsMap/base/UsersHashtagsMapListRelationFilter";

@InputType()
class AppUserWhereInput {
  @ApiProperty({
    required: false,
    type: () => AccessLogListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AccessLogListRelationFilter)
  @IsOptional()
  @Field(() => AccessLogListRelationFilter, {
    nullable: true,
  })
  accessLogs?: AccessLogListRelationFilter;

  @ApiProperty({
    required: false,
    enum: EnumAppUserAccountStatus,
  })
  @IsEnum(EnumAppUserAccountStatus)
  @IsOptional()
  @Field(() => EnumAppUserAccountStatus, {
    nullable: true,
  })
  account_status?: "Live" | "Is_Disabled" | "Is_Deleted";

  @ApiProperty({
    required: false,
    type: () => CouponRedemptionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CouponRedemptionListRelationFilter)
  @IsOptional()
  @Field(() => CouponRedemptionListRelationFilter, {
    nullable: true,
  })
  couponRedemptions?: CouponRedemptionListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  createdAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => CustomerPreferenceListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CustomerPreferenceListRelationFilter)
  @IsOptional()
  @Field(() => CustomerPreferenceListRelationFilter, {
    nullable: true,
  })
  customerPreferences?: CustomerPreferenceListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CustomerSubscriptionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CustomerSubscriptionListRelationFilter)
  @IsOptional()
  @Field(() => CustomerSubscriptionListRelationFilter, {
    nullable: true,
  })
  customerSubscriptions?: CustomerSubscriptionListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ErrorLogListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ErrorLogListRelationFilter)
  @IsOptional()
  @Field(() => ErrorLogListRelationFilter, {
    nullable: true,
  })
  errorLogs?: ErrorLogListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => FavouriteListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FavouriteListRelationFilter)
  @IsOptional()
  @Field(() => FavouriteListRelationFilter, {
    nullable: true,
  })
  favourites?: FavouriteListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => NotificationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => NotificationListRelationFilter)
  @IsOptional()
  @Field(() => NotificationListRelationFilter, {
    nullable: true,
  })
  notifications?: NotificationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => NotificationSettingListRelationFilter,
  })
  @ValidateNested()
  @Type(() => NotificationSettingListRelationFilter)
  @IsOptional()
  @Field(() => NotificationSettingListRelationFilter, {
    nullable: true,
  })
  notificationSettings?: NotificationSettingListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OrderHistoryListRelationFilter,
  })
  @ValidateNested()
  @Type(() => OrderHistoryListRelationFilter)
  @IsOptional()
  @Field(() => OrderHistoryListRelationFilter, {
    nullable: true,
  })
  orderHistory?: OrderHistoryListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  profilePicUrl?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ReportListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ReportListRelationFilter)
  @IsOptional()
  @Field(() => ReportListRelationFilter, {
    nullable: true,
  })
  reports?: ReportListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ReservationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ReservationListRelationFilter)
  @IsOptional()
  @Field(() => ReservationListRelationFilter, {
    nullable: true,
  })
  reservations?: ReservationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => RewardListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RewardListRelationFilter)
  @IsOptional()
  @Field(() => RewardListRelationFilter, {
    nullable: true,
  })
  rewards?: RewardListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SettlementsBreakupListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SettlementsBreakupListRelationFilter)
  @IsOptional()
  @Field(() => SettlementsBreakupListRelationFilter, {
    nullable: true,
  })
  settlementsBreakup?: SettlementsBreakupListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SsoLookupListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SsoLookupListRelationFilter)
  @IsOptional()
  @Field(() => SsoLookupListRelationFilter, {
    nullable: true,
  })
  ssoLookup?: SsoLookupListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SubscriptionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SubscriptionListRelationFilter)
  @IsOptional()
  @Field(() => SubscriptionListRelationFilter, {
    nullable: true,
  })
  subscriptions?: SubscriptionListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  updatedAt?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => UserCustomerLookupListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserCustomerLookupListRelationFilter)
  @IsOptional()
  @Field(() => UserCustomerLookupListRelationFilter, {
    nullable: true,
  })
  userCustomerLookup?: UserCustomerLookupListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserFeedbackListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UserFeedbackListRelationFilter)
  @IsOptional()
  @Field(() => UserFeedbackListRelationFilter, {
    nullable: true,
  })
  userFeedbacks?: UserFeedbackListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UsersHashtagsMapListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UsersHashtagsMapListRelationFilter)
  @IsOptional()
  @Field(() => UsersHashtagsMapListRelationFilter, {
    nullable: true,
  })
  usersHashtagsMap?: UsersHashtagsMapListRelationFilter;
}

export { AppUserWhereInput as AppUserWhereInput };
