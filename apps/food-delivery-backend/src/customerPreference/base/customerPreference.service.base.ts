/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CustomerPreference as PrismaCustomerPreference,
  AppUser as PrismaAppUser,
} from "@prisma/client";

export class CustomerPreferenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerPreferenceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerPreference.count(args);
  }

  async customerPreferences<T extends Prisma.CustomerPreferenceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerPreferenceFindManyArgs>
  ): Promise<PrismaCustomerPreference[]> {
    return this.prisma.customerPreference.findMany<Prisma.CustomerPreferenceFindManyArgs>(
      args
    );
  }
  async customerPreference<T extends Prisma.CustomerPreferenceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerPreferenceFindUniqueArgs>
  ): Promise<PrismaCustomerPreference | null> {
    return this.prisma.customerPreference.findUnique(args);
  }
  async createCustomerPreference<T extends Prisma.CustomerPreferenceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerPreferenceCreateArgs>
  ): Promise<PrismaCustomerPreference> {
    return this.prisma.customerPreference.create<T>(args);
  }
  async updateCustomerPreference<T extends Prisma.CustomerPreferenceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerPreferenceUpdateArgs>
  ): Promise<PrismaCustomerPreference> {
    return this.prisma.customerPreference.update<T>(args);
  }
  async deleteCustomerPreference<T extends Prisma.CustomerPreferenceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerPreferenceDeleteArgs>
  ): Promise<PrismaCustomerPreference> {
    return this.prisma.customerPreference.delete(args);
  }

  async getAppUsers(parentId: string): Promise<PrismaAppUser | null> {
    return this.prisma.customerPreference
      .findUnique({
        where: { id: parentId },
      })
      .appUsers();
  }
}
