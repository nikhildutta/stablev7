/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SubscriptionService } from "../subscription.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SubscriptionCreateInput } from "./SubscriptionCreateInput";
import { Subscription } from "./Subscription";
import { SubscriptionFindManyArgs } from "./SubscriptionFindManyArgs";
import { SubscriptionWhereUniqueInput } from "./SubscriptionWhereUniqueInput";
import { SubscriptionUpdateInput } from "./SubscriptionUpdateInput";
import { CustomerSubscriptionFindManyArgs } from "../../customerSubscription/base/CustomerSubscriptionFindManyArgs";
import { CustomerSubscription } from "../../customerSubscription/base/CustomerSubscription";
import { CustomerSubscriptionWhereUniqueInput } from "../../customerSubscription/base/CustomerSubscriptionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SubscriptionControllerBase {
  constructor(
    protected readonly service: SubscriptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Subscription })
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSubscription(
    @common.Body() data: SubscriptionCreateInput
  ): Promise<Subscription> {
    return await this.service.createSubscription({
      data: {
        ...data,

        appUsers: {
          connect: data.appUsers,
        },

        subscriptionPlans: {
          connect: data.subscriptionPlans,
        },
      },
      select: {
        appUsers: {
          select: {
            id: true,
          },
        },

        autoRenew: true,
        createdAt: true,
        endDate: true,
        id: true,
        paymentStatus: true,
        startDate: true,
        status: true,

        subscriptionPlans: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Subscription] })
  @ApiNestedQuery(SubscriptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subscriptions(@common.Req() request: Request): Promise<Subscription[]> {
    const args = plainToClass(SubscriptionFindManyArgs, request.query);
    return this.service.subscriptions({
      ...args,
      select: {
        appUsers: {
          select: {
            id: true,
          },
        },

        autoRenew: true,
        createdAt: true,
        endDate: true,
        id: true,
        paymentStatus: true,
        startDate: true,
        status: true,

        subscriptionPlans: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Subscription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subscription(
    @common.Param() params: SubscriptionWhereUniqueInput
  ): Promise<Subscription | null> {
    const result = await this.service.subscription({
      where: params,
      select: {
        appUsers: {
          select: {
            id: true,
          },
        },

        autoRenew: true,
        createdAt: true,
        endDate: true,
        id: true,
        paymentStatus: true,
        startDate: true,
        status: true,

        subscriptionPlans: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Subscription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSubscription(
    @common.Param() params: SubscriptionWhereUniqueInput,
    @common.Body() data: SubscriptionUpdateInput
  ): Promise<Subscription | null> {
    try {
      return await this.service.updateSubscription({
        where: params,
        data: {
          ...data,

          appUsers: {
            connect: data.appUsers,
          },

          subscriptionPlans: {
            connect: data.subscriptionPlans,
          },
        },
        select: {
          appUsers: {
            select: {
              id: true,
            },
          },

          autoRenew: true,
          createdAt: true,
          endDate: true,
          id: true,
          paymentStatus: true,
          startDate: true,
          status: true,

          subscriptionPlans: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Subscription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSubscription(
    @common.Param() params: SubscriptionWhereUniqueInput
  ): Promise<Subscription | null> {
    try {
      return await this.service.deleteSubscription({
        where: params,
        select: {
          appUsers: {
            select: {
              id: true,
            },
          },

          autoRenew: true,
          createdAt: true,
          endDate: true,
          id: true,
          paymentStatus: true,
          startDate: true,
          status: true,

          subscriptionPlans: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/customerSubscriptions")
  @ApiNestedQuery(CustomerSubscriptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CustomerSubscription",
    action: "read",
    possession: "any",
  })
  async findCustomerSubscriptions(
    @common.Req() request: Request,
    @common.Param() params: SubscriptionWhereUniqueInput
  ): Promise<CustomerSubscription[]> {
    const query = plainToClass(CustomerSubscriptionFindManyArgs, request.query);
    const results = await this.service.findCustomerSubscriptions(params.id, {
      ...query,
      select: {
        activationDate: true,

        appUsers: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        expirationDate: true,
        id: true,
        renewalCount: true,

        subscriptionPlans: {
          select: {
            id: true,
          },
        },

        subscriptions: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customerSubscriptions")
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "update",
    possession: "any",
  })
  async connectCustomerSubscriptions(
    @common.Param() params: SubscriptionWhereUniqueInput,
    @common.Body() body: CustomerSubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerSubscriptions: {
        connect: body,
      },
    };
    await this.service.updateSubscription({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customerSubscriptions")
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "update",
    possession: "any",
  })
  async updateCustomerSubscriptions(
    @common.Param() params: SubscriptionWhereUniqueInput,
    @common.Body() body: CustomerSubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerSubscriptions: {
        set: body,
      },
    };
    await this.service.updateSubscription({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customerSubscriptions")
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "update",
    possession: "any",
  })
  async disconnectCustomerSubscriptions(
    @common.Param() params: SubscriptionWhereUniqueInput,
    @common.Body() body: CustomerSubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerSubscriptions: {
        disconnect: body,
      },
    };
    await this.service.updateSubscription({
      where: params,
      data,
      select: { id: true },
    });
  }
}
