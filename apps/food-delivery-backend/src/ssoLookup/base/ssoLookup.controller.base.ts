/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SsoLookupService } from "../ssoLookup.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SsoLookupCreateInput } from "./SsoLookupCreateInput";
import { SsoLookup } from "./SsoLookup";
import { SsoLookupFindManyArgs } from "./SsoLookupFindManyArgs";
import { SsoLookupWhereUniqueInput } from "./SsoLookupWhereUniqueInput";
import { SsoLookupUpdateInput } from "./SsoLookupUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SsoLookupControllerBase {
  constructor(
    protected readonly service: SsoLookupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SsoLookup })
  @nestAccessControl.UseRoles({
    resource: "SsoLookup",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSsoLookup(
    @common.Body() data: SsoLookupCreateInput
  ): Promise<SsoLookup> {
    return await this.service.createSsoLookup({
      data: {
        ...data,

        appUsers: {
          connect: data.appUsers,
        },
      },
      select: {
        appleEmail: true,
        appleFamilyName: true,
        appleGivenName: true,
        appleRefreshToken: true,
        appleTokenExpiresAt: true,
        appleUserId: true,

        appUsers: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        facebookAccessToken: true,
        facebookEmail: true,
        facebookName: true,
        facebookTokenExpiresAt: true,
        facebookUserId: true,
        googleEmail: true,
        googleFamilyName: true,
        googleGivenName: true,
        googleRefreshToken: true,
        googleTokenExpiresAt: true,
        googleUserId: true,
        id: true,
        twitterAccessToken: true,
        twitterHandle: true,
        twitterTokenSecret: true,
        twitterUserId: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SsoLookup] })
  @ApiNestedQuery(SsoLookupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SsoLookup",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ssoLookups(@common.Req() request: Request): Promise<SsoLookup[]> {
    const args = plainToClass(SsoLookupFindManyArgs, request.query);
    return this.service.ssoLookups({
      ...args,
      select: {
        appleEmail: true,
        appleFamilyName: true,
        appleGivenName: true,
        appleRefreshToken: true,
        appleTokenExpiresAt: true,
        appleUserId: true,

        appUsers: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        facebookAccessToken: true,
        facebookEmail: true,
        facebookName: true,
        facebookTokenExpiresAt: true,
        facebookUserId: true,
        googleEmail: true,
        googleFamilyName: true,
        googleGivenName: true,
        googleRefreshToken: true,
        googleTokenExpiresAt: true,
        googleUserId: true,
        id: true,
        twitterAccessToken: true,
        twitterHandle: true,
        twitterTokenSecret: true,
        twitterUserId: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SsoLookup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SsoLookup",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ssoLookup(
    @common.Param() params: SsoLookupWhereUniqueInput
  ): Promise<SsoLookup | null> {
    const result = await this.service.ssoLookup({
      where: params,
      select: {
        appleEmail: true,
        appleFamilyName: true,
        appleGivenName: true,
        appleRefreshToken: true,
        appleTokenExpiresAt: true,
        appleUserId: true,

        appUsers: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        facebookAccessToken: true,
        facebookEmail: true,
        facebookName: true,
        facebookTokenExpiresAt: true,
        facebookUserId: true,
        googleEmail: true,
        googleFamilyName: true,
        googleGivenName: true,
        googleRefreshToken: true,
        googleTokenExpiresAt: true,
        googleUserId: true,
        id: true,
        twitterAccessToken: true,
        twitterHandle: true,
        twitterTokenSecret: true,
        twitterUserId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SsoLookup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SsoLookup",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSsoLookup(
    @common.Param() params: SsoLookupWhereUniqueInput,
    @common.Body() data: SsoLookupUpdateInput
  ): Promise<SsoLookup | null> {
    try {
      return await this.service.updateSsoLookup({
        where: params,
        data: {
          ...data,

          appUsers: {
            connect: data.appUsers,
          },
        },
        select: {
          appleEmail: true,
          appleFamilyName: true,
          appleGivenName: true,
          appleRefreshToken: true,
          appleTokenExpiresAt: true,
          appleUserId: true,

          appUsers: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          facebookAccessToken: true,
          facebookEmail: true,
          facebookName: true,
          facebookTokenExpiresAt: true,
          facebookUserId: true,
          googleEmail: true,
          googleFamilyName: true,
          googleGivenName: true,
          googleRefreshToken: true,
          googleTokenExpiresAt: true,
          googleUserId: true,
          id: true,
          twitterAccessToken: true,
          twitterHandle: true,
          twitterTokenSecret: true,
          twitterUserId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SsoLookup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SsoLookup",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSsoLookup(
    @common.Param() params: SsoLookupWhereUniqueInput
  ): Promise<SsoLookup | null> {
    try {
      return await this.service.deleteSsoLookup({
        where: params,
        select: {
          appleEmail: true,
          appleFamilyName: true,
          appleGivenName: true,
          appleRefreshToken: true,
          appleTokenExpiresAt: true,
          appleUserId: true,

          appUsers: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          facebookAccessToken: true,
          facebookEmail: true,
          facebookName: true,
          facebookTokenExpiresAt: true,
          facebookUserId: true,
          googleEmail: true,
          googleFamilyName: true,
          googleGivenName: true,
          googleRefreshToken: true,
          googleTokenExpiresAt: true,
          googleUserId: true,
          id: true,
          twitterAccessToken: true,
          twitterHandle: true,
          twitterTokenSecret: true,
          twitterUserId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
