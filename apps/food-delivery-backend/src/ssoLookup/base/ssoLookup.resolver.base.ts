/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SsoLookup } from "./SsoLookup";
import { SsoLookupCountArgs } from "./SsoLookupCountArgs";
import { SsoLookupFindManyArgs } from "./SsoLookupFindManyArgs";
import { SsoLookupFindUniqueArgs } from "./SsoLookupFindUniqueArgs";
import { CreateSsoLookupArgs } from "./CreateSsoLookupArgs";
import { UpdateSsoLookupArgs } from "./UpdateSsoLookupArgs";
import { DeleteSsoLookupArgs } from "./DeleteSsoLookupArgs";
import { AppUser } from "../../appUser/base/AppUser";
import { SsoLookupService } from "../ssoLookup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SsoLookup)
export class SsoLookupResolverBase {
  constructor(
    protected readonly service: SsoLookupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SsoLookup",
    action: "read",
    possession: "any",
  })
  async _ssoLookupsMeta(
    @graphql.Args() args: SsoLookupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SsoLookup])
  @nestAccessControl.UseRoles({
    resource: "SsoLookup",
    action: "read",
    possession: "any",
  })
  async ssoLookups(
    @graphql.Args() args: SsoLookupFindManyArgs
  ): Promise<SsoLookup[]> {
    return this.service.ssoLookups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SsoLookup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SsoLookup",
    action: "read",
    possession: "own",
  })
  async ssoLookup(
    @graphql.Args() args: SsoLookupFindUniqueArgs
  ): Promise<SsoLookup | null> {
    const result = await this.service.ssoLookup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SsoLookup)
  @nestAccessControl.UseRoles({
    resource: "SsoLookup",
    action: "create",
    possession: "any",
  })
  async createSsoLookup(
    @graphql.Args() args: CreateSsoLookupArgs
  ): Promise<SsoLookup> {
    return await this.service.createSsoLookup({
      ...args,
      data: {
        ...args.data,

        appUsers: {
          connect: args.data.appUsers,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SsoLookup)
  @nestAccessControl.UseRoles({
    resource: "SsoLookup",
    action: "update",
    possession: "any",
  })
  async updateSsoLookup(
    @graphql.Args() args: UpdateSsoLookupArgs
  ): Promise<SsoLookup | null> {
    try {
      return await this.service.updateSsoLookup({
        ...args,
        data: {
          ...args.data,

          appUsers: {
            connect: args.data.appUsers,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SsoLookup)
  @nestAccessControl.UseRoles({
    resource: "SsoLookup",
    action: "delete",
    possession: "any",
  })
  async deleteSsoLookup(
    @graphql.Args() args: DeleteSsoLookupArgs
  ): Promise<SsoLookup | null> {
    try {
      return await this.service.deleteSsoLookup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUsers",
  })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async getAppUsers(
    @graphql.Parent() parent: SsoLookup
  ): Promise<AppUser | null> {
    const result = await this.service.getAppUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
