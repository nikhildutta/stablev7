/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  IsOptional,
  IsString,
  IsNumber,
  IsInt,
  IsEnum,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { Decimal } from "decimal.js";
import { EnumPayoutCyclePayoutStatus } from "./EnumPayoutCyclePayoutStatus";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { SettlementsBreakup } from "../../settlementsBreakup/base/SettlementsBreakup";

@ObjectType()
class PayoutCycle {
  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt!: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  netPayout!: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  numberOfOrders!: number | null;

  @ApiProperty({
    required: false,
    enum: EnumPayoutCyclePayoutStatus,
  })
  @IsEnum(EnumPayoutCyclePayoutStatus)
  @IsOptional()
  @Field(() => EnumPayoutCyclePayoutStatus, {
    nullable: true,
  })
  payout_status?:
    | "Cycle_Inprogress"
    | "Cycle_Complete"
    | "Statement_Generated"
    | "Payout_In_Process"
    | "Settled"
    | null;

  @ApiProperty({
    required: true,
    type: () => Restaurant,
  })
  @ValidateNested()
  @Type(() => Restaurant)
  restaurants?: Restaurant;

  @ApiProperty({
    required: false,
    type: () => [SettlementsBreakup],
  })
  @ValidateNested()
  @Type(() => SettlementsBreakup)
  @IsOptional()
  settlementsBreakup?: Array<SettlementsBreakup>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  timePeriodEnd!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  timePeriodStart!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  utrNumber!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  weekNumber!: number | null;
}

export { PayoutCycle as PayoutCycle };
