/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PayoutCycle } from "./PayoutCycle";
import { PayoutCycleCountArgs } from "./PayoutCycleCountArgs";
import { PayoutCycleFindManyArgs } from "./PayoutCycleFindManyArgs";
import { PayoutCycleFindUniqueArgs } from "./PayoutCycleFindUniqueArgs";
import { CreatePayoutCycleArgs } from "./CreatePayoutCycleArgs";
import { UpdatePayoutCycleArgs } from "./UpdatePayoutCycleArgs";
import { DeletePayoutCycleArgs } from "./DeletePayoutCycleArgs";
import { SettlementsBreakupFindManyArgs } from "../../settlementsBreakup/base/SettlementsBreakupFindManyArgs";
import { SettlementsBreakup } from "../../settlementsBreakup/base/SettlementsBreakup";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { PayoutCycleService } from "../payoutCycle.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PayoutCycle)
export class PayoutCycleResolverBase {
  constructor(
    protected readonly service: PayoutCycleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PayoutCycle",
    action: "read",
    possession: "any",
  })
  async _payoutCyclesMeta(
    @graphql.Args() args: PayoutCycleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PayoutCycle])
  @nestAccessControl.UseRoles({
    resource: "PayoutCycle",
    action: "read",
    possession: "any",
  })
  async payoutCycles(
    @graphql.Args() args: PayoutCycleFindManyArgs
  ): Promise<PayoutCycle[]> {
    return this.service.payoutCycles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PayoutCycle, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PayoutCycle",
    action: "read",
    possession: "own",
  })
  async payoutCycle(
    @graphql.Args() args: PayoutCycleFindUniqueArgs
  ): Promise<PayoutCycle | null> {
    const result = await this.service.payoutCycle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PayoutCycle)
  @nestAccessControl.UseRoles({
    resource: "PayoutCycle",
    action: "create",
    possession: "any",
  })
  async createPayoutCycle(
    @graphql.Args() args: CreatePayoutCycleArgs
  ): Promise<PayoutCycle> {
    return await this.service.createPayoutCycle({
      ...args,
      data: {
        ...args.data,

        restaurants: {
          connect: args.data.restaurants,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PayoutCycle)
  @nestAccessControl.UseRoles({
    resource: "PayoutCycle",
    action: "update",
    possession: "any",
  })
  async updatePayoutCycle(
    @graphql.Args() args: UpdatePayoutCycleArgs
  ): Promise<PayoutCycle | null> {
    try {
      return await this.service.updatePayoutCycle({
        ...args,
        data: {
          ...args.data,

          restaurants: {
            connect: args.data.restaurants,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PayoutCycle)
  @nestAccessControl.UseRoles({
    resource: "PayoutCycle",
    action: "delete",
    possession: "any",
  })
  async deletePayoutCycle(
    @graphql.Args() args: DeletePayoutCycleArgs
  ): Promise<PayoutCycle | null> {
    try {
      return await this.service.deletePayoutCycle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SettlementsBreakup], {
    name: "settlementsBreakup",
  })
  @nestAccessControl.UseRoles({
    resource: "SettlementsBreakup",
    action: "read",
    possession: "any",
  })
  async findSettlementsBreakup(
    @graphql.Parent() parent: PayoutCycle,
    @graphql.Args() args: SettlementsBreakupFindManyArgs
  ): Promise<SettlementsBreakup[]> {
    const results = await this.service.findSettlementsBreakup(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurants",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurants(
    @graphql.Parent() parent: PayoutCycle
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurants(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
