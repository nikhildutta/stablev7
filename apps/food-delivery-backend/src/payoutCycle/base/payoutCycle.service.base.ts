/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PayoutCycle as PrismaPayoutCycle,
  SettlementsBreakup as PrismaSettlementsBreakup,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class PayoutCycleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PayoutCycleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.payoutCycle.count(args);
  }

  async payoutCycles<T extends Prisma.PayoutCycleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PayoutCycleFindManyArgs>
  ): Promise<PrismaPayoutCycle[]> {
    return this.prisma.payoutCycle.findMany<Prisma.PayoutCycleFindManyArgs>(
      args
    );
  }
  async payoutCycle<T extends Prisma.PayoutCycleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PayoutCycleFindUniqueArgs>
  ): Promise<PrismaPayoutCycle | null> {
    return this.prisma.payoutCycle.findUnique(args);
  }
  async createPayoutCycle<T extends Prisma.PayoutCycleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PayoutCycleCreateArgs>
  ): Promise<PrismaPayoutCycle> {
    return this.prisma.payoutCycle.create<T>(args);
  }
  async updatePayoutCycle<T extends Prisma.PayoutCycleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PayoutCycleUpdateArgs>
  ): Promise<PrismaPayoutCycle> {
    return this.prisma.payoutCycle.update<T>(args);
  }
  async deletePayoutCycle<T extends Prisma.PayoutCycleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PayoutCycleDeleteArgs>
  ): Promise<PrismaPayoutCycle> {
    return this.prisma.payoutCycle.delete(args);
  }

  async findSettlementsBreakup(
    parentId: string,
    args: Prisma.SettlementsBreakupFindManyArgs
  ): Promise<PrismaSettlementsBreakup[]> {
    return this.prisma.payoutCycle
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .settlementsBreakup(args);
  }

  async getRestaurants(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.payoutCycle
      .findUnique({
        where: { id: parentId },
      })
      .restaurants();
  }
}
